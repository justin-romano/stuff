
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000070f  00800100  00800100  0000042e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a9  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a32  00000000  00000000  000016f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd6  00000000  00000000  00002123  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001005b  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ef  00000000  00000000  000130cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000136be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003bea  00000000  00000000  0001376e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	28 e0       	ldi	r18, 0x08	; 8
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  9e:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
  a6:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
  b0:	89 2f       	mov	r24, r25
  b2:	80 6a       	ori	r24, 0xA0	; 160
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	08 95       	ret

000000b8 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  b8:	0e 94 53 00 	call	0xa6	; 0xa6 <board_init>

	/* Insert application code here, after the board has been initialized. */
}
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret

000000c2 <__vector_13>:
static byte aline, rlinecnt;
static byte vskip;
byte vgaxfb[VGAX_HEIGHT*VGAX_BWIDTH];

//VSYNC interrupt
ISR(TIMER1_OVF_vect) {
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  aline=-1;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <_ZL5aline>
  vskip=SKIPLINES;
  d6:	8a e5       	ldi	r24, 0x5A	; 90
  d8:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <_ZL5vskip>
  vtimer++;
  dc:	80 91 0b 08 	lds	r24, 0x080B	; 0x80080b <vtimer>
  e0:	90 91 0c 08 	lds	r25, 0x080C	; 0x80080c <vtimer+0x1>
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	90 93 0c 08 	sts	0x080C, r25	; 0x80080c <vtimer+0x1>
  ea:	80 93 0b 08 	sts	0x080B, r24	; 0x80080b <vtimer>
  rlinecnt=0;
  ee:	10 92 09 08 	sts	0x0809, r1	; 0x800809 <_ZL8rlinecnt>
}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_9>:
//HSYNC interrupt
ISR(TIMER2_OVF_vect) {
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	2f 93       	push	r18
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
    "end:                                   \n\t"
  :
  : "z" (&afreq),
    [freq0] "r" (afreq0),
    [audiopin] "i" _SFR_IO_ADDR(PINC)
  : "r16", "r18");
 11c:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <_ZL6afreq0>
 120:	ee e0       	ldi	r30, 0x0E	; 14
 122:	f8 e0       	ldi	r31, 0x08	; 8
 124:	00 81       	ld	r16, Z
 126:	80 30       	cpi	r24, 0x00	; 0
 128:	31 f0       	breq	.+12     	; 0x136 <no_audio>

0000012a <play_audio>:
 12a:	00 30       	cpi	r16, 0x00	; 0
 12c:	59 f4       	brne	.+22     	; 0x144 <dont_flip_audio_pin>

0000012e <flip_audio_pin>:
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	26 b9       	out	0x06, r18	; 6
 132:	80 83       	st	Z, r24
 134:	09 c0       	rjmp	.+18     	; 0x148 <end>

00000136 <no_audio>:
	...
 142:	02 c0       	rjmp	.+4      	; 0x148 <end>

00000144 <dont_flip_audio_pin>:
 144:	0a 95       	dec	r16
 146:	00 83       	st	Z, r16

00000148 <end>:

  //check vertical porch
  if (vskip) {
 148:	80 91 08 08 	lds	r24, 0x0808	; 0x800808 <_ZL5vskip>
 14c:	88 23       	and	r24, r24
 14e:	21 f0       	breq	.+8      	; 0x158 <end+0x10>
      vskip--;
 150:	81 50       	subi	r24, 0x01	; 1
 152:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <_ZL5vskip>
      return;
 156:	21 c1       	rjmp	.+578    	; 0x39a <LBEND+0x214>
  }
  if (rlinecnt<60) {   
 158:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <_ZL8rlinecnt>
 15c:	8c 33       	cpi	r24, 0x3C	; 60
 15e:	08 f0       	brcs	.+2      	; 0x162 <end+0x1a>
 160:	1c c1       	rjmp	.+568    	; 0x39a <LBEND+0x214>
      "LBEND:                     \n\t" //
    :
    : [timer0] "i" (&TCNT0),
      [toffset] "i" ((uint8_t)DEJITTER_OFFSET),
      [tsync] "i" ((uint8_t)DEJITTER_SYNC)
    : "r30", "r31", "r16", "r17");
 162:	00 91 46 00 	lds	r16, 0x0046	; 0x800046 <__TEXT_REGION_LENGTH__+0x7e0046>
 166:	0d 5f       	subi	r16, 0xFD	; 253
 168:	07 70       	andi	r16, 0x07	; 7
 16a:	0e 94 b7 00 	call	0x16e	; 0x16e <TL>

0000016e <TL>:
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	35 96       	adiw	r30, 0x05	; 5
 174:	e0 0f       	add	r30, r16
 176:	09 94       	ijmp

00000178 <LW>:
	...

00000186 <LBEND>:
      "    ldi r16, 0       \n\t" //
      "    out %[port], r16 \n\t" //write black for next pixels
    :
    : [port] "I" (_SFR_IO_ADDR(PORTD)),
      "z" "I" (/*rline*/(byte*)vgaxfb + rlinecnt*VGAX_BWIDTH)
    : "r16", "r17", "r20", "r21", "memory");
 186:	9e e1       	ldi	r25, 0x1E	; 30
 188:	89 9f       	mul	r24, r25
 18a:	f0 01       	movw	r30, r0
 18c:	11 24       	eor	r1, r1
 18e:	e0 50       	subi	r30, 0x00	; 0
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	44 e0       	ldi	r20, 0x04	; 4
 194:	01 91       	ld	r16, Z+
 196:	0b b9       	out	0x0b, r16	; 11
 198:	04 9f       	mul	r16, r20
 19a:	0b b8       	out	0x0b, r0	; 11
 19c:	04 9e       	mul	r0, r20
 19e:	0b b8       	out	0x0b, r0	; 11
 1a0:	04 9e       	mul	r0, r20
 1a2:	0b b8       	out	0x0b, r0	; 11
 1a4:	01 91       	ld	r16, Z+
 1a6:	0b b9       	out	0x0b, r16	; 11
 1a8:	04 9f       	mul	r16, r20
 1aa:	0b b8       	out	0x0b, r0	; 11
 1ac:	04 9e       	mul	r0, r20
 1ae:	0b b8       	out	0x0b, r0	; 11
 1b0:	04 9e       	mul	r0, r20
 1b2:	0b b8       	out	0x0b, r0	; 11
 1b4:	01 91       	ld	r16, Z+
 1b6:	0b b9       	out	0x0b, r16	; 11
 1b8:	04 9f       	mul	r16, r20
 1ba:	0b b8       	out	0x0b, r0	; 11
 1bc:	04 9e       	mul	r0, r20
 1be:	0b b8       	out	0x0b, r0	; 11
 1c0:	04 9e       	mul	r0, r20
 1c2:	0b b8       	out	0x0b, r0	; 11
 1c4:	01 91       	ld	r16, Z+
 1c6:	0b b9       	out	0x0b, r16	; 11
 1c8:	04 9f       	mul	r16, r20
 1ca:	0b b8       	out	0x0b, r0	; 11
 1cc:	04 9e       	mul	r0, r20
 1ce:	0b b8       	out	0x0b, r0	; 11
 1d0:	04 9e       	mul	r0, r20
 1d2:	0b b8       	out	0x0b, r0	; 11
 1d4:	01 91       	ld	r16, Z+
 1d6:	0b b9       	out	0x0b, r16	; 11
 1d8:	04 9f       	mul	r16, r20
 1da:	0b b8       	out	0x0b, r0	; 11
 1dc:	04 9e       	mul	r0, r20
 1de:	0b b8       	out	0x0b, r0	; 11
 1e0:	04 9e       	mul	r0, r20
 1e2:	0b b8       	out	0x0b, r0	; 11
 1e4:	01 91       	ld	r16, Z+
 1e6:	0b b9       	out	0x0b, r16	; 11
 1e8:	04 9f       	mul	r16, r20
 1ea:	0b b8       	out	0x0b, r0	; 11
 1ec:	04 9e       	mul	r0, r20
 1ee:	0b b8       	out	0x0b, r0	; 11
 1f0:	04 9e       	mul	r0, r20
 1f2:	0b b8       	out	0x0b, r0	; 11
 1f4:	01 91       	ld	r16, Z+
 1f6:	0b b9       	out	0x0b, r16	; 11
 1f8:	04 9f       	mul	r16, r20
 1fa:	0b b8       	out	0x0b, r0	; 11
 1fc:	04 9e       	mul	r0, r20
 1fe:	0b b8       	out	0x0b, r0	; 11
 200:	04 9e       	mul	r0, r20
 202:	0b b8       	out	0x0b, r0	; 11
 204:	01 91       	ld	r16, Z+
 206:	0b b9       	out	0x0b, r16	; 11
 208:	04 9f       	mul	r16, r20
 20a:	0b b8       	out	0x0b, r0	; 11
 20c:	04 9e       	mul	r0, r20
 20e:	0b b8       	out	0x0b, r0	; 11
 210:	04 9e       	mul	r0, r20
 212:	0b b8       	out	0x0b, r0	; 11
 214:	01 91       	ld	r16, Z+
 216:	0b b9       	out	0x0b, r16	; 11
 218:	04 9f       	mul	r16, r20
 21a:	0b b8       	out	0x0b, r0	; 11
 21c:	04 9e       	mul	r0, r20
 21e:	0b b8       	out	0x0b, r0	; 11
 220:	04 9e       	mul	r0, r20
 222:	0b b8       	out	0x0b, r0	; 11
 224:	01 91       	ld	r16, Z+
 226:	0b b9       	out	0x0b, r16	; 11
 228:	04 9f       	mul	r16, r20
 22a:	0b b8       	out	0x0b, r0	; 11
 22c:	04 9e       	mul	r0, r20
 22e:	0b b8       	out	0x0b, r0	; 11
 230:	04 9e       	mul	r0, r20
 232:	0b b8       	out	0x0b, r0	; 11
 234:	01 91       	ld	r16, Z+
 236:	0b b9       	out	0x0b, r16	; 11
 238:	04 9f       	mul	r16, r20
 23a:	0b b8       	out	0x0b, r0	; 11
 23c:	04 9e       	mul	r0, r20
 23e:	0b b8       	out	0x0b, r0	; 11
 240:	04 9e       	mul	r0, r20
 242:	0b b8       	out	0x0b, r0	; 11
 244:	01 91       	ld	r16, Z+
 246:	0b b9       	out	0x0b, r16	; 11
 248:	04 9f       	mul	r16, r20
 24a:	0b b8       	out	0x0b, r0	; 11
 24c:	04 9e       	mul	r0, r20
 24e:	0b b8       	out	0x0b, r0	; 11
 250:	04 9e       	mul	r0, r20
 252:	0b b8       	out	0x0b, r0	; 11
 254:	01 91       	ld	r16, Z+
 256:	0b b9       	out	0x0b, r16	; 11
 258:	04 9f       	mul	r16, r20
 25a:	0b b8       	out	0x0b, r0	; 11
 25c:	04 9e       	mul	r0, r20
 25e:	0b b8       	out	0x0b, r0	; 11
 260:	04 9e       	mul	r0, r20
 262:	0b b8       	out	0x0b, r0	; 11
 264:	01 91       	ld	r16, Z+
 266:	0b b9       	out	0x0b, r16	; 11
 268:	04 9f       	mul	r16, r20
 26a:	0b b8       	out	0x0b, r0	; 11
 26c:	04 9e       	mul	r0, r20
 26e:	0b b8       	out	0x0b, r0	; 11
 270:	04 9e       	mul	r0, r20
 272:	0b b8       	out	0x0b, r0	; 11
 274:	01 91       	ld	r16, Z+
 276:	0b b9       	out	0x0b, r16	; 11
 278:	04 9f       	mul	r16, r20
 27a:	0b b8       	out	0x0b, r0	; 11
 27c:	04 9e       	mul	r0, r20
 27e:	0b b8       	out	0x0b, r0	; 11
 280:	04 9e       	mul	r0, r20
 282:	0b b8       	out	0x0b, r0	; 11
 284:	01 91       	ld	r16, Z+
 286:	0b b9       	out	0x0b, r16	; 11
 288:	04 9f       	mul	r16, r20
 28a:	0b b8       	out	0x0b, r0	; 11
 28c:	04 9e       	mul	r0, r20
 28e:	0b b8       	out	0x0b, r0	; 11
 290:	04 9e       	mul	r0, r20
 292:	0b b8       	out	0x0b, r0	; 11
 294:	01 91       	ld	r16, Z+
 296:	0b b9       	out	0x0b, r16	; 11
 298:	04 9f       	mul	r16, r20
 29a:	0b b8       	out	0x0b, r0	; 11
 29c:	04 9e       	mul	r0, r20
 29e:	0b b8       	out	0x0b, r0	; 11
 2a0:	04 9e       	mul	r0, r20
 2a2:	0b b8       	out	0x0b, r0	; 11
 2a4:	01 91       	ld	r16, Z+
 2a6:	0b b9       	out	0x0b, r16	; 11
 2a8:	04 9f       	mul	r16, r20
 2aa:	0b b8       	out	0x0b, r0	; 11
 2ac:	04 9e       	mul	r0, r20
 2ae:	0b b8       	out	0x0b, r0	; 11
 2b0:	04 9e       	mul	r0, r20
 2b2:	0b b8       	out	0x0b, r0	; 11
 2b4:	01 91       	ld	r16, Z+
 2b6:	0b b9       	out	0x0b, r16	; 11
 2b8:	04 9f       	mul	r16, r20
 2ba:	0b b8       	out	0x0b, r0	; 11
 2bc:	04 9e       	mul	r0, r20
 2be:	0b b8       	out	0x0b, r0	; 11
 2c0:	04 9e       	mul	r0, r20
 2c2:	0b b8       	out	0x0b, r0	; 11
 2c4:	01 91       	ld	r16, Z+
 2c6:	0b b9       	out	0x0b, r16	; 11
 2c8:	04 9f       	mul	r16, r20
 2ca:	0b b8       	out	0x0b, r0	; 11
 2cc:	04 9e       	mul	r0, r20
 2ce:	0b b8       	out	0x0b, r0	; 11
 2d0:	04 9e       	mul	r0, r20
 2d2:	0b b8       	out	0x0b, r0	; 11
 2d4:	01 91       	ld	r16, Z+
 2d6:	0b b9       	out	0x0b, r16	; 11
 2d8:	04 9f       	mul	r16, r20
 2da:	0b b8       	out	0x0b, r0	; 11
 2dc:	04 9e       	mul	r0, r20
 2de:	0b b8       	out	0x0b, r0	; 11
 2e0:	04 9e       	mul	r0, r20
 2e2:	0b b8       	out	0x0b, r0	; 11
 2e4:	01 91       	ld	r16, Z+
 2e6:	0b b9       	out	0x0b, r16	; 11
 2e8:	04 9f       	mul	r16, r20
 2ea:	0b b8       	out	0x0b, r0	; 11
 2ec:	04 9e       	mul	r0, r20
 2ee:	0b b8       	out	0x0b, r0	; 11
 2f0:	04 9e       	mul	r0, r20
 2f2:	0b b8       	out	0x0b, r0	; 11
 2f4:	01 91       	ld	r16, Z+
 2f6:	0b b9       	out	0x0b, r16	; 11
 2f8:	04 9f       	mul	r16, r20
 2fa:	0b b8       	out	0x0b, r0	; 11
 2fc:	04 9e       	mul	r0, r20
 2fe:	0b b8       	out	0x0b, r0	; 11
 300:	04 9e       	mul	r0, r20
 302:	0b b8       	out	0x0b, r0	; 11
 304:	01 91       	ld	r16, Z+
 306:	0b b9       	out	0x0b, r16	; 11
 308:	04 9f       	mul	r16, r20
 30a:	0b b8       	out	0x0b, r0	; 11
 30c:	04 9e       	mul	r0, r20
 30e:	0b b8       	out	0x0b, r0	; 11
 310:	04 9e       	mul	r0, r20
 312:	0b b8       	out	0x0b, r0	; 11
 314:	01 91       	ld	r16, Z+
 316:	0b b9       	out	0x0b, r16	; 11
 318:	04 9f       	mul	r16, r20
 31a:	0b b8       	out	0x0b, r0	; 11
 31c:	04 9e       	mul	r0, r20
 31e:	0b b8       	out	0x0b, r0	; 11
 320:	04 9e       	mul	r0, r20
 322:	0b b8       	out	0x0b, r0	; 11
 324:	01 91       	ld	r16, Z+
 326:	0b b9       	out	0x0b, r16	; 11
 328:	04 9f       	mul	r16, r20
 32a:	0b b8       	out	0x0b, r0	; 11
 32c:	04 9e       	mul	r0, r20
 32e:	0b b8       	out	0x0b, r0	; 11
 330:	04 9e       	mul	r0, r20
 332:	0b b8       	out	0x0b, r0	; 11
 334:	01 91       	ld	r16, Z+
 336:	0b b9       	out	0x0b, r16	; 11
 338:	04 9f       	mul	r16, r20
 33a:	0b b8       	out	0x0b, r0	; 11
 33c:	04 9e       	mul	r0, r20
 33e:	0b b8       	out	0x0b, r0	; 11
 340:	04 9e       	mul	r0, r20
 342:	0b b8       	out	0x0b, r0	; 11
 344:	01 91       	ld	r16, Z+
 346:	0b b9       	out	0x0b, r16	; 11
 348:	04 9f       	mul	r16, r20
 34a:	0b b8       	out	0x0b, r0	; 11
 34c:	04 9e       	mul	r0, r20
 34e:	0b b8       	out	0x0b, r0	; 11
 350:	04 9e       	mul	r0, r20
 352:	0b b8       	out	0x0b, r0	; 11
 354:	01 91       	ld	r16, Z+
 356:	0b b9       	out	0x0b, r16	; 11
 358:	04 9f       	mul	r16, r20
 35a:	0b b8       	out	0x0b, r0	; 11
 35c:	04 9e       	mul	r0, r20
 35e:	0b b8       	out	0x0b, r0	; 11
 360:	04 9e       	mul	r0, r20
 362:	0b b8       	out	0x0b, r0	; 11
 364:	01 91       	ld	r16, Z+
 366:	0b b9       	out	0x0b, r16	; 11
 368:	04 9f       	mul	r16, r20
 36a:	0b b8       	out	0x0b, r0	; 11
 36c:	04 9e       	mul	r0, r20
 36e:	0b b8       	out	0x0b, r0	; 11
 370:	04 9e       	mul	r0, r20
 372:	0b b8       	out	0x0b, r0	; 11
 374:	00 00       	nop
 376:	00 e0       	ldi	r16, 0x00	; 0
 378:	0b b9       	out	0x0b, r16	; 11

    //increment framebuffer line counter after 6 VGA lines
    if (++aline==5) { 
 37a:	80 91 0a 08 	lds	r24, 0x080A	; 0x80080a <_ZL5aline>
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	85 30       	cpi	r24, 0x05	; 5
 382:	19 f0       	breq	.+6      	; 0x38a <LBEND+0x204>
 384:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <_ZL5aline>
 388:	08 c0       	rjmp	.+16     	; 0x39a <LBEND+0x214>
      aline=-1;
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	80 93 0a 08 	sts	0x080A, r24	; 0x80080a <_ZL5aline>
      rlinecnt++;
 390:	80 91 09 08 	lds	r24, 0x0809	; 0x800809 <_ZL8rlinecnt>
 394:	8f 5f       	subi	r24, 0xFF	; 255
 396:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <_ZL8rlinecnt>
        ".endr    \n\t" //
      :::);
      #endif
    }
  } 
}
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	2f 91       	pop	r18
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
