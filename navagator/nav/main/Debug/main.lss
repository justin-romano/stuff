
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000065a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  0000065a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001850  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0c  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb8  00000000  00000000  00002c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00003810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078f  00000000  00000000  00003a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a67  00000000  00000000  000041ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004c66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	e6 ee       	ldi	r30, 0xE6	; 230
  cc:	f5 e0       	ldi	r31, 0x05	; 5
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a0 30       	cpi	r26, 0x00	; 0
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a0 e0       	ldi	r26, 0x00	; 0
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	a9 30       	cpi	r26, 0x09	; 9
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 08 01 	call	0x210	; 0x210 <main>
  ee:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <setup>:
#define B_1A 11
#define B_1B 10

void setup()
{
	pinMode(B_1A,OUTPUT);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	8b e0       	ldi	r24, 0x0B	; 11
  fa:	0e 94 85 02 	call	0x50a	; 0x50a <pinMode>
	pinMode(B_1B,OUTPUT);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	8a e0       	ldi	r24, 0x0A	; 10
 102:	0e 94 85 02 	call	0x50a	; 0x50a <pinMode>
	digitalWrite(B_1A, LOW);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	8b e0       	ldi	r24, 0x0B	; 11
 10a:	0e 94 c1 02 	call	0x582	; 0x582 <digitalWrite>
	digitalWrite(B_1B,LOW);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	8a e0       	ldi	r24, 0x0A	; 10
 112:	0c 94 c1 02 	jmp	0x582	; 0x582 <digitalWrite>

00000116 <_Z6runForiii>:
	
}

void runFor(int power, int forMs, int direction)
{
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	8b 01       	movw	r16, r22
	if(direction == 1)
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	51 05       	cpc	r21, r1
 122:	11 f4       	brne	.+4      	; 0x128 <_Z6runForiii+0x12>
		power -=1;
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	04 c0       	rjmp	.+8      	; 0x130 <_Z6runForiii+0x1a>
	int pin = (direction == -1 ? B_1A : B_1B);
 128:	4f 3f       	cpi	r20, 0xFF	; 255
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	52 07       	cpc	r21, r18
 12e:	11 f0       	breq	.+4      	; 0x134 <_Z6runForiii+0x1e>
 130:	ca e0       	ldi	r28, 0x0A	; 10
 132:	01 c0       	rjmp	.+2      	; 0x136 <_Z6runForiii+0x20>
 134:	cb e0       	ldi	r28, 0x0B	; 11
	analogWrite(pin,power += direction);
 136:	ba 01       	movw	r22, r20
 138:	68 0f       	add	r22, r24
 13a:	79 1f       	adc	r23, r25
 13c:	8c 2f       	mov	r24, r28
 13e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <analogWrite>
	delay(forMs);
 142:	b8 01       	movw	r22, r16
 144:	11 0f       	add	r17, r17
 146:	88 0b       	sbc	r24, r24
 148:	99 0b       	sbc	r25, r25
 14a:	0e 94 86 01 	call	0x30c	; 0x30c <delay>
	analogWrite(pin,0);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	8c 2f       	mov	r24, r28
 154:	0e 94 fd 01 	call	0x3fa	; 0x3fa <analogWrite>
	digitalWrite(pin, LOW);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c 2f       	mov	r24, r28
}
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
		power -=1;
	int pin = (direction == -1 ? B_1A : B_1B);
	analogWrite(pin,power += direction);
	delay(forMs);
	analogWrite(pin,0);
	digitalWrite(pin, LOW);
 162:	0c 94 c1 02 	jmp	0x582	; 0x582 <digitalWrite>

00000166 <loop>:
}

void loop()
{
	runFor(234,150,1);
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	66 e9       	ldi	r22, 0x96	; 150
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	8a ee       	ldi	r24, 0xEA	; 234
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 8b 00 	call	0x116	; 0x116 <_Z6runForiii>
	delay(100);
 176:	64 e6       	ldi	r22, 0x64	; 100
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 86 01 	call	0x30c	; 0x30c <delay>
	runFor(234,150,1);
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	66 e9       	ldi	r22, 0x96	; 150
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	8a ee       	ldi	r24, 0xEA	; 234
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 8b 00 	call	0x116	; 0x116 <_Z6runForiii>
	delay(100);
 192:	64 e6       	ldi	r22, 0x64	; 100
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 86 01 	call	0x30c	; 0x30c <delay>
	runFor(234,150,1);
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	66 e9       	ldi	r22, 0x96	; 150
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	8a ee       	ldi	r24, 0xEA	; 234
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 8b 00 	call	0x116	; 0x116 <_Z6runForiii>
	delay(100);
 1ae:	64 e6       	ldi	r22, 0x64	; 100
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 86 01 	call	0x30c	; 0x30c <delay>
	runFor(234,150,-1);
 1ba:	4f ef       	ldi	r20, 0xFF	; 255
 1bc:	5f ef       	ldi	r21, 0xFF	; 255
 1be:	66 e9       	ldi	r22, 0x96	; 150
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	8a ee       	ldi	r24, 0xEA	; 234
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 8b 00 	call	0x116	; 0x116 <_Z6runForiii>
	delay(100);
 1ca:	64 e6       	ldi	r22, 0x64	; 100
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 86 01 	call	0x30c	; 0x30c <delay>
	runFor(234,150,-1);
 1d6:	4f ef       	ldi	r20, 0xFF	; 255
 1d8:	5f ef       	ldi	r21, 0xFF	; 255
 1da:	66 e9       	ldi	r22, 0x96	; 150
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	8a ee       	ldi	r24, 0xEA	; 234
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 8b 00 	call	0x116	; 0x116 <_Z6runForiii>
	delay(100);
 1e6:	64 e6       	ldi	r22, 0x64	; 100
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 86 01 	call	0x30c	; 0x30c <delay>
	runFor(234,150,-1);
 1f2:	4f ef       	ldi	r20, 0xFF	; 255
 1f4:	5f ef       	ldi	r21, 0xFF	; 255
 1f6:	66 e9       	ldi	r22, 0x96	; 150
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	8a ee       	ldi	r24, 0xEA	; 234
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 8b 00 	call	0x116	; 0x116 <_Z6runForiii>
	delay(100);
 202:	64 e6       	ldi	r22, 0x64	; 100
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0c 94 86 01 	jmp	0x30c	; 0x30c <delay>

0000020e <initVariant>:
 20e:	08 95       	ret

00000210 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 210:	0e 94 c2 01 	call	0x384	; 0x384 <init>

	initVariant();
 214:	0e 94 07 01 	call	0x20e	; 0x20e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 218:	0e 94 7b 00 	call	0xf6	; 0xf6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 220:	0e 94 b3 00 	call	0x166	; 0x166 <loop>
		if (serialEventRun) serialEventRun();
 224:	20 97       	sbiw	r28, 0x00	; 0
 226:	e1 f3       	breq	.-8      	; 0x220 <main+0x10>
 228:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 22c:	f9 cf       	rjmp	.-14     	; 0x220 <main+0x10>

0000022e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
 248:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
 24c:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
 250:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
 254:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__data_end>
 258:	23 e0       	ldi	r18, 0x03	; 3
 25a:	23 0f       	add	r18, r19
 25c:	2d 37       	cpi	r18, 0x7D	; 125
 25e:	20 f4       	brcc	.+8      	; 0x268 <__vector_16+0x3a>
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	a1 1d       	adc	r26, r1
 264:	b1 1d       	adc	r27, r1
 266:	05 c0       	rjmp	.+10     	; 0x272 <__vector_16+0x44>
 268:	26 e8       	ldi	r18, 0x86	; 134
 26a:	23 0f       	add	r18, r19
 26c:	02 96       	adiw	r24, 0x02	; 2
 26e:	a1 1d       	adc	r26, r1
 270:	b1 1d       	adc	r27, r1
 272:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_end>
 276:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 27a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 27e:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 282:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
 286:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 28a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 28e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 292:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	a1 1d       	adc	r26, r1
 29a:	b1 1d       	adc	r27, r1
 29c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 2a0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 2a4:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 2a8:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <micros>:
 2c2:	3f b7       	in	r19, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 2ca:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 2ce:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 2d2:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 2d6:	26 b5       	in	r18, 0x26	; 38
 2d8:	a8 9b       	sbis	0x15, 0	; 21
 2da:	05 c0       	rjmp	.+10     	; 0x2e6 <micros+0x24>
 2dc:	2f 3f       	cpi	r18, 0xFF	; 255
 2de:	19 f0       	breq	.+6      	; 0x2e6 <micros+0x24>
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	a1 1d       	adc	r26, r1
 2e4:	b1 1d       	adc	r27, r1
 2e6:	3f bf       	out	0x3f, r19	; 63
 2e8:	ba 2f       	mov	r27, r26
 2ea:	a9 2f       	mov	r26, r25
 2ec:	98 2f       	mov	r25, r24
 2ee:	88 27       	eor	r24, r24
 2f0:	82 0f       	add	r24, r18
 2f2:	91 1d       	adc	r25, r1
 2f4:	a1 1d       	adc	r26, r1
 2f6:	b1 1d       	adc	r27, r1
 2f8:	bc 01       	movw	r22, r24
 2fa:	cd 01       	movw	r24, r26
 2fc:	42 e0       	ldi	r20, 0x02	; 2
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	4a 95       	dec	r20
 308:	d1 f7       	brne	.-12     	; 0x2fe <micros+0x3c>
 30a:	08 95       	ret

0000030c <delay>:
 30c:	8f 92       	push	r8
 30e:	9f 92       	push	r9
 310:	af 92       	push	r10
 312:	bf 92       	push	r11
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	6b 01       	movw	r12, r22
 31e:	7c 01       	movw	r14, r24
 320:	0e 94 61 01 	call	0x2c2	; 0x2c2 <micros>
 324:	4b 01       	movw	r8, r22
 326:	5c 01       	movw	r10, r24
 328:	c1 14       	cp	r12, r1
 32a:	d1 04       	cpc	r13, r1
 32c:	e1 04       	cpc	r14, r1
 32e:	f1 04       	cpc	r15, r1
 330:	01 f1       	breq	.+64     	; 0x372 <delay+0x66>
 332:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <yield>
 336:	0e 94 61 01 	call	0x2c2	; 0x2c2 <micros>
 33a:	dc 01       	movw	r26, r24
 33c:	cb 01       	movw	r24, r22
 33e:	88 19       	sub	r24, r8
 340:	99 09       	sbc	r25, r9
 342:	aa 09       	sbc	r26, r10
 344:	bb 09       	sbc	r27, r11
 346:	88 3e       	cpi	r24, 0xE8	; 232
 348:	93 40       	sbci	r25, 0x03	; 3
 34a:	a1 05       	cpc	r26, r1
 34c:	b1 05       	cpc	r27, r1
 34e:	60 f3       	brcs	.-40     	; 0x328 <delay+0x1c>
 350:	21 e0       	ldi	r18, 0x01	; 1
 352:	c2 1a       	sub	r12, r18
 354:	d1 08       	sbc	r13, r1
 356:	e1 08       	sbc	r14, r1
 358:	f1 08       	sbc	r15, r1
 35a:	88 ee       	ldi	r24, 0xE8	; 232
 35c:	88 0e       	add	r8, r24
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	98 1e       	adc	r9, r24
 362:	a1 1c       	adc	r10, r1
 364:	b1 1c       	adc	r11, r1
 366:	c1 14       	cp	r12, r1
 368:	d1 04       	cpc	r13, r1
 36a:	e1 04       	cpc	r14, r1
 36c:	f1 04       	cpc	r15, r1
 36e:	19 f7       	brne	.-58     	; 0x336 <delay+0x2a>
 370:	db cf       	rjmp	.-74     	; 0x328 <delay+0x1c>
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	df 90       	pop	r13
 378:	cf 90       	pop	r12
 37a:	bf 90       	pop	r11
 37c:	af 90       	pop	r10
 37e:	9f 90       	pop	r9
 380:	8f 90       	pop	r8
 382:	08 95       	ret

00000384 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 384:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 386:	84 b5       	in	r24, 0x24	; 36
 388:	82 60       	ori	r24, 0x02	; 2
 38a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 38c:	84 b5       	in	r24, 0x24	; 36
 38e:	81 60       	ori	r24, 0x01	; 1
 390:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 392:	85 b5       	in	r24, 0x25	; 37
 394:	82 60       	ori	r24, 0x02	; 2
 396:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 398:	85 b5       	in	r24, 0x25	; 37
 39a:	81 60       	ori	r24, 0x01	; 1
 39c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 39e:	ee e6       	ldi	r30, 0x6E	; 110
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	81 60       	ori	r24, 0x01	; 1
 3a6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 3a8:	e1 e8       	ldi	r30, 0x81	; 129
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 3ae:	80 81       	ld	r24, Z
 3b0:	82 60       	ori	r24, 0x02	; 2
 3b2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 3b4:	80 81       	ld	r24, Z
 3b6:	81 60       	ori	r24, 0x01	; 1
 3b8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 3ba:	e0 e8       	ldi	r30, 0x80	; 128
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	81 60       	ori	r24, 0x01	; 1
 3c2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3c4:	e1 eb       	ldi	r30, 0xB1	; 177
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	84 60       	ori	r24, 0x04	; 4
 3cc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3ce:	e0 eb       	ldi	r30, 0xB0	; 176
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 3d8:	ea e7       	ldi	r30, 0x7A	; 122
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	84 60       	ori	r24, 0x04	; 4
 3e0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 3e2:	80 81       	ld	r24, Z
 3e4:	82 60       	ori	r24, 0x02	; 2
 3e6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 3e8:	80 81       	ld	r24, Z
 3ea:	81 60       	ori	r24, 0x01	; 1
 3ec:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 3ee:	80 81       	ld	r24, Z
 3f0:	80 68       	ori	r24, 0x80	; 128
 3f2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 3f4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 3f8:	08 95       	ret

000003fa <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	18 2f       	mov	r17, r24
 402:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	0e 94 85 02 	call	0x50a	; 0x50a <pinMode>
	if (val == 0)
 40a:	20 97       	sbiw	r28, 0x00	; 0
 40c:	11 f4       	brne	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		digitalWrite(pin, LOW);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	04 c0       	rjmp	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	}
	else if (val == 255)
 412:	cf 3f       	cpi	r28, 0xFF	; 255
 414:	d1 05       	cpc	r29, r1
 416:	39 f4       	brne	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		digitalWrite(pin, HIGH);
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
 422:	0c 94 c1 02 	jmp	0x582	; 0x582 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
 426:	e1 2f       	mov	r30, r17
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	e8 59       	subi	r30, 0x98	; 152
 42c:	ff 4f       	sbci	r31, 0xFF	; 255
 42e:	e4 91       	lpm	r30, Z
 430:	e3 30       	cpi	r30, 0x03	; 3
 432:	f9 f0       	breq	.+62     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 434:	48 f4       	brcc	.+18     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 436:	e1 30       	cpi	r30, 0x01	; 1
 438:	b9 f0       	breq	.+46     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 43a:	e2 30       	cpi	r30, 0x02	; 2
 43c:	a1 f5       	brne	.+104    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
 43e:	84 b5       	in	r24, 0x24	; 36
 440:	80 62       	ori	r24, 0x20	; 32
 442:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
 444:	c8 bd       	out	0x28, r28	; 40
				break;
 446:	34 c0       	rjmp	.+104    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
 448:	e7 30       	cpi	r30, 0x07	; 7
 44a:	e9 f0       	breq	.+58     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 44c:	e8 30       	cpi	r30, 0x08	; 8
 44e:	19 f1       	breq	.+70     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 450:	e4 30       	cpi	r30, 0x04	; 4
 452:	49 f5       	brne	.+82     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
 454:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 458:	80 62       	ori	r24, 0x20	; 32
 45a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
 45e:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 462:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
 466:	24 c0       	rjmp	.+72     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
 468:	84 b5       	in	r24, 0x24	; 36
 46a:	80 68       	ori	r24, 0x80	; 128
 46c:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
 46e:	c7 bd       	out	0x27, r28	; 39
				break;
 470:	1f c0       	rjmp	.+62     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
 472:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 476:	80 68       	ori	r24, 0x80	; 128
 478:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
 47c:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 480:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
 484:	15 c0       	rjmp	.+42     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
 486:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 48a:	80 68       	ori	r24, 0x80	; 128
 48c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
 490:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
 494:	0d c0       	rjmp	.+26     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
 496:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 49a:	80 62       	ori	r24, 0x20	; 32
 49c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
 4a0:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 4a6:	c0 38       	cpi	r28, 0x80	; 128
 4a8:	d1 05       	cpc	r29, r1
 4aa:	0c f0       	brlt	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4ac:	b5 cf       	rjmp	.-150    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 4ae:	af cf       	rjmp	.-162    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	08 95       	ret

000004b8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 4b8:	83 30       	cpi	r24, 0x03	; 3
 4ba:	81 f0       	breq	.+32     	; 0x4dc <turnOffPWM+0x24>
 4bc:	28 f4       	brcc	.+10     	; 0x4c8 <turnOffPWM+0x10>
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	99 f0       	breq	.+38     	; 0x4e8 <turnOffPWM+0x30>
 4c2:	82 30       	cpi	r24, 0x02	; 2
 4c4:	a1 f0       	breq	.+40     	; 0x4ee <turnOffPWM+0x36>
 4c6:	08 95       	ret
 4c8:	87 30       	cpi	r24, 0x07	; 7
 4ca:	a9 f0       	breq	.+42     	; 0x4f6 <turnOffPWM+0x3e>
 4cc:	88 30       	cpi	r24, 0x08	; 8
 4ce:	b9 f0       	breq	.+46     	; 0x4fe <turnOffPWM+0x46>
 4d0:	84 30       	cpi	r24, 0x04	; 4
 4d2:	d1 f4       	brne	.+52     	; 0x508 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4d4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4d8:	8f 7d       	andi	r24, 0xDF	; 223
 4da:	03 c0       	rjmp	.+6      	; 0x4e2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 4dc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4e0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 4e2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 4e6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 4e8:	84 b5       	in	r24, 0x24	; 36
 4ea:	8f 77       	andi	r24, 0x7F	; 127
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 4ee:	84 b5       	in	r24, 0x24	; 36
 4f0:	8f 7d       	andi	r24, 0xDF	; 223
 4f2:	84 bd       	out	0x24, r24	; 36
 4f4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 4f6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 4fa:	8f 77       	andi	r24, 0x7F	; 127
 4fc:	03 c0       	rjmp	.+6      	; 0x504 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 4fe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 502:	8f 7d       	andi	r24, 0xDF	; 223
 504:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 508:	08 95       	ret

0000050a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	fc 01       	movw	r30, r24
 512:	e4 58       	subi	r30, 0x84	; 132
 514:	ff 4f       	sbci	r31, 0xFF	; 255
 516:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 518:	fc 01       	movw	r30, r24
 51a:	e0 57       	subi	r30, 0x70	; 112
 51c:	ff 4f       	sbci	r31, 0xFF	; 255
 51e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 520:	88 23       	and	r24, r24
 522:	61 f1       	breq	.+88     	; 0x57c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	fc 01       	movw	r30, r24
 52c:	e2 55       	subi	r30, 0x52	; 82
 52e:	ff 4f       	sbci	r31, 0xFF	; 255
 530:	c5 91       	lpm	r28, Z+
 532:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 534:	fc 01       	movw	r30, r24
 536:	ec 55       	subi	r30, 0x5C	; 92
 538:	ff 4f       	sbci	r31, 0xFF	; 255
 53a:	a5 91       	lpm	r26, Z+
 53c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 53e:	61 11       	cpse	r22, r1
 540:	09 c0       	rjmp	.+18     	; 0x554 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 542:	9f b7       	in	r25, 0x3f	; 63
                cli();
 544:	f8 94       	cli
		*reg &= ~bit;
 546:	88 81       	ld	r24, Y
 548:	20 95       	com	r18
 54a:	82 23       	and	r24, r18
 54c:	88 83       	st	Y, r24
		*out &= ~bit;
 54e:	ec 91       	ld	r30, X
 550:	2e 23       	and	r18, r30
 552:	0b c0       	rjmp	.+22     	; 0x56a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 554:	62 30       	cpi	r22, 0x02	; 2
 556:	61 f4       	brne	.+24     	; 0x570 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 558:	9f b7       	in	r25, 0x3f	; 63
                cli();
 55a:	f8 94       	cli
		*reg &= ~bit;
 55c:	88 81       	ld	r24, Y
 55e:	32 2f       	mov	r19, r18
 560:	30 95       	com	r19
 562:	83 23       	and	r24, r19
 564:	88 83       	st	Y, r24
		*out |= bit;
 566:	ec 91       	ld	r30, X
 568:	2e 2b       	or	r18, r30
 56a:	2c 93       	st	X, r18
		SREG = oldSREG;
 56c:	9f bf       	out	0x3f, r25	; 63
 56e:	06 c0       	rjmp	.+12     	; 0x57c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 570:	8f b7       	in	r24, 0x3f	; 63
                cli();
 572:	f8 94       	cli
		*reg |= bit;
 574:	e8 81       	ld	r30, Y
 576:	2e 2b       	or	r18, r30
 578:	28 83       	st	Y, r18
		SREG = oldSREG;
 57a:	8f bf       	out	0x3f, r24	; 63
	}
}
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	f9 01       	movw	r30, r18
 58e:	e8 59       	subi	r30, 0x98	; 152
 590:	ff 4f       	sbci	r31, 0xFF	; 255
 592:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 594:	f9 01       	movw	r30, r18
 596:	e4 58       	subi	r30, 0x84	; 132
 598:	ff 4f       	sbci	r31, 0xFF	; 255
 59a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 59c:	f9 01       	movw	r30, r18
 59e:	e0 57       	subi	r30, 0x70	; 112
 5a0:	ff 4f       	sbci	r31, 0xFF	; 255
 5a2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 5a4:	cc 23       	and	r28, r28
 5a6:	c1 f0       	breq	.+48     	; 0x5d8 <digitalWrite+0x56>
 5a8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 5aa:	81 11       	cpse	r24, r1
 5ac:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <turnOffPWM>

	out = portOutputRegister(port);
 5b0:	ec 2f       	mov	r30, r28
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	ec 55       	subi	r30, 0x5C	; 92
 5ba:	ff 4f       	sbci	r31, 0xFF	; 255
 5bc:	a5 91       	lpm	r26, Z+
 5be:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 5c0:	9f b7       	in	r25, 0x3f	; 63
	cli();
 5c2:	f8 94       	cli

	if (val == LOW) {
 5c4:	11 11       	cpse	r17, r1
 5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <digitalWrite+0x4e>
		*out &= ~bit;
 5c8:	8c 91       	ld	r24, X
 5ca:	d0 95       	com	r29
 5cc:	d8 23       	and	r29, r24
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <digitalWrite+0x52>
	} else {
		*out |= bit;
 5d0:	ec 91       	ld	r30, X
 5d2:	de 2b       	or	r29, r30
 5d4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 5d6:	9f bf       	out	0x3f, r25	; 63
}
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	1f 91       	pop	r17
 5de:	08 95       	ret

000005e0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 5e0:	08 95       	ret

000005e2 <_exit>:
 5e2:	f8 94       	cli

000005e4 <__stop_program>:
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <__stop_program>
