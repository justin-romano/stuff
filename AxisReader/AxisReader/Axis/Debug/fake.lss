
fake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000ef6  00000f8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017a  00800146  00800146  00000fd0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007970  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001940  00000000  00000000  00008c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018b5  00000000  00000000  0000a5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007e8  00000000  00000000  0000be8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f05  00000000  00000000  0000c674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d57  00000000  00000000  0000e579  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_16>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_18>
  4c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_19>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	01 02       	muls	r16, r17
  6a:	04 08       	sbc	r0, r4
  6c:	10 20       	and	r1, r0
  6e:	40 80       	ld	r4, Z
  70:	01 02       	muls	r16, r17
  72:	04 08       	sbc	r0, r4
  74:	10 20       	and	r1, r0
  76:	01 02       	muls	r16, r17
  78:	04 08       	sbc	r0, r4
  7a:	10 20       	and	r1, r0

0000007c <digital_pin_to_port_PGM>:
  7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  8c:	03 03 03 03                                         ....

00000090 <port_to_output_PGM>:
  90:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000009a <port_to_mode_PGM>:
  9a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000a4 <__ctors_start>:
  a4:	93 02       	muls	r25, r19

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d8 e0       	ldi	r29, 0x08	; 8
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	e6 ef       	ldi	r30, 0xF6	; 246
  ba:	fe e0       	ldi	r31, 0x0E	; 14
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a6 34       	cpi	r26, 0x46	; 70
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
  c8:	22 e0       	ldi	r18, 0x02	; 2
  ca:	a6 e4       	ldi	r26, 0x46	; 70
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a0 3c       	cpi	r26, 0xC0	; 192
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_global_ctors>:
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	c3 e5       	ldi	r28, 0x53	; 83
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
  e0:	21 97       	sbiw	r28, 0x01	; 1
  e2:	fe 01       	movw	r30, r28
  e4:	0e 94 89 04 	call	0x912	; 0x912 <__tablejump2__>
  e8:	c2 35       	cpi	r28, 0x52	; 82
  ea:	d1 07       	cpc	r29, r17
  ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
  ee:	0e 94 c1 02 	call	0x582	; 0x582 <main>
  f2:	0c 94 79 07 	jmp	0xef2	; 0xef2 <_exit>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <setup>:
ï»¿
#include <Arduino.h>
#include <avr/io.h>

void setup()
{
  fa:	cf 93       	push	r28
  fc:	ce e0       	ldi	r28, 0x0E	; 14
	for(int a = A0; a < A0+6; a++)
	pinMode(a, INPUT);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	8c 2f       	mov	r24, r28
 102:	0e 94 2a 04 	call	0x854	; 0x854 <pinMode>
 106:	cf 5f       	subi	r28, 0xFF	; 255
#include <Arduino.h>
#include <avr/io.h>

void setup()
{
	for(int a = A0; a < A0+6; a++)
 108:	c4 31       	cpi	r28, 0x14	; 20
 10a:	c9 f7       	brne	.-14     	; 0xfe <setup+0x4>
	pinMode(a, INPUT);
	Serial.println("Begin");
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	71 e0       	ldi	r23, 0x01	; 1
 110:	8a e1       	ldi	r24, 0x1A	; 26
 112:	92 e0       	ldi	r25, 0x02	; 2
 114:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN5Print7printlnEPKc>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 118:	26 e0       	ldi	r18, 0x06	; 6
 11a:	40 e8       	ldi	r20, 0x80	; 128
 11c:	55 e2       	ldi	r21, 0x25	; 37
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	8a e1       	ldi	r24, 0x1A	; 26
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	while(!Serial.availableForWrite())
 12a:	8a e1       	ldi	r24, 0x1A	; 26
 12c:	92 e0       	ldi	r25, 0x02	; 2
 12e:	0e 94 22 02 	call	0x444	; 0x444 <_ZN14HardwareSerial17availableForWriteEv>
 132:	89 2b       	or	r24, r25
 134:	31 f4       	brne	.+12     	; 0x142 <setup+0x48>
	delay(0);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	cb 01       	movw	r24, r22
 13c:	0e 94 96 03 	call	0x72c	; 0x72c <delay>
{
	for(int a = A0; a < A0+6; a++)
	pinMode(a, INPUT);
	Serial.println("Begin");
	Serial.begin(9600);
	while(!Serial.availableForWrite())
 140:	f4 cf       	rjmp	.-24     	; 0x12a <setup+0x30>
	delay(0);
	Serial.println("Connect");
 142:	67 e0       	ldi	r22, 0x07	; 7
 144:	71 e0       	ldi	r23, 0x01	; 1
 146:	8a e1       	ldi	r24, 0x1A	; 26
 148:	92 e0       	ldi	r25, 0x02	; 2
};
 14a:	cf 91       	pop	r28
	pinMode(a, INPUT);
	Serial.println("Begin");
	Serial.begin(9600);
	while(!Serial.availableForWrite())
	delay(0);
	Serial.println("Connect");
 14c:	0c 94 15 03 	jmp	0x62a	; 0x62a <_ZN5Print7printlnEPKc>

00000150 <loop>:
};
char buffer[200];
int inputs[6];

void loop()
{
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	02 e6       	ldi	r16, 0x62	; 98
 158:	11 e0       	ldi	r17, 0x01	; 1
 15a:	ce e0       	ldi	r28, 0x0E	; 14
	for(int a = A0; a < (A0+6); a++)
	{
		inputs[a] = analogRead(a);
 15c:	8c 2f       	mov	r24, r28
 15e:	0e 94 0d 04 	call	0x81a	; 0x81a <analogRead>
 162:	f8 01       	movw	r30, r16
 164:	81 93       	st	Z+, r24
 166:	91 93       	st	Z+, r25
 168:	8f 01       	movw	r16, r30
 16a:	cf 5f       	subi	r28, 0xFF	; 255
char buffer[200];
int inputs[6];

void loop()
{
	for(int a = A0; a < (A0+6); a++)
 16c:	c4 31       	cpi	r28, 0x14	; 20
 16e:	b1 f7       	brne	.-20     	; 0x15c <loop+0xc>
	{
		inputs[a] = analogRead(a);
	}
	sprintf(buffer, "%i, %i, %i, %i, %i, %i\n", inputs[0],inputs[1],inputs[2],inputs[3],inputs[4],inputs[5]);
 170:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <__data_end+0xb>
 174:	8f 93       	push	r24
 176:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end+0xa>
 17a:	8f 93       	push	r24
 17c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__data_end+0x9>
 180:	8f 93       	push	r24
 182:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end+0x8>
 186:	8f 93       	push	r24
 188:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <__data_end+0x7>
 18c:	8f 93       	push	r24
 18e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end+0x6>
 192:	8f 93       	push	r24
 194:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <__data_end+0x5>
 198:	8f 93       	push	r24
 19a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end+0x4>
 19e:	8f 93       	push	r24
 1a0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <__data_end+0x3>
 1a4:	8f 93       	push	r24
 1a6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end+0x2>
 1aa:	8f 93       	push	r24
 1ac:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__data_end+0x1>
 1b0:	8f 93       	push	r24
 1b2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 1b6:	8f 93       	push	r24
 1b8:	8f e0       	ldi	r24, 0x0F	; 15
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	9f 93       	push	r25
 1be:	8f 93       	push	r24
 1c0:	82 e5       	ldi	r24, 0x52	; 82
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	9f 93       	push	r25
 1c6:	8f 93       	push	r24
 1c8:	0e 94 8f 04 	call	0x91e	; 0x91e <sprintf>
	Serial.print(buffer);
 1cc:	8d b7       	in	r24, 0x3d	; 61
 1ce:	9e b7       	in	r25, 0x3e	; 62
 1d0:	40 96       	adiw	r24, 0x10	; 16
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	9e bf       	out	0x3e, r25	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	8d bf       	out	0x3d, r24	; 61
 1dc:	62 e5       	ldi	r22, 0x52	; 82
 1de:	71 e0       	ldi	r23, 0x01	; 1
 1e0:	8a e1       	ldi	r24, 0x1A	; 26
 1e2:	92 e0       	ldi	r25, 0x02	; 2
	
};
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
	for(int a = A0; a < (A0+6); a++)
	{
		inputs[a] = analogRead(a);
	}
	sprintf(buffer, "%i, %i, %i, %i, %i, %i\n", inputs[0],inputs[1],inputs[2],inputs[3],inputs[4],inputs[5]);
	Serial.print(buffer);
 1ea:	0c 94 0f 03 	jmp	0x61e	; 0x61e <_ZN5Print5printEPKc>

000001ee <_ZN14HardwareSerial9availableEv>:
  cbi(*_ucsrb, RXCIE0);
  cbi(*_ucsrb, UDRIE0);
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}
 1ee:	fc 01       	movw	r30, r24
 1f0:	91 8d       	ldd	r25, Z+25	; 0x19
 1f2:	22 8d       	ldd	r18, Z+26	; 0x1a
 1f4:	89 2f       	mov	r24, r25
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	80 5c       	subi	r24, 0xC0	; 192
 1fa:	9f 4f       	sbci	r25, 0xFF	; 255
 1fc:	82 1b       	sub	r24, r18
 1fe:	91 09       	sbc	r25, r1
 200:	8f 73       	andi	r24, 0x3F	; 63
 202:	99 27       	eor	r25, r25
 204:	08 95       	ret

00000206 <_ZN14HardwareSerial4peekEv>:
 206:	fc 01       	movw	r30, r24
 208:	91 8d       	ldd	r25, Z+25	; 0x19
 20a:	82 8d       	ldd	r24, Z+26	; 0x1a
 20c:	98 17       	cp	r25, r24
 20e:	31 f0       	breq	.+12     	; 0x21c <_ZN14HardwareSerial4peekEv+0x16>
 210:	82 8d       	ldd	r24, Z+26	; 0x1a
 212:	e8 0f       	add	r30, r24
 214:	f1 1d       	adc	r31, r1
 216:	85 8d       	ldd	r24, Z+29	; 0x1d
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	08 95       	ret
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	9f ef       	ldi	r25, 0xFF	; 255
 220:	08 95       	ret

00000222 <_ZN14HardwareSerial4readEv>:
 222:	fc 01       	movw	r30, r24
 224:	91 8d       	ldd	r25, Z+25	; 0x19
 226:	82 8d       	ldd	r24, Z+26	; 0x1a
 228:	98 17       	cp	r25, r24
 22a:	61 f0       	breq	.+24     	; 0x244 <_ZN14HardwareSerial4readEv+0x22>
 22c:	82 8d       	ldd	r24, Z+26	; 0x1a
 22e:	df 01       	movw	r26, r30
 230:	a8 0f       	add	r26, r24
 232:	b1 1d       	adc	r27, r1
 234:	5d 96       	adiw	r26, 0x1d	; 29
 236:	8c 91       	ld	r24, X
 238:	92 8d       	ldd	r25, Z+26	; 0x1a
 23a:	9f 5f       	subi	r25, 0xFF	; 255
 23c:	9f 73       	andi	r25, 0x3F	; 63
 23e:	92 8f       	std	Z+26, r25	; 0x1a
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	08 95       	ret
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	9f ef       	ldi	r25, 0xFF	; 255
 248:	08 95       	ret

0000024a <_Z14serialEventRunv>:
 24a:	89 e8       	ldi	r24, 0x89	; 137
 24c:	92 e0       	ldi	r25, 0x02	; 2
 24e:	89 2b       	or	r24, r25
 250:	49 f0       	breq	.+18     	; 0x264 <_Z14serialEventRunv+0x1a>
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	89 2b       	or	r24, r25
 258:	29 f0       	breq	.+10     	; 0x264 <_Z14serialEventRunv+0x1a>
 25a:	0e 94 89 02 	call	0x512	; 0x512 <_Z17Serial0_availablev>
 25e:	81 11       	cpse	r24, r1
 260:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 264:	08 95       	ret

00000266 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
 266:	fc 01       	movw	r30, r24
 268:	84 8d       	ldd	r24, Z+28	; 0x1c
 26a:	df 01       	movw	r26, r30
 26c:	a8 0f       	add	r26, r24
 26e:	b1 1d       	adc	r27, r1
 270:	a3 5a       	subi	r26, 0xA3	; 163
 272:	bf 4f       	sbci	r27, 0xFF	; 255
 274:	2c 91       	ld	r18, X
 276:	84 8d       	ldd	r24, Z+28	; 0x1c
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	8f 73       	andi	r24, 0x3F	; 63
 27e:	99 27       	eor	r25, r25
 280:	84 8f       	std	Z+28, r24	; 0x1c
 282:	a6 89       	ldd	r26, Z+22	; 0x16
 284:	b7 89       	ldd	r27, Z+23	; 0x17
 286:	2c 93       	st	X, r18
 288:	a0 89       	ldd	r26, Z+16	; 0x10
 28a:	b1 89       	ldd	r27, Z+17	; 0x11
 28c:	8c 91       	ld	r24, X
 28e:	80 64       	ori	r24, 0x40	; 64
 290:	8c 93       	st	X, r24
 292:	93 8d       	ldd	r25, Z+27	; 0x1b
 294:	84 8d       	ldd	r24, Z+28	; 0x1c
 296:	98 13       	cpse	r25, r24
 298:	06 c0       	rjmp	.+12     	; 0x2a6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
 29a:	02 88       	ldd	r0, Z+18	; 0x12
 29c:	f3 89       	ldd	r31, Z+19	; 0x13
 29e:	e0 2d       	mov	r30, r0
 2a0:	80 81       	ld	r24, Z
 2a2:	8f 7d       	andi	r24, 0xDF	; 223
 2a4:	80 83       	st	Z, r24
 2a6:	08 95       	ret

000002a8 <_ZN14HardwareSerial5writeEh>:
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	88 8f       	std	Y+24, r24	; 0x18
 2ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
 2bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2be:	98 13       	cpse	r25, r24
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <_ZN14HardwareSerial5writeEh+0x24>
 2c2:	e8 89       	ldd	r30, Y+16	; 0x10
 2c4:	f9 89       	ldd	r31, Y+17	; 0x11
 2c6:	80 81       	ld	r24, Z
 2c8:	85 fd       	sbrc	r24, 5
 2ca:	24 c0       	rjmp	.+72     	; 0x314 <_ZN14HardwareSerial5writeEh+0x6c>
 2cc:	f6 2e       	mov	r15, r22
 2ce:	0b 8d       	ldd	r16, Y+27	; 0x1b
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	0f 5f       	subi	r16, 0xFF	; 255
 2d4:	1f 4f       	sbci	r17, 0xFF	; 255
 2d6:	0f 73       	andi	r16, 0x3F	; 63
 2d8:	11 27       	eor	r17, r17
 2da:	e0 2e       	mov	r14, r16
 2dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2de:	e8 12       	cpse	r14, r24
 2e0:	0c c0       	rjmp	.+24     	; 0x2fa <_ZN14HardwareSerial5writeEh+0x52>
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	07 fc       	sbrc	r0, 7
 2e6:	fa cf       	rjmp	.-12     	; 0x2dc <_ZN14HardwareSerial5writeEh+0x34>
 2e8:	e8 89       	ldd	r30, Y+16	; 0x10
 2ea:	f9 89       	ldd	r31, Y+17	; 0x11
 2ec:	80 81       	ld	r24, Z
 2ee:	85 ff       	sbrs	r24, 5
 2f0:	f5 cf       	rjmp	.-22     	; 0x2dc <_ZN14HardwareSerial5writeEh+0x34>
 2f2:	ce 01       	movw	r24, r28
 2f4:	0e 94 33 01 	call	0x266	; 0x266 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2f8:	f1 cf       	rjmp	.-30     	; 0x2dc <_ZN14HardwareSerial5writeEh+0x34>
 2fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2fc:	fe 01       	movw	r30, r28
 2fe:	e8 0f       	add	r30, r24
 300:	f1 1d       	adc	r31, r1
 302:	e3 5a       	subi	r30, 0xA3	; 163
 304:	ff 4f       	sbci	r31, 0xFF	; 255
 306:	f0 82       	st	Z, r15
 308:	0b 8f       	std	Y+27, r16	; 0x1b
 30a:	ea 89       	ldd	r30, Y+18	; 0x12
 30c:	fb 89       	ldd	r31, Y+19	; 0x13
 30e:	80 81       	ld	r24, Z
 310:	80 62       	ori	r24, 0x20	; 32
 312:	07 c0       	rjmp	.+14     	; 0x322 <_ZN14HardwareSerial5writeEh+0x7a>
 314:	ee 89       	ldd	r30, Y+22	; 0x16
 316:	ff 89       	ldd	r31, Y+23	; 0x17
 318:	60 83       	st	Z, r22
 31a:	e8 89       	ldd	r30, Y+16	; 0x10
 31c:	f9 89       	ldd	r31, Y+17	; 0x11
 31e:	80 81       	ld	r24, Z
 320:	80 64       	ori	r24, 0x40	; 64
 322:	80 83       	st	Z, r24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	08 95       	ret

00000336 <_ZN14HardwareSerial5flushEv>:
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	ec 01       	movw	r28, r24
 33c:	88 8d       	ldd	r24, Y+24	; 0x18
 33e:	88 23       	and	r24, r24
 340:	c9 f0       	breq	.+50     	; 0x374 <_ZN14HardwareSerial5flushEv+0x3e>
 342:	ea 89       	ldd	r30, Y+18	; 0x12
 344:	fb 89       	ldd	r31, Y+19	; 0x13
 346:	80 81       	ld	r24, Z
 348:	85 fd       	sbrc	r24, 5
 34a:	05 c0       	rjmp	.+10     	; 0x356 <_ZN14HardwareSerial5flushEv+0x20>
 34c:	a8 89       	ldd	r26, Y+16	; 0x10
 34e:	b9 89       	ldd	r27, Y+17	; 0x11
 350:	8c 91       	ld	r24, X
 352:	86 fd       	sbrc	r24, 6
 354:	0f c0       	rjmp	.+30     	; 0x374 <_ZN14HardwareSerial5flushEv+0x3e>
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	07 fc       	sbrc	r0, 7
 35a:	f5 cf       	rjmp	.-22     	; 0x346 <_ZN14HardwareSerial5flushEv+0x10>
 35c:	80 81       	ld	r24, Z
 35e:	85 ff       	sbrs	r24, 5
 360:	f2 cf       	rjmp	.-28     	; 0x346 <_ZN14HardwareSerial5flushEv+0x10>
 362:	a8 89       	ldd	r26, Y+16	; 0x10
 364:	b9 89       	ldd	r27, Y+17	; 0x11
 366:	8c 91       	ld	r24, X
 368:	85 ff       	sbrs	r24, 5
 36a:	ed cf       	rjmp	.-38     	; 0x346 <_ZN14HardwareSerial5flushEv+0x10>
 36c:	ce 01       	movw	r24, r28
 36e:	0e 94 33 01 	call	0x266	; 0x266 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 372:	e7 cf       	rjmp	.-50     	; 0x342 <_ZN14HardwareSerial5flushEv+0xc>
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <_ZN14HardwareSerial5beginEmh>:
 37a:	cf 92       	push	r12
 37c:	df 92       	push	r13
 37e:	ef 92       	push	r14
 380:	ff 92       	push	r15
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	ec 01       	movw	r28, r24
 38a:	6a 01       	movw	r12, r20
 38c:	7b 01       	movw	r14, r22
 38e:	12 2f       	mov	r17, r18
 390:	e8 89       	ldd	r30, Y+16	; 0x10
 392:	f9 89       	ldd	r31, Y+17	; 0x11
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	80 83       	st	Z, r24
 398:	41 15       	cp	r20, r1
 39a:	51 4e       	sbci	r21, 0xE1	; 225
 39c:	61 05       	cpc	r22, r1
 39e:	71 05       	cpc	r23, r1
 3a0:	b1 f0       	breq	.+44     	; 0x3ce <_ZN14HardwareSerial5beginEmh+0x54>
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	79 e0       	ldi	r23, 0x09	; 9
 3a6:	8d e3       	ldi	r24, 0x3D	; 61
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	a7 01       	movw	r20, r14
 3ac:	96 01       	movw	r18, r12
 3ae:	0e 94 67 04 	call	0x8ce	; 0x8ce <__udivmodsi4>
 3b2:	da 01       	movw	r26, r20
 3b4:	c9 01       	movw	r24, r18
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	a1 09       	sbc	r26, r1
 3ba:	b1 09       	sbc	r27, r1
 3bc:	b6 95       	lsr	r27
 3be:	a7 95       	ror	r26
 3c0:	97 95       	ror	r25
 3c2:	87 95       	ror	r24
 3c4:	9c 01       	movw	r18, r24
 3c6:	21 15       	cp	r18, r1
 3c8:	80 e1       	ldi	r24, 0x10	; 16
 3ca:	38 07       	cpc	r19, r24
 3cc:	a8 f0       	brcs	.+42     	; 0x3f8 <_ZN14HardwareSerial5beginEmh+0x7e>
 3ce:	e8 89       	ldd	r30, Y+16	; 0x10
 3d0:	f9 89       	ldd	r31, Y+17	; 0x11
 3d2:	10 82       	st	Z, r1
 3d4:	60 e8       	ldi	r22, 0x80	; 128
 3d6:	74 e8       	ldi	r23, 0x84	; 132
 3d8:	8e e1       	ldi	r24, 0x1E	; 30
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	a7 01       	movw	r20, r14
 3de:	96 01       	movw	r18, r12
 3e0:	0e 94 67 04 	call	0x8ce	; 0x8ce <__udivmodsi4>
 3e4:	da 01       	movw	r26, r20
 3e6:	c9 01       	movw	r24, r18
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	a1 09       	sbc	r26, r1
 3ec:	b1 09       	sbc	r27, r1
 3ee:	b6 95       	lsr	r27
 3f0:	a7 95       	ror	r26
 3f2:	97 95       	ror	r25
 3f4:	87 95       	ror	r24
 3f6:	9c 01       	movw	r18, r24
 3f8:	ec 85       	ldd	r30, Y+12	; 0x0c
 3fa:	fd 85       	ldd	r31, Y+13	; 0x0d
 3fc:	30 83       	st	Z, r19
 3fe:	ee 85       	ldd	r30, Y+14	; 0x0e
 400:	ff 85       	ldd	r31, Y+15	; 0x0f
 402:	20 83       	st	Z, r18
 404:	18 8e       	std	Y+24, r1	; 0x18
 406:	ec 89       	ldd	r30, Y+20	; 0x14
 408:	fd 89       	ldd	r31, Y+21	; 0x15
 40a:	10 83       	st	Z, r17
 40c:	ea 89       	ldd	r30, Y+18	; 0x12
 40e:	fb 89       	ldd	r31, Y+19	; 0x13
 410:	80 81       	ld	r24, Z
 412:	80 61       	ori	r24, 0x10	; 16
 414:	80 83       	st	Z, r24
 416:	ea 89       	ldd	r30, Y+18	; 0x12
 418:	fb 89       	ldd	r31, Y+19	; 0x13
 41a:	80 81       	ld	r24, Z
 41c:	88 60       	ori	r24, 0x08	; 8
 41e:	80 83       	st	Z, r24
 420:	ea 89       	ldd	r30, Y+18	; 0x12
 422:	fb 89       	ldd	r31, Y+19	; 0x13
 424:	80 81       	ld	r24, Z
 426:	80 68       	ori	r24, 0x80	; 128
 428:	80 83       	st	Z, r24
 42a:	ea 89       	ldd	r30, Y+18	; 0x12
 42c:	fb 89       	ldd	r31, Y+19	; 0x13
 42e:	80 81       	ld	r24, Z
 430:	8f 7d       	andi	r24, 0xDF	; 223
 432:	80 83       	st	Z, r24
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	df 90       	pop	r13
 440:	cf 90       	pop	r12
 442:	08 95       	ret

00000444 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 444:	fc 01       	movw	r30, r24
 446:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 448:	44 8d       	ldd	r20, Z+28	; 0x1c
 44a:	25 2f       	mov	r18, r21
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	84 2f       	mov	r24, r20
 450:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 452:	82 1b       	sub	r24, r18
 454:	93 0b       	sbc	r25, r19
 456:	54 17       	cp	r21, r20
 458:	10 f0       	brcs	.+4      	; 0x45e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 45a:	cf 96       	adiw	r24, 0x3f	; 63
 45c:	08 95       	ret
  return tail - head - 1;
 45e:	01 97       	sbiw	r24, 0x01	; 1
}
 460:	08 95       	ret

00000462 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	2f 93       	push	r18
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 476:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <Serial+0x10>
 47a:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <Serial+0x11>
 47e:	80 81       	ld	r24, Z
 480:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <Serial+0x16>
 484:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <Serial+0x17>
 488:	82 fd       	sbrc	r24, 2
 48a:	12 c0       	rjmp	.+36     	; 0x4b0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 48c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 48e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <Serial+0x19>
 492:	8f 5f       	subi	r24, 0xFF	; 255
 494:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 496:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <Serial+0x1a>
 49a:	82 17       	cp	r24, r18
 49c:	51 f0       	breq	.+20     	; 0x4b2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 49e:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <Serial+0x19>
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	e6 5e       	subi	r30, 0xE6	; 230
 4a6:	fd 4f       	sbci	r31, 0xFD	; 253
 4a8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 4aa:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <Serial+0x19>
 4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 4b0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	2f 93       	push	r18
 4d2:	3f 93       	push	r19
 4d4:	4f 93       	push	r20
 4d6:	5f 93       	push	r21
 4d8:	6f 93       	push	r22
 4da:	7f 93       	push	r23
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
 4e0:	af 93       	push	r26
 4e2:	bf 93       	push	r27
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 4e8:	8a e1       	ldi	r24, 0x1A	; 26
 4ea:	92 e0       	ldi	r25, 0x02	; 2
 4ec:	0e 94 33 01 	call	0x266	; 0x266 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 4f0:	ff 91       	pop	r31
 4f2:	ef 91       	pop	r30
 4f4:	bf 91       	pop	r27
 4f6:	af 91       	pop	r26
 4f8:	9f 91       	pop	r25
 4fa:	8f 91       	pop	r24
 4fc:	7f 91       	pop	r23
 4fe:	6f 91       	pop	r22
 500:	5f 91       	pop	r21
 502:	4f 91       	pop	r20
 504:	3f 91       	pop	r19
 506:	2f 91       	pop	r18
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

00000512 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 512:	8a e1       	ldi	r24, 0x1A	; 26
 514:	92 e0       	ldi	r25, 0x02	; 2
 516:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN14HardwareSerial9availableEv>
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	89 2b       	or	r24, r25
 51e:	09 f4       	brne	.+2      	; 0x522 <_Z17Serial0_availablev+0x10>
 520:	20 e0       	ldi	r18, 0x00	; 0
}
 522:	82 2f       	mov	r24, r18
 524:	08 95       	ret

00000526 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 526:	ea e1       	ldi	r30, 0x1A	; 26
 528:	f2 e0       	ldi	r31, 0x02	; 2
 52a:	13 82       	std	Z+3, r1	; 0x03
 52c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 52e:	88 ee       	ldi	r24, 0xE8	; 232
 530:	93 e0       	ldi	r25, 0x03	; 3
 532:	a0 e0       	ldi	r26, 0x00	; 0
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	84 83       	std	Z+4, r24	; 0x04
 538:	95 83       	std	Z+5, r25	; 0x05
 53a:	a6 83       	std	Z+6, r26	; 0x06
 53c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 53e:	8b e2       	ldi	r24, 0x2B	; 43
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	91 83       	std	Z+1, r25	; 0x01
 544:	80 83       	st	Z, r24
 546:	85 ec       	ldi	r24, 0xC5	; 197
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	95 87       	std	Z+13, r25	; 0x0d
 54c:	84 87       	std	Z+12, r24	; 0x0c
 54e:	84 ec       	ldi	r24, 0xC4	; 196
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	97 87       	std	Z+15, r25	; 0x0f
 554:	86 87       	std	Z+14, r24	; 0x0e
 556:	80 ec       	ldi	r24, 0xC0	; 192
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	91 8b       	std	Z+17, r25	; 0x11
 55c:	80 8b       	std	Z+16, r24	; 0x10
 55e:	81 ec       	ldi	r24, 0xC1	; 193
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	93 8b       	std	Z+19, r25	; 0x13
 564:	82 8b       	std	Z+18, r24	; 0x12
 566:	82 ec       	ldi	r24, 0xC2	; 194
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	95 8b       	std	Z+21, r25	; 0x15
 56c:	84 8b       	std	Z+20, r24	; 0x14
 56e:	86 ec       	ldi	r24, 0xC6	; 198
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	97 8b       	std	Z+23, r25	; 0x17
 574:	86 8b       	std	Z+22, r24	; 0x16
 576:	11 8e       	std	Z+25, r1	; 0x19
 578:	12 8e       	std	Z+26, r1	; 0x1a
 57a:	13 8e       	std	Z+27, r1	; 0x1b
 57c:	14 8e       	std	Z+28, r1	; 0x1c
 57e:	08 95       	ret

00000580 <initVariant>:
 580:	08 95       	ret

00000582 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 582:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <init>

	initVariant();
 586:	0e 94 c0 02 	call	0x580	; 0x580 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 58a:	0e 94 7d 00 	call	0xfa	; 0xfa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 58e:	c5 e2       	ldi	r28, 0x25	; 37
 590:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 592:	0e 94 a8 00 	call	0x150	; 0x150 <loop>
		if (serialEventRun) serialEventRun();
 596:	20 97       	sbiw	r28, 0x00	; 0
 598:	e1 f3       	breq	.-8      	; 0x592 <main+0x10>
 59a:	0e 94 25 01 	call	0x24a	; 0x24a <_Z14serialEventRunv>
 59e:	f9 cf       	rjmp	.-14     	; 0x592 <main+0x10>

000005a0 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 5a0:	cf 92       	push	r12
 5a2:	df 92       	push	r13
 5a4:	ef 92       	push	r14
 5a6:	ff 92       	push	r15
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	6c 01       	movw	r12, r24
 5b2:	7a 01       	movw	r14, r20
 5b4:	8b 01       	movw	r16, r22
 5b6:	c0 e0       	ldi	r28, 0x00	; 0
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
 5ba:	ce 15       	cp	r28, r14
 5bc:	df 05       	cpc	r29, r15
 5be:	81 f0       	breq	.+32     	; 0x5e0 <_ZN5Print5writeEPKhj+0x40>
 5c0:	d8 01       	movw	r26, r16
 5c2:	6d 91       	ld	r22, X+
 5c4:	8d 01       	movw	r16, r26
 5c6:	d6 01       	movw	r26, r12
 5c8:	ed 91       	ld	r30, X+
 5ca:	fc 91       	ld	r31, X
 5cc:	01 90       	ld	r0, Z+
 5ce:	f0 81       	ld	r31, Z
 5d0:	e0 2d       	mov	r30, r0
 5d2:	c6 01       	movw	r24, r12
 5d4:	09 95       	icall
 5d6:	89 2b       	or	r24, r25
 5d8:	11 f0       	breq	.+4      	; 0x5de <_ZN5Print5writeEPKhj+0x3e>
 5da:	21 96       	adiw	r28, 0x01	; 1
 5dc:	ee cf       	rjmp	.-36     	; 0x5ba <_ZN5Print5writeEPKhj+0x1a>
 5de:	7e 01       	movw	r14, r28
 5e0:	c7 01       	movw	r24, r14
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	ff 90       	pop	r15
 5ec:	ef 90       	pop	r14
 5ee:	df 90       	pop	r13
 5f0:	cf 90       	pop	r12
 5f2:	08 95       	ret

000005f4 <_ZN5Print5writeEPKc>:
 5f4:	61 15       	cp	r22, r1
 5f6:	71 05       	cpc	r23, r1
 5f8:	79 f0       	breq	.+30     	; 0x618 <_ZN5Print5writeEPKc+0x24>
 5fa:	fb 01       	movw	r30, r22
 5fc:	01 90       	ld	r0, Z+
 5fe:	00 20       	and	r0, r0
 600:	e9 f7       	brne	.-6      	; 0x5fc <_ZN5Print5writeEPKc+0x8>
 602:	31 97       	sbiw	r30, 0x01	; 1
 604:	af 01       	movw	r20, r30
 606:	46 1b       	sub	r20, r22
 608:	57 0b       	sbc	r21, r23
 60a:	dc 01       	movw	r26, r24
 60c:	ed 91       	ld	r30, X+
 60e:	fc 91       	ld	r31, X
 610:	02 80       	ldd	r0, Z+2	; 0x02
 612:	f3 81       	ldd	r31, Z+3	; 0x03
 614:	e0 2d       	mov	r30, r0
 616:	09 94       	ijmp
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	08 95       	ret

0000061e <_ZN5Print5printEPKc>:
 61e:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <_ZN5Print5writeEPKc>

00000622 <_ZN5Print7printlnEv>:
 622:	67 e3       	ldi	r22, 0x37	; 55
 624:	71 e0       	ldi	r23, 0x01	; 1
 626:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <_ZN5Print5writeEPKc>

0000062a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 62a:	0f 93       	push	r16
 62c:	1f 93       	push	r17
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 634:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN5Print5writeEPKc>
 638:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 63a:	ce 01       	movw	r24, r28
 63c:	0e 94 11 03 	call	0x622	; 0x622 <_ZN5Print7printlnEv>
  return n;
}
 640:	80 0f       	add	r24, r16
 642:	91 1f       	adc	r25, r17
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	08 95       	ret

0000064e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 64e:	1f 92       	push	r1
 650:	0f 92       	push	r0
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	0f 92       	push	r0
 656:	11 24       	eor	r1, r1
 658:	2f 93       	push	r18
 65a:	3f 93       	push	r19
 65c:	8f 93       	push	r24
 65e:	9f 93       	push	r25
 660:	af 93       	push	r26
 662:	bf 93       	push	r27
 664:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <timer0_millis>
 668:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <timer0_millis+0x1>
 66c:	a0 91 ba 02 	lds	r26, 0x02BA	; 0x8002ba <timer0_millis+0x2>
 670:	b0 91 bb 02 	lds	r27, 0x02BB	; 0x8002bb <timer0_millis+0x3>
 674:	30 91 b7 02 	lds	r19, 0x02B7	; 0x8002b7 <timer0_fract>
 678:	23 e0       	ldi	r18, 0x03	; 3
 67a:	23 0f       	add	r18, r19
 67c:	2d 37       	cpi	r18, 0x7D	; 125
 67e:	20 f4       	brcc	.+8      	; 0x688 <__vector_16+0x3a>
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	a1 1d       	adc	r26, r1
 684:	b1 1d       	adc	r27, r1
 686:	05 c0       	rjmp	.+10     	; 0x692 <__vector_16+0x44>
 688:	26 e8       	ldi	r18, 0x86	; 134
 68a:	23 0f       	add	r18, r19
 68c:	02 96       	adiw	r24, 0x02	; 2
 68e:	a1 1d       	adc	r26, r1
 690:	b1 1d       	adc	r27, r1
 692:	20 93 b7 02 	sts	0x02B7, r18	; 0x8002b7 <timer0_fract>
 696:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <timer0_millis>
 69a:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <timer0_millis+0x1>
 69e:	a0 93 ba 02 	sts	0x02BA, r26	; 0x8002ba <timer0_millis+0x2>
 6a2:	b0 93 bb 02 	sts	0x02BB, r27	; 0x8002bb <timer0_millis+0x3>
 6a6:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <timer0_overflow_count>
 6aa:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <timer0_overflow_count+0x1>
 6ae:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <timer0_overflow_count+0x2>
 6b2:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <timer0_overflow_count+0x3>
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	a1 1d       	adc	r26, r1
 6ba:	b1 1d       	adc	r27, r1
 6bc:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <timer0_overflow_count>
 6c0:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <timer0_overflow_count+0x1>
 6c4:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <timer0_overflow_count+0x2>
 6c8:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <timer0_overflow_count+0x3>
 6cc:	bf 91       	pop	r27
 6ce:	af 91       	pop	r26
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	3f 91       	pop	r19
 6d6:	2f 91       	pop	r18
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <micros>:
 6e2:	3f b7       	in	r19, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <timer0_overflow_count>
 6ea:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <timer0_overflow_count+0x1>
 6ee:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <timer0_overflow_count+0x2>
 6f2:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <timer0_overflow_count+0x3>
 6f6:	26 b5       	in	r18, 0x26	; 38
 6f8:	a8 9b       	sbis	0x15, 0	; 21
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <micros+0x24>
 6fc:	2f 3f       	cpi	r18, 0xFF	; 255
 6fe:	19 f0       	breq	.+6      	; 0x706 <micros+0x24>
 700:	01 96       	adiw	r24, 0x01	; 1
 702:	a1 1d       	adc	r26, r1
 704:	b1 1d       	adc	r27, r1
 706:	3f bf       	out	0x3f, r19	; 63
 708:	ba 2f       	mov	r27, r26
 70a:	a9 2f       	mov	r26, r25
 70c:	98 2f       	mov	r25, r24
 70e:	88 27       	eor	r24, r24
 710:	82 0f       	add	r24, r18
 712:	91 1d       	adc	r25, r1
 714:	a1 1d       	adc	r26, r1
 716:	b1 1d       	adc	r27, r1
 718:	bc 01       	movw	r22, r24
 71a:	cd 01       	movw	r24, r26
 71c:	42 e0       	ldi	r20, 0x02	; 2
 71e:	66 0f       	add	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	88 1f       	adc	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	4a 95       	dec	r20
 728:	d1 f7       	brne	.-12     	; 0x71e <micros+0x3c>
 72a:	08 95       	ret

0000072c <delay>:
 72c:	8f 92       	push	r8
 72e:	9f 92       	push	r9
 730:	af 92       	push	r10
 732:	bf 92       	push	r11
 734:	cf 92       	push	r12
 736:	df 92       	push	r13
 738:	ef 92       	push	r14
 73a:	ff 92       	push	r15
 73c:	6b 01       	movw	r12, r22
 73e:	7c 01       	movw	r14, r24
 740:	0e 94 71 03 	call	0x6e2	; 0x6e2 <micros>
 744:	4b 01       	movw	r8, r22
 746:	5c 01       	movw	r10, r24
 748:	c1 14       	cp	r12, r1
 74a:	d1 04       	cpc	r13, r1
 74c:	e1 04       	cpc	r14, r1
 74e:	f1 04       	cpc	r15, r1
 750:	01 f1       	breq	.+64     	; 0x792 <delay+0x66>
 752:	0e 94 66 04 	call	0x8cc	; 0x8cc <yield>
 756:	0e 94 71 03 	call	0x6e2	; 0x6e2 <micros>
 75a:	dc 01       	movw	r26, r24
 75c:	cb 01       	movw	r24, r22
 75e:	88 19       	sub	r24, r8
 760:	99 09       	sbc	r25, r9
 762:	aa 09       	sbc	r26, r10
 764:	bb 09       	sbc	r27, r11
 766:	88 3e       	cpi	r24, 0xE8	; 232
 768:	93 40       	sbci	r25, 0x03	; 3
 76a:	a1 05       	cpc	r26, r1
 76c:	b1 05       	cpc	r27, r1
 76e:	60 f3       	brcs	.-40     	; 0x748 <delay+0x1c>
 770:	21 e0       	ldi	r18, 0x01	; 1
 772:	c2 1a       	sub	r12, r18
 774:	d1 08       	sbc	r13, r1
 776:	e1 08       	sbc	r14, r1
 778:	f1 08       	sbc	r15, r1
 77a:	88 ee       	ldi	r24, 0xE8	; 232
 77c:	88 0e       	add	r8, r24
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	98 1e       	adc	r9, r24
 782:	a1 1c       	adc	r10, r1
 784:	b1 1c       	adc	r11, r1
 786:	c1 14       	cp	r12, r1
 788:	d1 04       	cpc	r13, r1
 78a:	e1 04       	cpc	r14, r1
 78c:	f1 04       	cpc	r15, r1
 78e:	19 f7       	brne	.-58     	; 0x756 <delay+0x2a>
 790:	db cf       	rjmp	.-74     	; 0x748 <delay+0x1c>
 792:	ff 90       	pop	r15
 794:	ef 90       	pop	r14
 796:	df 90       	pop	r13
 798:	cf 90       	pop	r12
 79a:	bf 90       	pop	r11
 79c:	af 90       	pop	r10
 79e:	9f 90       	pop	r9
 7a0:	8f 90       	pop	r8
 7a2:	08 95       	ret

000007a4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 7a4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 7a6:	84 b5       	in	r24, 0x24	; 36
 7a8:	82 60       	ori	r24, 0x02	; 2
 7aa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 7ac:	84 b5       	in	r24, 0x24	; 36
 7ae:	81 60       	ori	r24, 0x01	; 1
 7b0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 7b2:	85 b5       	in	r24, 0x25	; 37
 7b4:	82 60       	ori	r24, 0x02	; 2
 7b6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 7b8:	85 b5       	in	r24, 0x25	; 37
 7ba:	81 60       	ori	r24, 0x01	; 1
 7bc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 7be:	ee e6       	ldi	r30, 0x6E	; 110
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	80 81       	ld	r24, Z
 7c4:	81 60       	ori	r24, 0x01	; 1
 7c6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 7c8:	e1 e8       	ldi	r30, 0x81	; 129
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 7ce:	80 81       	ld	r24, Z
 7d0:	82 60       	ori	r24, 0x02	; 2
 7d2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 7d4:	80 81       	ld	r24, Z
 7d6:	81 60       	ori	r24, 0x01	; 1
 7d8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 7da:	e0 e8       	ldi	r30, 0x80	; 128
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	81 60       	ori	r24, 0x01	; 1
 7e2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 7e4:	e1 eb       	ldi	r30, 0xB1	; 177
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	84 60       	ori	r24, 0x04	; 4
 7ec:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 7ee:	e0 eb       	ldi	r30, 0xB0	; 176
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	81 60       	ori	r24, 0x01	; 1
 7f6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 7f8:	ea e7       	ldi	r30, 0x7A	; 122
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	80 81       	ld	r24, Z
 7fe:	84 60       	ori	r24, 0x04	; 4
 800:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 802:	80 81       	ld	r24, Z
 804:	82 60       	ori	r24, 0x02	; 2
 806:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 808:	80 81       	ld	r24, Z
 80a:	81 60       	ori	r24, 0x01	; 1
 80c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 80e:	80 81       	ld	r24, Z
 810:	80 68       	ori	r24, 0x80	; 128
 812:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 814:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 818:	08 95       	ret

0000081a <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 81a:	8e 30       	cpi	r24, 0x0E	; 14
 81c:	08 f0       	brcs	.+2      	; 0x820 <analogRead+0x6>
 81e:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 820:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 824:	90 e4       	ldi	r25, 0x40	; 64
 826:	29 9f       	mul	r18, r25
 828:	90 01       	movw	r18, r0
 82a:	11 24       	eor	r1, r1
 82c:	87 70       	andi	r24, 0x07	; 7
 82e:	82 2b       	or	r24, r18
 830:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 834:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 838:	80 64       	ori	r24, 0x40	; 64
 83a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 83e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 842:	86 fd       	sbrc	r24, 6
 844:	fc cf       	rjmp	.-8      	; 0x83e <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 846:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
 84a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 84e:	90 e0       	ldi	r25, 0x00	; 0
}
 850:	92 2b       	or	r25, r18
 852:	08 95       	ret

00000854 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 854:	cf 93       	push	r28
 856:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	fc 01       	movw	r30, r24
 85c:	e8 59       	subi	r30, 0x98	; 152
 85e:	ff 4f       	sbci	r31, 0xFF	; 255
 860:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 862:	fc 01       	movw	r30, r24
 864:	e4 58       	subi	r30, 0x84	; 132
 866:	ff 4f       	sbci	r31, 0xFF	; 255
 868:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 86a:	88 23       	and	r24, r24
 86c:	61 f1       	breq	.+88     	; 0x8c6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	fc 01       	movw	r30, r24
 876:	e6 56       	subi	r30, 0x66	; 102
 878:	ff 4f       	sbci	r31, 0xFF	; 255
 87a:	c5 91       	lpm	r28, Z+
 87c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 87e:	fc 01       	movw	r30, r24
 880:	e0 57       	subi	r30, 0x70	; 112
 882:	ff 4f       	sbci	r31, 0xFF	; 255
 884:	a5 91       	lpm	r26, Z+
 886:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 888:	61 11       	cpse	r22, r1
 88a:	09 c0       	rjmp	.+18     	; 0x89e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 88c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 88e:	f8 94       	cli
		*reg &= ~bit;
 890:	88 81       	ld	r24, Y
 892:	20 95       	com	r18
 894:	82 23       	and	r24, r18
 896:	88 83       	st	Y, r24
		*out &= ~bit;
 898:	ec 91       	ld	r30, X
 89a:	2e 23       	and	r18, r30
 89c:	0b c0       	rjmp	.+22     	; 0x8b4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 89e:	62 30       	cpi	r22, 0x02	; 2
 8a0:	61 f4       	brne	.+24     	; 0x8ba <pinMode+0x66>
		uint8_t oldSREG = SREG;
 8a2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 8a4:	f8 94       	cli
		*reg &= ~bit;
 8a6:	88 81       	ld	r24, Y
 8a8:	32 2f       	mov	r19, r18
 8aa:	30 95       	com	r19
 8ac:	83 23       	and	r24, r19
 8ae:	88 83       	st	Y, r24
		*out |= bit;
 8b0:	ec 91       	ld	r30, X
 8b2:	2e 2b       	or	r18, r30
 8b4:	2c 93       	st	X, r18
		SREG = oldSREG;
 8b6:	9f bf       	out	0x3f, r25	; 63
 8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 8ba:	8f b7       	in	r24, 0x3f	; 63
                cli();
 8bc:	f8 94       	cli
		*reg |= bit;
 8be:	e8 81       	ld	r30, Y
 8c0:	2e 2b       	or	r18, r30
 8c2:	28 83       	st	Y, r18
		SREG = oldSREG;
 8c4:	8f bf       	out	0x3f, r24	; 63
	}
}
 8c6:	df 91       	pop	r29
 8c8:	cf 91       	pop	r28
 8ca:	08 95       	ret

000008cc <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 8cc:	08 95       	ret

000008ce <__udivmodsi4>:
 8ce:	a1 e2       	ldi	r26, 0x21	; 33
 8d0:	1a 2e       	mov	r1, r26
 8d2:	aa 1b       	sub	r26, r26
 8d4:	bb 1b       	sub	r27, r27
 8d6:	fd 01       	movw	r30, r26
 8d8:	0d c0       	rjmp	.+26     	; 0x8f4 <__udivmodsi4_ep>

000008da <__udivmodsi4_loop>:
 8da:	aa 1f       	adc	r26, r26
 8dc:	bb 1f       	adc	r27, r27
 8de:	ee 1f       	adc	r30, r30
 8e0:	ff 1f       	adc	r31, r31
 8e2:	a2 17       	cp	r26, r18
 8e4:	b3 07       	cpc	r27, r19
 8e6:	e4 07       	cpc	r30, r20
 8e8:	f5 07       	cpc	r31, r21
 8ea:	20 f0       	brcs	.+8      	; 0x8f4 <__udivmodsi4_ep>
 8ec:	a2 1b       	sub	r26, r18
 8ee:	b3 0b       	sbc	r27, r19
 8f0:	e4 0b       	sbc	r30, r20
 8f2:	f5 0b       	sbc	r31, r21

000008f4 <__udivmodsi4_ep>:
 8f4:	66 1f       	adc	r22, r22
 8f6:	77 1f       	adc	r23, r23
 8f8:	88 1f       	adc	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	1a 94       	dec	r1
 8fe:	69 f7       	brne	.-38     	; 0x8da <__udivmodsi4_loop>
 900:	60 95       	com	r22
 902:	70 95       	com	r23
 904:	80 95       	com	r24
 906:	90 95       	com	r25
 908:	9b 01       	movw	r18, r22
 90a:	ac 01       	movw	r20, r24
 90c:	bd 01       	movw	r22, r26
 90e:	cf 01       	movw	r24, r30
 910:	08 95       	ret

00000912 <__tablejump2__>:
 912:	ee 0f       	add	r30, r30
 914:	ff 1f       	adc	r31, r31
 916:	05 90       	lpm	r0, Z+
 918:	f4 91       	lpm	r31, Z
 91a:	e0 2d       	mov	r30, r0
 91c:	09 94       	ijmp

0000091e <sprintf>:
 91e:	ae e0       	ldi	r26, 0x0E	; 14
 920:	b0 e0       	ldi	r27, 0x00	; 0
 922:	e5 e9       	ldi	r30, 0x95	; 149
 924:	f4 e0       	ldi	r31, 0x04	; 4
 926:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__prologue_saves__+0x1c>
 92a:	0d 89       	ldd	r16, Y+21	; 0x15
 92c:	1e 89       	ldd	r17, Y+22	; 0x16
 92e:	86 e0       	ldi	r24, 0x06	; 6
 930:	8c 83       	std	Y+4, r24	; 0x04
 932:	1a 83       	std	Y+2, r17	; 0x02
 934:	09 83       	std	Y+1, r16	; 0x01
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	9f e7       	ldi	r25, 0x7F	; 127
 93a:	9e 83       	std	Y+6, r25	; 0x06
 93c:	8d 83       	std	Y+5, r24	; 0x05
 93e:	ae 01       	movw	r20, r28
 940:	47 5e       	subi	r20, 0xE7	; 231
 942:	5f 4f       	sbci	r21, 0xFF	; 255
 944:	6f 89       	ldd	r22, Y+23	; 0x17
 946:	78 8d       	ldd	r23, Y+24	; 0x18
 948:	ce 01       	movw	r24, r28
 94a:	01 96       	adiw	r24, 0x01	; 1
 94c:	0e 94 b1 04 	call	0x962	; 0x962 <vfprintf>
 950:	ef 81       	ldd	r30, Y+7	; 0x07
 952:	f8 85       	ldd	r31, Y+8	; 0x08
 954:	e0 0f       	add	r30, r16
 956:	f1 1f       	adc	r31, r17
 958:	10 82       	st	Z, r1
 95a:	2e 96       	adiw	r28, 0x0e	; 14
 95c:	e4 e0       	ldi	r30, 0x04	; 4
 95e:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__epilogue_restores__+0x1c>

00000962 <vfprintf>:
 962:	ab e0       	ldi	r26, 0x0B	; 11
 964:	b0 e0       	ldi	r27, 0x00	; 0
 966:	e7 eb       	ldi	r30, 0xB7	; 183
 968:	f4 e0       	ldi	r31, 0x04	; 4
 96a:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__prologue_saves__>
 96e:	6c 01       	movw	r12, r24
 970:	7b 01       	movw	r14, r22
 972:	8a 01       	movw	r16, r20
 974:	fc 01       	movw	r30, r24
 976:	17 82       	std	Z+7, r1	; 0x07
 978:	16 82       	std	Z+6, r1	; 0x06
 97a:	83 81       	ldd	r24, Z+3	; 0x03
 97c:	81 ff       	sbrs	r24, 1
 97e:	cc c1       	rjmp	.+920    	; 0xd18 <vfprintf+0x3b6>
 980:	ce 01       	movw	r24, r28
 982:	01 96       	adiw	r24, 0x01	; 1
 984:	3c 01       	movw	r6, r24
 986:	f6 01       	movw	r30, r12
 988:	93 81       	ldd	r25, Z+3	; 0x03
 98a:	f7 01       	movw	r30, r14
 98c:	93 fd       	sbrc	r25, 3
 98e:	85 91       	lpm	r24, Z+
 990:	93 ff       	sbrs	r25, 3
 992:	81 91       	ld	r24, Z+
 994:	7f 01       	movw	r14, r30
 996:	88 23       	and	r24, r24
 998:	09 f4       	brne	.+2      	; 0x99c <vfprintf+0x3a>
 99a:	ba c1       	rjmp	.+884    	; 0xd10 <vfprintf+0x3ae>
 99c:	85 32       	cpi	r24, 0x25	; 37
 99e:	39 f4       	brne	.+14     	; 0x9ae <vfprintf+0x4c>
 9a0:	93 fd       	sbrc	r25, 3
 9a2:	85 91       	lpm	r24, Z+
 9a4:	93 ff       	sbrs	r25, 3
 9a6:	81 91       	ld	r24, Z+
 9a8:	7f 01       	movw	r14, r30
 9aa:	85 32       	cpi	r24, 0x25	; 37
 9ac:	29 f4       	brne	.+10     	; 0x9b8 <vfprintf+0x56>
 9ae:	b6 01       	movw	r22, r12
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 9b6:	e7 cf       	rjmp	.-50     	; 0x986 <vfprintf+0x24>
 9b8:	91 2c       	mov	r9, r1
 9ba:	21 2c       	mov	r2, r1
 9bc:	31 2c       	mov	r3, r1
 9be:	ff e1       	ldi	r31, 0x1F	; 31
 9c0:	f3 15       	cp	r31, r3
 9c2:	d8 f0       	brcs	.+54     	; 0x9fa <vfprintf+0x98>
 9c4:	8b 32       	cpi	r24, 0x2B	; 43
 9c6:	79 f0       	breq	.+30     	; 0x9e6 <vfprintf+0x84>
 9c8:	38 f4       	brcc	.+14     	; 0x9d8 <vfprintf+0x76>
 9ca:	80 32       	cpi	r24, 0x20	; 32
 9cc:	79 f0       	breq	.+30     	; 0x9ec <vfprintf+0x8a>
 9ce:	83 32       	cpi	r24, 0x23	; 35
 9d0:	a1 f4       	brne	.+40     	; 0x9fa <vfprintf+0x98>
 9d2:	23 2d       	mov	r18, r3
 9d4:	20 61       	ori	r18, 0x10	; 16
 9d6:	1d c0       	rjmp	.+58     	; 0xa12 <vfprintf+0xb0>
 9d8:	8d 32       	cpi	r24, 0x2D	; 45
 9da:	61 f0       	breq	.+24     	; 0x9f4 <vfprintf+0x92>
 9dc:	80 33       	cpi	r24, 0x30	; 48
 9de:	69 f4       	brne	.+26     	; 0x9fa <vfprintf+0x98>
 9e0:	23 2d       	mov	r18, r3
 9e2:	21 60       	ori	r18, 0x01	; 1
 9e4:	16 c0       	rjmp	.+44     	; 0xa12 <vfprintf+0xb0>
 9e6:	83 2d       	mov	r24, r3
 9e8:	82 60       	ori	r24, 0x02	; 2
 9ea:	38 2e       	mov	r3, r24
 9ec:	e3 2d       	mov	r30, r3
 9ee:	e4 60       	ori	r30, 0x04	; 4
 9f0:	3e 2e       	mov	r3, r30
 9f2:	2a c0       	rjmp	.+84     	; 0xa48 <vfprintf+0xe6>
 9f4:	f3 2d       	mov	r31, r3
 9f6:	f8 60       	ori	r31, 0x08	; 8
 9f8:	1d c0       	rjmp	.+58     	; 0xa34 <vfprintf+0xd2>
 9fa:	37 fc       	sbrc	r3, 7
 9fc:	2d c0       	rjmp	.+90     	; 0xa58 <vfprintf+0xf6>
 9fe:	20 ed       	ldi	r18, 0xD0	; 208
 a00:	28 0f       	add	r18, r24
 a02:	2a 30       	cpi	r18, 0x0A	; 10
 a04:	40 f0       	brcs	.+16     	; 0xa16 <vfprintf+0xb4>
 a06:	8e 32       	cpi	r24, 0x2E	; 46
 a08:	b9 f4       	brne	.+46     	; 0xa38 <vfprintf+0xd6>
 a0a:	36 fc       	sbrc	r3, 6
 a0c:	81 c1       	rjmp	.+770    	; 0xd10 <vfprintf+0x3ae>
 a0e:	23 2d       	mov	r18, r3
 a10:	20 64       	ori	r18, 0x40	; 64
 a12:	32 2e       	mov	r3, r18
 a14:	19 c0       	rjmp	.+50     	; 0xa48 <vfprintf+0xe6>
 a16:	36 fe       	sbrs	r3, 6
 a18:	06 c0       	rjmp	.+12     	; 0xa26 <vfprintf+0xc4>
 a1a:	8a e0       	ldi	r24, 0x0A	; 10
 a1c:	98 9e       	mul	r9, r24
 a1e:	20 0d       	add	r18, r0
 a20:	11 24       	eor	r1, r1
 a22:	92 2e       	mov	r9, r18
 a24:	11 c0       	rjmp	.+34     	; 0xa48 <vfprintf+0xe6>
 a26:	ea e0       	ldi	r30, 0x0A	; 10
 a28:	2e 9e       	mul	r2, r30
 a2a:	20 0d       	add	r18, r0
 a2c:	11 24       	eor	r1, r1
 a2e:	22 2e       	mov	r2, r18
 a30:	f3 2d       	mov	r31, r3
 a32:	f0 62       	ori	r31, 0x20	; 32
 a34:	3f 2e       	mov	r3, r31
 a36:	08 c0       	rjmp	.+16     	; 0xa48 <vfprintf+0xe6>
 a38:	8c 36       	cpi	r24, 0x6C	; 108
 a3a:	21 f4       	brne	.+8      	; 0xa44 <vfprintf+0xe2>
 a3c:	83 2d       	mov	r24, r3
 a3e:	80 68       	ori	r24, 0x80	; 128
 a40:	38 2e       	mov	r3, r24
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <vfprintf+0xe6>
 a44:	88 36       	cpi	r24, 0x68	; 104
 a46:	41 f4       	brne	.+16     	; 0xa58 <vfprintf+0xf6>
 a48:	f7 01       	movw	r30, r14
 a4a:	93 fd       	sbrc	r25, 3
 a4c:	85 91       	lpm	r24, Z+
 a4e:	93 ff       	sbrs	r25, 3
 a50:	81 91       	ld	r24, Z+
 a52:	7f 01       	movw	r14, r30
 a54:	81 11       	cpse	r24, r1
 a56:	b3 cf       	rjmp	.-154    	; 0x9be <vfprintf+0x5c>
 a58:	98 2f       	mov	r25, r24
 a5a:	9f 7d       	andi	r25, 0xDF	; 223
 a5c:	95 54       	subi	r25, 0x45	; 69
 a5e:	93 30       	cpi	r25, 0x03	; 3
 a60:	28 f4       	brcc	.+10     	; 0xa6c <vfprintf+0x10a>
 a62:	0c 5f       	subi	r16, 0xFC	; 252
 a64:	1f 4f       	sbci	r17, 0xFF	; 255
 a66:	9f e3       	ldi	r25, 0x3F	; 63
 a68:	99 83       	std	Y+1, r25	; 0x01
 a6a:	0d c0       	rjmp	.+26     	; 0xa86 <vfprintf+0x124>
 a6c:	83 36       	cpi	r24, 0x63	; 99
 a6e:	31 f0       	breq	.+12     	; 0xa7c <vfprintf+0x11a>
 a70:	83 37       	cpi	r24, 0x73	; 115
 a72:	71 f0       	breq	.+28     	; 0xa90 <vfprintf+0x12e>
 a74:	83 35       	cpi	r24, 0x53	; 83
 a76:	09 f0       	breq	.+2      	; 0xa7a <vfprintf+0x118>
 a78:	59 c0       	rjmp	.+178    	; 0xb2c <vfprintf+0x1ca>
 a7a:	21 c0       	rjmp	.+66     	; 0xabe <vfprintf+0x15c>
 a7c:	f8 01       	movw	r30, r16
 a7e:	80 81       	ld	r24, Z
 a80:	89 83       	std	Y+1, r24	; 0x01
 a82:	0e 5f       	subi	r16, 0xFE	; 254
 a84:	1f 4f       	sbci	r17, 0xFF	; 255
 a86:	88 24       	eor	r8, r8
 a88:	83 94       	inc	r8
 a8a:	91 2c       	mov	r9, r1
 a8c:	53 01       	movw	r10, r6
 a8e:	13 c0       	rjmp	.+38     	; 0xab6 <vfprintf+0x154>
 a90:	28 01       	movw	r4, r16
 a92:	f2 e0       	ldi	r31, 0x02	; 2
 a94:	4f 0e       	add	r4, r31
 a96:	51 1c       	adc	r5, r1
 a98:	f8 01       	movw	r30, r16
 a9a:	a0 80       	ld	r10, Z
 a9c:	b1 80       	ldd	r11, Z+1	; 0x01
 a9e:	36 fe       	sbrs	r3, 6
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <vfprintf+0x146>
 aa2:	69 2d       	mov	r22, r9
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <vfprintf+0x14a>
 aa8:	6f ef       	ldi	r22, 0xFF	; 255
 aaa:	7f ef       	ldi	r23, 0xFF	; 255
 aac:	c5 01       	movw	r24, r10
 aae:	0e 94 9d 06 	call	0xd3a	; 0xd3a <strnlen>
 ab2:	4c 01       	movw	r8, r24
 ab4:	82 01       	movw	r16, r4
 ab6:	f3 2d       	mov	r31, r3
 ab8:	ff 77       	andi	r31, 0x7F	; 127
 aba:	3f 2e       	mov	r3, r31
 abc:	16 c0       	rjmp	.+44     	; 0xaea <vfprintf+0x188>
 abe:	28 01       	movw	r4, r16
 ac0:	22 e0       	ldi	r18, 0x02	; 2
 ac2:	42 0e       	add	r4, r18
 ac4:	51 1c       	adc	r5, r1
 ac6:	f8 01       	movw	r30, r16
 ac8:	a0 80       	ld	r10, Z
 aca:	b1 80       	ldd	r11, Z+1	; 0x01
 acc:	36 fe       	sbrs	r3, 6
 ace:	03 c0       	rjmp	.+6      	; 0xad6 <vfprintf+0x174>
 ad0:	69 2d       	mov	r22, r9
 ad2:	70 e0       	ldi	r23, 0x00	; 0
 ad4:	02 c0       	rjmp	.+4      	; 0xada <vfprintf+0x178>
 ad6:	6f ef       	ldi	r22, 0xFF	; 255
 ad8:	7f ef       	ldi	r23, 0xFF	; 255
 ada:	c5 01       	movw	r24, r10
 adc:	0e 94 92 06 	call	0xd24	; 0xd24 <strnlen_P>
 ae0:	4c 01       	movw	r8, r24
 ae2:	f3 2d       	mov	r31, r3
 ae4:	f0 68       	ori	r31, 0x80	; 128
 ae6:	3f 2e       	mov	r3, r31
 ae8:	82 01       	movw	r16, r4
 aea:	33 fc       	sbrc	r3, 3
 aec:	1b c0       	rjmp	.+54     	; 0xb24 <vfprintf+0x1c2>
 aee:	82 2d       	mov	r24, r2
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	88 16       	cp	r8, r24
 af4:	99 06       	cpc	r9, r25
 af6:	b0 f4       	brcc	.+44     	; 0xb24 <vfprintf+0x1c2>
 af8:	b6 01       	movw	r22, r12
 afa:	80 e2       	ldi	r24, 0x20	; 32
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 b02:	2a 94       	dec	r2
 b04:	f4 cf       	rjmp	.-24     	; 0xaee <vfprintf+0x18c>
 b06:	f5 01       	movw	r30, r10
 b08:	37 fc       	sbrc	r3, 7
 b0a:	85 91       	lpm	r24, Z+
 b0c:	37 fe       	sbrs	r3, 7
 b0e:	81 91       	ld	r24, Z+
 b10:	5f 01       	movw	r10, r30
 b12:	b6 01       	movw	r22, r12
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 b1a:	21 10       	cpse	r2, r1
 b1c:	2a 94       	dec	r2
 b1e:	21 e0       	ldi	r18, 0x01	; 1
 b20:	82 1a       	sub	r8, r18
 b22:	91 08       	sbc	r9, r1
 b24:	81 14       	cp	r8, r1
 b26:	91 04       	cpc	r9, r1
 b28:	71 f7       	brne	.-36     	; 0xb06 <vfprintf+0x1a4>
 b2a:	e8 c0       	rjmp	.+464    	; 0xcfc <vfprintf+0x39a>
 b2c:	84 36       	cpi	r24, 0x64	; 100
 b2e:	11 f0       	breq	.+4      	; 0xb34 <vfprintf+0x1d2>
 b30:	89 36       	cpi	r24, 0x69	; 105
 b32:	41 f5       	brne	.+80     	; 0xb84 <vfprintf+0x222>
 b34:	f8 01       	movw	r30, r16
 b36:	37 fe       	sbrs	r3, 7
 b38:	07 c0       	rjmp	.+14     	; 0xb48 <vfprintf+0x1e6>
 b3a:	60 81       	ld	r22, Z
 b3c:	71 81       	ldd	r23, Z+1	; 0x01
 b3e:	82 81       	ldd	r24, Z+2	; 0x02
 b40:	93 81       	ldd	r25, Z+3	; 0x03
 b42:	0c 5f       	subi	r16, 0xFC	; 252
 b44:	1f 4f       	sbci	r17, 0xFF	; 255
 b46:	08 c0       	rjmp	.+16     	; 0xb58 <vfprintf+0x1f6>
 b48:	60 81       	ld	r22, Z
 b4a:	71 81       	ldd	r23, Z+1	; 0x01
 b4c:	07 2e       	mov	r0, r23
 b4e:	00 0c       	add	r0, r0
 b50:	88 0b       	sbc	r24, r24
 b52:	99 0b       	sbc	r25, r25
 b54:	0e 5f       	subi	r16, 0xFE	; 254
 b56:	1f 4f       	sbci	r17, 0xFF	; 255
 b58:	f3 2d       	mov	r31, r3
 b5a:	ff 76       	andi	r31, 0x6F	; 111
 b5c:	3f 2e       	mov	r3, r31
 b5e:	97 ff       	sbrs	r25, 7
 b60:	09 c0       	rjmp	.+18     	; 0xb74 <vfprintf+0x212>
 b62:	90 95       	com	r25
 b64:	80 95       	com	r24
 b66:	70 95       	com	r23
 b68:	61 95       	neg	r22
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	f0 68       	ori	r31, 0x80	; 128
 b72:	3f 2e       	mov	r3, r31
 b74:	2a e0       	ldi	r18, 0x0A	; 10
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	a3 01       	movw	r20, r6
 b7a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__ultoa_invert>
 b7e:	88 2e       	mov	r8, r24
 b80:	86 18       	sub	r8, r6
 b82:	45 c0       	rjmp	.+138    	; 0xc0e <vfprintf+0x2ac>
 b84:	85 37       	cpi	r24, 0x75	; 117
 b86:	31 f4       	brne	.+12     	; 0xb94 <vfprintf+0x232>
 b88:	23 2d       	mov	r18, r3
 b8a:	2f 7e       	andi	r18, 0xEF	; 239
 b8c:	b2 2e       	mov	r11, r18
 b8e:	2a e0       	ldi	r18, 0x0A	; 10
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	25 c0       	rjmp	.+74     	; 0xbde <vfprintf+0x27c>
 b94:	93 2d       	mov	r25, r3
 b96:	99 7f       	andi	r25, 0xF9	; 249
 b98:	b9 2e       	mov	r11, r25
 b9a:	8f 36       	cpi	r24, 0x6F	; 111
 b9c:	c1 f0       	breq	.+48     	; 0xbce <vfprintf+0x26c>
 b9e:	18 f4       	brcc	.+6      	; 0xba6 <vfprintf+0x244>
 ba0:	88 35       	cpi	r24, 0x58	; 88
 ba2:	79 f0       	breq	.+30     	; 0xbc2 <vfprintf+0x260>
 ba4:	b5 c0       	rjmp	.+362    	; 0xd10 <vfprintf+0x3ae>
 ba6:	80 37       	cpi	r24, 0x70	; 112
 ba8:	19 f0       	breq	.+6      	; 0xbb0 <vfprintf+0x24e>
 baa:	88 37       	cpi	r24, 0x78	; 120
 bac:	21 f0       	breq	.+8      	; 0xbb6 <vfprintf+0x254>
 bae:	b0 c0       	rjmp	.+352    	; 0xd10 <vfprintf+0x3ae>
 bb0:	e9 2f       	mov	r30, r25
 bb2:	e0 61       	ori	r30, 0x10	; 16
 bb4:	be 2e       	mov	r11, r30
 bb6:	b4 fe       	sbrs	r11, 4
 bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <vfprintf+0x272>
 bba:	fb 2d       	mov	r31, r11
 bbc:	f4 60       	ori	r31, 0x04	; 4
 bbe:	bf 2e       	mov	r11, r31
 bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <vfprintf+0x272>
 bc2:	34 fe       	sbrs	r3, 4
 bc4:	0a c0       	rjmp	.+20     	; 0xbda <vfprintf+0x278>
 bc6:	29 2f       	mov	r18, r25
 bc8:	26 60       	ori	r18, 0x06	; 6
 bca:	b2 2e       	mov	r11, r18
 bcc:	06 c0       	rjmp	.+12     	; 0xbda <vfprintf+0x278>
 bce:	28 e0       	ldi	r18, 0x08	; 8
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	05 c0       	rjmp	.+10     	; 0xbde <vfprintf+0x27c>
 bd4:	20 e1       	ldi	r18, 0x10	; 16
 bd6:	30 e0       	ldi	r19, 0x00	; 0
 bd8:	02 c0       	rjmp	.+4      	; 0xbde <vfprintf+0x27c>
 bda:	20 e1       	ldi	r18, 0x10	; 16
 bdc:	32 e0       	ldi	r19, 0x02	; 2
 bde:	f8 01       	movw	r30, r16
 be0:	b7 fe       	sbrs	r11, 7
 be2:	07 c0       	rjmp	.+14     	; 0xbf2 <vfprintf+0x290>
 be4:	60 81       	ld	r22, Z
 be6:	71 81       	ldd	r23, Z+1	; 0x01
 be8:	82 81       	ldd	r24, Z+2	; 0x02
 bea:	93 81       	ldd	r25, Z+3	; 0x03
 bec:	0c 5f       	subi	r16, 0xFC	; 252
 bee:	1f 4f       	sbci	r17, 0xFF	; 255
 bf0:	06 c0       	rjmp	.+12     	; 0xbfe <vfprintf+0x29c>
 bf2:	60 81       	ld	r22, Z
 bf4:	71 81       	ldd	r23, Z+1	; 0x01
 bf6:	80 e0       	ldi	r24, 0x00	; 0
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	0e 5f       	subi	r16, 0xFE	; 254
 bfc:	1f 4f       	sbci	r17, 0xFF	; 255
 bfe:	a3 01       	movw	r20, r6
 c00:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__ultoa_invert>
 c04:	88 2e       	mov	r8, r24
 c06:	86 18       	sub	r8, r6
 c08:	fb 2d       	mov	r31, r11
 c0a:	ff 77       	andi	r31, 0x7F	; 127
 c0c:	3f 2e       	mov	r3, r31
 c0e:	36 fe       	sbrs	r3, 6
 c10:	0d c0       	rjmp	.+26     	; 0xc2c <vfprintf+0x2ca>
 c12:	23 2d       	mov	r18, r3
 c14:	2e 7f       	andi	r18, 0xFE	; 254
 c16:	a2 2e       	mov	r10, r18
 c18:	89 14       	cp	r8, r9
 c1a:	58 f4       	brcc	.+22     	; 0xc32 <vfprintf+0x2d0>
 c1c:	34 fe       	sbrs	r3, 4
 c1e:	0b c0       	rjmp	.+22     	; 0xc36 <vfprintf+0x2d4>
 c20:	32 fc       	sbrc	r3, 2
 c22:	09 c0       	rjmp	.+18     	; 0xc36 <vfprintf+0x2d4>
 c24:	83 2d       	mov	r24, r3
 c26:	8e 7e       	andi	r24, 0xEE	; 238
 c28:	a8 2e       	mov	r10, r24
 c2a:	05 c0       	rjmp	.+10     	; 0xc36 <vfprintf+0x2d4>
 c2c:	b8 2c       	mov	r11, r8
 c2e:	a3 2c       	mov	r10, r3
 c30:	03 c0       	rjmp	.+6      	; 0xc38 <vfprintf+0x2d6>
 c32:	b8 2c       	mov	r11, r8
 c34:	01 c0       	rjmp	.+2      	; 0xc38 <vfprintf+0x2d6>
 c36:	b9 2c       	mov	r11, r9
 c38:	a4 fe       	sbrs	r10, 4
 c3a:	0f c0       	rjmp	.+30     	; 0xc5a <vfprintf+0x2f8>
 c3c:	fe 01       	movw	r30, r28
 c3e:	e8 0d       	add	r30, r8
 c40:	f1 1d       	adc	r31, r1
 c42:	80 81       	ld	r24, Z
 c44:	80 33       	cpi	r24, 0x30	; 48
 c46:	21 f4       	brne	.+8      	; 0xc50 <vfprintf+0x2ee>
 c48:	9a 2d       	mov	r25, r10
 c4a:	99 7e       	andi	r25, 0xE9	; 233
 c4c:	a9 2e       	mov	r10, r25
 c4e:	09 c0       	rjmp	.+18     	; 0xc62 <vfprintf+0x300>
 c50:	a2 fe       	sbrs	r10, 2
 c52:	06 c0       	rjmp	.+12     	; 0xc60 <vfprintf+0x2fe>
 c54:	b3 94       	inc	r11
 c56:	b3 94       	inc	r11
 c58:	04 c0       	rjmp	.+8      	; 0xc62 <vfprintf+0x300>
 c5a:	8a 2d       	mov	r24, r10
 c5c:	86 78       	andi	r24, 0x86	; 134
 c5e:	09 f0       	breq	.+2      	; 0xc62 <vfprintf+0x300>
 c60:	b3 94       	inc	r11
 c62:	a3 fc       	sbrc	r10, 3
 c64:	11 c0       	rjmp	.+34     	; 0xc88 <vfprintf+0x326>
 c66:	a0 fe       	sbrs	r10, 0
 c68:	06 c0       	rjmp	.+12     	; 0xc76 <vfprintf+0x314>
 c6a:	b2 14       	cp	r11, r2
 c6c:	88 f4       	brcc	.+34     	; 0xc90 <vfprintf+0x32e>
 c6e:	28 0c       	add	r2, r8
 c70:	92 2c       	mov	r9, r2
 c72:	9b 18       	sub	r9, r11
 c74:	0e c0       	rjmp	.+28     	; 0xc92 <vfprintf+0x330>
 c76:	b2 14       	cp	r11, r2
 c78:	60 f4       	brcc	.+24     	; 0xc92 <vfprintf+0x330>
 c7a:	b6 01       	movw	r22, r12
 c7c:	80 e2       	ldi	r24, 0x20	; 32
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 c84:	b3 94       	inc	r11
 c86:	f7 cf       	rjmp	.-18     	; 0xc76 <vfprintf+0x314>
 c88:	b2 14       	cp	r11, r2
 c8a:	18 f4       	brcc	.+6      	; 0xc92 <vfprintf+0x330>
 c8c:	2b 18       	sub	r2, r11
 c8e:	02 c0       	rjmp	.+4      	; 0xc94 <vfprintf+0x332>
 c90:	98 2c       	mov	r9, r8
 c92:	21 2c       	mov	r2, r1
 c94:	a4 fe       	sbrs	r10, 4
 c96:	10 c0       	rjmp	.+32     	; 0xcb8 <vfprintf+0x356>
 c98:	b6 01       	movw	r22, r12
 c9a:	80 e3       	ldi	r24, 0x30	; 48
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 ca2:	a2 fe       	sbrs	r10, 2
 ca4:	17 c0       	rjmp	.+46     	; 0xcd4 <vfprintf+0x372>
 ca6:	a1 fc       	sbrc	r10, 1
 ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <vfprintf+0x34e>
 caa:	88 e7       	ldi	r24, 0x78	; 120
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <vfprintf+0x352>
 cb0:	88 e5       	ldi	r24, 0x58	; 88
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	b6 01       	movw	r22, r12
 cb6:	0c c0       	rjmp	.+24     	; 0xcd0 <vfprintf+0x36e>
 cb8:	8a 2d       	mov	r24, r10
 cba:	86 78       	andi	r24, 0x86	; 134
 cbc:	59 f0       	breq	.+22     	; 0xcd4 <vfprintf+0x372>
 cbe:	a1 fe       	sbrs	r10, 1
 cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <vfprintf+0x364>
 cc2:	8b e2       	ldi	r24, 0x2B	; 43
 cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <vfprintf+0x366>
 cc6:	80 e2       	ldi	r24, 0x20	; 32
 cc8:	a7 fc       	sbrc	r10, 7
 cca:	8d e2       	ldi	r24, 0x2D	; 45
 ccc:	b6 01       	movw	r22, r12
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 cd4:	89 14       	cp	r8, r9
 cd6:	38 f4       	brcc	.+14     	; 0xce6 <vfprintf+0x384>
 cd8:	b6 01       	movw	r22, r12
 cda:	80 e3       	ldi	r24, 0x30	; 48
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 ce2:	9a 94       	dec	r9
 ce4:	f7 cf       	rjmp	.-18     	; 0xcd4 <vfprintf+0x372>
 ce6:	8a 94       	dec	r8
 ce8:	f3 01       	movw	r30, r6
 cea:	e8 0d       	add	r30, r8
 cec:	f1 1d       	adc	r31, r1
 cee:	80 81       	ld	r24, Z
 cf0:	b6 01       	movw	r22, r12
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 cf8:	81 10       	cpse	r8, r1
 cfa:	f5 cf       	rjmp	.-22     	; 0xce6 <vfprintf+0x384>
 cfc:	22 20       	and	r2, r2
 cfe:	09 f4       	brne	.+2      	; 0xd02 <vfprintf+0x3a0>
 d00:	42 ce       	rjmp	.-892    	; 0x986 <vfprintf+0x24>
 d02:	b6 01       	movw	r22, r12
 d04:	80 e2       	ldi	r24, 0x20	; 32
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	0e 94 a8 06 	call	0xd50	; 0xd50 <fputc>
 d0c:	2a 94       	dec	r2
 d0e:	f6 cf       	rjmp	.-20     	; 0xcfc <vfprintf+0x39a>
 d10:	f6 01       	movw	r30, r12
 d12:	86 81       	ldd	r24, Z+6	; 0x06
 d14:	97 81       	ldd	r25, Z+7	; 0x07
 d16:	02 c0       	rjmp	.+4      	; 0xd1c <vfprintf+0x3ba>
 d18:	8f ef       	ldi	r24, 0xFF	; 255
 d1a:	9f ef       	ldi	r25, 0xFF	; 255
 d1c:	2b 96       	adiw	r28, 0x0b	; 11
 d1e:	e2 e1       	ldi	r30, 0x12	; 18
 d20:	0c 94 5e 07 	jmp	0xebc	; 0xebc <__epilogue_restores__>

00000d24 <strnlen_P>:
 d24:	fc 01       	movw	r30, r24
 d26:	05 90       	lpm	r0, Z+
 d28:	61 50       	subi	r22, 0x01	; 1
 d2a:	70 40       	sbci	r23, 0x00	; 0
 d2c:	01 10       	cpse	r0, r1
 d2e:	d8 f7       	brcc	.-10     	; 0xd26 <strnlen_P+0x2>
 d30:	80 95       	com	r24
 d32:	90 95       	com	r25
 d34:	8e 0f       	add	r24, r30
 d36:	9f 1f       	adc	r25, r31
 d38:	08 95       	ret

00000d3a <strnlen>:
 d3a:	fc 01       	movw	r30, r24
 d3c:	61 50       	subi	r22, 0x01	; 1
 d3e:	70 40       	sbci	r23, 0x00	; 0
 d40:	01 90       	ld	r0, Z+
 d42:	01 10       	cpse	r0, r1
 d44:	d8 f7       	brcc	.-10     	; 0xd3c <strnlen+0x2>
 d46:	80 95       	com	r24
 d48:	90 95       	com	r25
 d4a:	8e 0f       	add	r24, r30
 d4c:	9f 1f       	adc	r25, r31
 d4e:	08 95       	ret

00000d50 <fputc>:
 d50:	0f 93       	push	r16
 d52:	1f 93       	push	r17
 d54:	cf 93       	push	r28
 d56:	df 93       	push	r29
 d58:	fb 01       	movw	r30, r22
 d5a:	23 81       	ldd	r18, Z+3	; 0x03
 d5c:	21 fd       	sbrc	r18, 1
 d5e:	03 c0       	rjmp	.+6      	; 0xd66 <fputc+0x16>
 d60:	8f ef       	ldi	r24, 0xFF	; 255
 d62:	9f ef       	ldi	r25, 0xFF	; 255
 d64:	2c c0       	rjmp	.+88     	; 0xdbe <fputc+0x6e>
 d66:	22 ff       	sbrs	r18, 2
 d68:	16 c0       	rjmp	.+44     	; 0xd96 <fputc+0x46>
 d6a:	46 81       	ldd	r20, Z+6	; 0x06
 d6c:	57 81       	ldd	r21, Z+7	; 0x07
 d6e:	24 81       	ldd	r18, Z+4	; 0x04
 d70:	35 81       	ldd	r19, Z+5	; 0x05
 d72:	42 17       	cp	r20, r18
 d74:	53 07       	cpc	r21, r19
 d76:	44 f4       	brge	.+16     	; 0xd88 <fputc+0x38>
 d78:	a0 81       	ld	r26, Z
 d7a:	b1 81       	ldd	r27, Z+1	; 0x01
 d7c:	9d 01       	movw	r18, r26
 d7e:	2f 5f       	subi	r18, 0xFF	; 255
 d80:	3f 4f       	sbci	r19, 0xFF	; 255
 d82:	31 83       	std	Z+1, r19	; 0x01
 d84:	20 83       	st	Z, r18
 d86:	8c 93       	st	X, r24
 d88:	26 81       	ldd	r18, Z+6	; 0x06
 d8a:	37 81       	ldd	r19, Z+7	; 0x07
 d8c:	2f 5f       	subi	r18, 0xFF	; 255
 d8e:	3f 4f       	sbci	r19, 0xFF	; 255
 d90:	37 83       	std	Z+7, r19	; 0x07
 d92:	26 83       	std	Z+6, r18	; 0x06
 d94:	14 c0       	rjmp	.+40     	; 0xdbe <fputc+0x6e>
 d96:	8b 01       	movw	r16, r22
 d98:	ec 01       	movw	r28, r24
 d9a:	fb 01       	movw	r30, r22
 d9c:	00 84       	ldd	r0, Z+8	; 0x08
 d9e:	f1 85       	ldd	r31, Z+9	; 0x09
 da0:	e0 2d       	mov	r30, r0
 da2:	09 95       	icall
 da4:	89 2b       	or	r24, r25
 da6:	e1 f6       	brne	.-72     	; 0xd60 <fputc+0x10>
 da8:	d8 01       	movw	r26, r16
 daa:	16 96       	adiw	r26, 0x06	; 6
 dac:	8d 91       	ld	r24, X+
 dae:	9c 91       	ld	r25, X
 db0:	17 97       	sbiw	r26, 0x07	; 7
 db2:	01 96       	adiw	r24, 0x01	; 1
 db4:	17 96       	adiw	r26, 0x07	; 7
 db6:	9c 93       	st	X, r25
 db8:	8e 93       	st	-X, r24
 dba:	16 97       	sbiw	r26, 0x06	; 6
 dbc:	ce 01       	movw	r24, r28
 dbe:	df 91       	pop	r29
 dc0:	cf 91       	pop	r28
 dc2:	1f 91       	pop	r17
 dc4:	0f 91       	pop	r16
 dc6:	08 95       	ret

00000dc8 <__ultoa_invert>:
 dc8:	fa 01       	movw	r30, r20
 dca:	aa 27       	eor	r26, r26
 dcc:	28 30       	cpi	r18, 0x08	; 8
 dce:	51 f1       	breq	.+84     	; 0xe24 <__ultoa_invert+0x5c>
 dd0:	20 31       	cpi	r18, 0x10	; 16
 dd2:	81 f1       	breq	.+96     	; 0xe34 <__ultoa_invert+0x6c>
 dd4:	e8 94       	clt
 dd6:	6f 93       	push	r22
 dd8:	6e 7f       	andi	r22, 0xFE	; 254
 dda:	6e 5f       	subi	r22, 0xFE	; 254
 ddc:	7f 4f       	sbci	r23, 0xFF	; 255
 dde:	8f 4f       	sbci	r24, 0xFF	; 255
 de0:	9f 4f       	sbci	r25, 0xFF	; 255
 de2:	af 4f       	sbci	r26, 0xFF	; 255
 de4:	b1 e0       	ldi	r27, 0x01	; 1
 de6:	3e d0       	rcall	.+124    	; 0xe64 <__ultoa_invert+0x9c>
 de8:	b4 e0       	ldi	r27, 0x04	; 4
 dea:	3c d0       	rcall	.+120    	; 0xe64 <__ultoa_invert+0x9c>
 dec:	67 0f       	add	r22, r23
 dee:	78 1f       	adc	r23, r24
 df0:	89 1f       	adc	r24, r25
 df2:	9a 1f       	adc	r25, r26
 df4:	a1 1d       	adc	r26, r1
 df6:	68 0f       	add	r22, r24
 df8:	79 1f       	adc	r23, r25
 dfa:	8a 1f       	adc	r24, r26
 dfc:	91 1d       	adc	r25, r1
 dfe:	a1 1d       	adc	r26, r1
 e00:	6a 0f       	add	r22, r26
 e02:	71 1d       	adc	r23, r1
 e04:	81 1d       	adc	r24, r1
 e06:	91 1d       	adc	r25, r1
 e08:	a1 1d       	adc	r26, r1
 e0a:	20 d0       	rcall	.+64     	; 0xe4c <__ultoa_invert+0x84>
 e0c:	09 f4       	brne	.+2      	; 0xe10 <__ultoa_invert+0x48>
 e0e:	68 94       	set
 e10:	3f 91       	pop	r19
 e12:	2a e0       	ldi	r18, 0x0A	; 10
 e14:	26 9f       	mul	r18, r22
 e16:	11 24       	eor	r1, r1
 e18:	30 19       	sub	r19, r0
 e1a:	30 5d       	subi	r19, 0xD0	; 208
 e1c:	31 93       	st	Z+, r19
 e1e:	de f6       	brtc	.-74     	; 0xdd6 <__ultoa_invert+0xe>
 e20:	cf 01       	movw	r24, r30
 e22:	08 95       	ret
 e24:	46 2f       	mov	r20, r22
 e26:	47 70       	andi	r20, 0x07	; 7
 e28:	40 5d       	subi	r20, 0xD0	; 208
 e2a:	41 93       	st	Z+, r20
 e2c:	b3 e0       	ldi	r27, 0x03	; 3
 e2e:	0f d0       	rcall	.+30     	; 0xe4e <__ultoa_invert+0x86>
 e30:	c9 f7       	brne	.-14     	; 0xe24 <__ultoa_invert+0x5c>
 e32:	f6 cf       	rjmp	.-20     	; 0xe20 <__ultoa_invert+0x58>
 e34:	46 2f       	mov	r20, r22
 e36:	4f 70       	andi	r20, 0x0F	; 15
 e38:	40 5d       	subi	r20, 0xD0	; 208
 e3a:	4a 33       	cpi	r20, 0x3A	; 58
 e3c:	18 f0       	brcs	.+6      	; 0xe44 <__ultoa_invert+0x7c>
 e3e:	49 5d       	subi	r20, 0xD9	; 217
 e40:	31 fd       	sbrc	r19, 1
 e42:	40 52       	subi	r20, 0x20	; 32
 e44:	41 93       	st	Z+, r20
 e46:	02 d0       	rcall	.+4      	; 0xe4c <__ultoa_invert+0x84>
 e48:	a9 f7       	brne	.-22     	; 0xe34 <__ultoa_invert+0x6c>
 e4a:	ea cf       	rjmp	.-44     	; 0xe20 <__ultoa_invert+0x58>
 e4c:	b4 e0       	ldi	r27, 0x04	; 4
 e4e:	a6 95       	lsr	r26
 e50:	97 95       	ror	r25
 e52:	87 95       	ror	r24
 e54:	77 95       	ror	r23
 e56:	67 95       	ror	r22
 e58:	ba 95       	dec	r27
 e5a:	c9 f7       	brne	.-14     	; 0xe4e <__ultoa_invert+0x86>
 e5c:	00 97       	sbiw	r24, 0x00	; 0
 e5e:	61 05       	cpc	r22, r1
 e60:	71 05       	cpc	r23, r1
 e62:	08 95       	ret
 e64:	9b 01       	movw	r18, r22
 e66:	ac 01       	movw	r20, r24
 e68:	0a 2e       	mov	r0, r26
 e6a:	06 94       	lsr	r0
 e6c:	57 95       	ror	r21
 e6e:	47 95       	ror	r20
 e70:	37 95       	ror	r19
 e72:	27 95       	ror	r18
 e74:	ba 95       	dec	r27
 e76:	c9 f7       	brne	.-14     	; 0xe6a <__ultoa_invert+0xa2>
 e78:	62 0f       	add	r22, r18
 e7a:	73 1f       	adc	r23, r19
 e7c:	84 1f       	adc	r24, r20
 e7e:	95 1f       	adc	r25, r21
 e80:	a0 1d       	adc	r26, r0
 e82:	08 95       	ret

00000e84 <__prologue_saves__>:
 e84:	2f 92       	push	r2
 e86:	3f 92       	push	r3
 e88:	4f 92       	push	r4
 e8a:	5f 92       	push	r5
 e8c:	6f 92       	push	r6
 e8e:	7f 92       	push	r7
 e90:	8f 92       	push	r8
 e92:	9f 92       	push	r9
 e94:	af 92       	push	r10
 e96:	bf 92       	push	r11
 e98:	cf 92       	push	r12
 e9a:	df 92       	push	r13
 e9c:	ef 92       	push	r14
 e9e:	ff 92       	push	r15
 ea0:	0f 93       	push	r16
 ea2:	1f 93       	push	r17
 ea4:	cf 93       	push	r28
 ea6:	df 93       	push	r29
 ea8:	cd b7       	in	r28, 0x3d	; 61
 eaa:	de b7       	in	r29, 0x3e	; 62
 eac:	ca 1b       	sub	r28, r26
 eae:	db 0b       	sbc	r29, r27
 eb0:	0f b6       	in	r0, 0x3f	; 63
 eb2:	f8 94       	cli
 eb4:	de bf       	out	0x3e, r29	; 62
 eb6:	0f be       	out	0x3f, r0	; 63
 eb8:	cd bf       	out	0x3d, r28	; 61
 eba:	09 94       	ijmp

00000ebc <__epilogue_restores__>:
 ebc:	2a 88       	ldd	r2, Y+18	; 0x12
 ebe:	39 88       	ldd	r3, Y+17	; 0x11
 ec0:	48 88       	ldd	r4, Y+16	; 0x10
 ec2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ec4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ec6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ec8:	8c 84       	ldd	r8, Y+12	; 0x0c
 eca:	9b 84       	ldd	r9, Y+11	; 0x0b
 ecc:	aa 84       	ldd	r10, Y+10	; 0x0a
 ece:	b9 84       	ldd	r11, Y+9	; 0x09
 ed0:	c8 84       	ldd	r12, Y+8	; 0x08
 ed2:	df 80       	ldd	r13, Y+7	; 0x07
 ed4:	ee 80       	ldd	r14, Y+6	; 0x06
 ed6:	fd 80       	ldd	r15, Y+5	; 0x05
 ed8:	0c 81       	ldd	r16, Y+4	; 0x04
 eda:	1b 81       	ldd	r17, Y+3	; 0x03
 edc:	aa 81       	ldd	r26, Y+2	; 0x02
 ede:	b9 81       	ldd	r27, Y+1	; 0x01
 ee0:	ce 0f       	add	r28, r30
 ee2:	d1 1d       	adc	r29, r1
 ee4:	0f b6       	in	r0, 0x3f	; 63
 ee6:	f8 94       	cli
 ee8:	de bf       	out	0x3e, r29	; 62
 eea:	0f be       	out	0x3f, r0	; 63
 eec:	cd bf       	out	0x3d, r28	; 61
 eee:	ed 01       	movw	r28, r26
 ef0:	08 95       	ret

00000ef2 <_exit>:
 ef2:	f8 94       	cli

00000ef4 <__stop_program>:
 ef4:	ff cf       	rjmp	.-2      	; 0xef4 <__stop_program>
