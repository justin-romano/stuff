
Axis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  000041de  00004272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000204  0080021a  0080021a  0000438c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000438c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c20  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001aaf4  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a90  00000000  00000000  0001fb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b0a  00000000  00000000  000245cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002d5c  00000000  00000000  0002b0d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000646e  00000000  00000000  0002de34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e9e0  00000000  00000000  000342a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b58  00000000  00000000  00042c82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__dtors_end>
       4:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
       8:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
       c:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__vector_3>
      10:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_4>
      14:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_5>
      18:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      1c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      20:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      24:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      28:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      2c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      30:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      34:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      38:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      3c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      40:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__vector_16>
      44:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      48:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__vector_18>
      4c:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__vector_19>
      50:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      54:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      58:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      5c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      60:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__vector_24>
      64:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      68:	3f 06       	cpc	r3, r31
      6a:	3f 06       	cpc	r3, r31
      6c:	44 06       	cpc	r4, r20
      6e:	44 06       	cpc	r4, r20
      70:	49 06       	cpc	r4, r25
      72:	49 06       	cpc	r4, r25
      74:	49 06       	cpc	r4, r25
      76:	4e 06       	cpc	r4, r30
      78:	72 06       	cpc	r7, r18
      7a:	74 06       	cpc	r7, r20
      7c:	76 06       	cpc	r7, r22
      7e:	78 06       	cpc	r7, r24
      80:	7a 06       	cpc	r7, r26
      82:	7c 06       	cpc	r7, r28
      84:	7e 06       	cpc	r7, r30
      86:	7e 06       	cpc	r7, r30
      88:	3c 07       	cpc	r19, r28
      8a:	44 07       	cpc	r20, r20
      8c:	4c 07       	cpc	r20, r28
      8e:	54 07       	cpc	r21, r20
      90:	5b 07       	cpc	r21, r27
      92:	62 07       	cpc	r22, r18
      94:	69 07       	cpc	r22, r25
      96:	08 4a       	sbci	r16, 0xA8	; 168
      98:	d7 3b       	cpi	r29, 0xB7	; 183
      9a:	3b ce       	rjmp	.-906    	; 0xfffffd12 <__eeprom_end+0xff7efd12>
      9c:	01 6e       	ori	r16, 0xE1	; 225
      9e:	84 bc       	out	0x24, r8	; 36
      a0:	bf fd       	.word	0xfdbf	; ????
      a2:	c1 2f       	mov	r28, r17
      a4:	3d 6c       	ori	r19, 0xCD	; 205
      a6:	74 31       	cpi	r23, 0x14	; 20
      a8:	9a bd       	out	0x2a, r25	; 42
      aa:	56 83       	std	Z+6, r21	; 0x06
      ac:	3d da       	rcall	.-2950   	; 0xfffff528 <__eeprom_end+0xff7ef528>
      ae:	3d 00       	.word	0x003d	; ????
      b0:	c7 7f       	andi	r28, 0xF7	; 247
      b2:	11 be       	out	0x31, r1	; 49
      b4:	d9 e4       	ldi	r29, 0x49	; 73
      b6:	bb 4c       	sbci	r27, 0xCB	; 203
      b8:	3e 91       	ld	r19, -X
      ba:	6b aa       	std	Y+51, r6	; 0x33
      bc:	aa be       	out	0x3a, r10	; 58
      be:	00 00       	nop
      c0:	00 80       	ld	r0, Z
      c2:	3f 00       	.word	0x003f	; ????

000000c4 <__trampolines_end>:
      c4:	00 40       	sbci	r16, 0x00	; 0
      c6:	7a 10       	cpse	r7, r10
      c8:	f3 5a       	subi	r31, 0xA3	; 163
      ca:	00 a0       	ldd	r0, Z+32	; 0x20
      cc:	72 4e       	sbci	r23, 0xE2	; 226
      ce:	18 09       	sbc	r17, r8
      d0:	00 10       	cpse	r0, r0
      d2:	a5 d4       	rcall	.+2378   	; 0xa1e <_ZN8Magnetic6toJSONEPKc+0x4a>
      d4:	e8 00       	.word	0x00e8	; ????
      d6:	00 e8       	ldi	r16, 0x80	; 128
      d8:	76 48       	sbci	r23, 0x86	; 134
      da:	17 00       	.word	0x0017	; ????
      dc:	00 e4       	ldi	r16, 0x40	; 64
      de:	0b 54       	subi	r16, 0x4B	; 75
      e0:	02 00       	.word	0x0002	; ????
      e2:	00 ca       	rjmp	.-3072   	; 0xfffff4e4 <__eeprom_end+0xff7ef4e4>
      e4:	9a 3b       	cpi	r25, 0xBA	; 186
      e6:	00 00       	nop
      e8:	00 e1       	ldi	r16, 0x10	; 16
      ea:	f5 05       	cpc	r31, r5
      ec:	00 00       	nop
      ee:	80 96       	adiw	r24, 0x20	; 32
      f0:	98 00       	.word	0x0098	; ????
      f2:	00 00       	nop
      f4:	40 42       	sbci	r20, 0x20	; 32
      f6:	0f 00       	.word	0x000f	; ????
      f8:	00 00       	nop
      fa:	a0 86       	std	Z+8, r10	; 0x08
      fc:	01 00       	.word	0x0001	; ????
      fe:	00 00       	nop
     100:	10 27       	eor	r17, r16
     102:	00 00       	nop
     104:	00 00       	nop
     106:	e8 03       	fmulsu	r22, r16
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	64 00       	.word	0x0064	; ????
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	0a 00       	.word	0x000a	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	01 00       	.word	0x0001	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	2c 76       	andi	r18, 0x6C	; 108
     120:	d8 88       	ldd	r13, Y+16	; 0x10
     122:	dc 67       	ori	r29, 0x7C	; 124
     124:	4f 08       	sbc	r4, r15
     126:	23 df       	rcall	.-442    	; 0xffffff6e <__eeprom_end+0xff7eff6e>
     128:	c1 df       	rcall	.-126    	; 0xac <__SREG__+0x6d>
     12a:	ae 59       	subi	r26, 0x9E	; 158
     12c:	e1 b1       	in	r30, 0x01	; 1
     12e:	b7 96       	adiw	r30, 0x27	; 39
     130:	e5 e3       	ldi	r30, 0x35	; 53
     132:	e4 53       	subi	r30, 0x34	; 52
     134:	c6 3a       	cpi	r28, 0xA6	; 166
     136:	e6 51       	subi	r30, 0x16	; 22
     138:	99 76       	andi	r25, 0x69	; 105
     13a:	96 e8       	ldi	r25, 0x86	; 134
     13c:	e6 c2       	rjmp	.+1484   	; 0x70a <_ZN8Magnetic5toCSVEPKc+0x5e>
     13e:	84 26       	eor	r8, r20
     140:	eb 89       	ldd	r30, Y+19	; 0x13
     142:	8c 9b       	sbis	0x11, 4	; 17
     144:	62 ed       	ldi	r22, 0xD2	; 210
     146:	40 7c       	andi	r20, 0xC0	; 192
     148:	6f fc       	.word	0xfc6f	; ????
     14a:	ef bc       	out	0x2f, r14	; 47
     14c:	9c 9f       	mul	r25, r28
     14e:	40 f2       	brcs	.-112    	; 0xe0 <__trampolines_end+0x1c>
     150:	ba a5       	ldd	r27, Y+42	; 0x2a
     152:	6f a5       	ldd	r22, Y+47	; 0x2f
     154:	f4 90       	lpm	r15, Z
     156:	05 5a       	subi	r16, 0xA5	; 165
     158:	2a f7       	brpl	.-54     	; 0x124 <__trampolines_end+0x60>
     15a:	5c 93       	st	X, r21
     15c:	6b 6c       	ori	r22, 0xCB	; 203
     15e:	f9 67       	ori	r31, 0x79	; 121
     160:	6d c1       	rjmp	.+730    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     162:	1b fc       	.word	0xfc1b	; ????
     164:	e0 e4       	ldi	r30, 0x40	; 64
     166:	0d 47       	sbci	r16, 0x7D	; 125
     168:	fe f5       	brtc	.+126    	; 0x1e8 <_ZL11json_format+0x2a>
     16a:	20 e6       	ldi	r18, 0x60	; 96
     16c:	b5 00       	.word	0x00b5	; ????
     16e:	d0 ed       	ldi	r29, 0xD0	; 208
     170:	90 2e       	mov	r9, r16
     172:	03 00       	.word	0x0003	; ????
     174:	94 35       	cpi	r25, 0x54	; 84
     176:	77 05       	cpc	r23, r7
     178:	00 80       	ld	r0, Z
     17a:	84 1e       	adc	r8, r20
     17c:	08 00       	.word	0x0008	; ????
     17e:	00 20       	and	r0, r0
     180:	4e 0a       	sbc	r4, r30
     182:	00 00       	nop
     184:	00 c8       	rjmp	.-4096   	; 0xfffff186 <__eeprom_end+0xff7ef186>
     186:	0c 33       	cpi	r16, 0x3C	; 60
     188:	33 33       	cpi	r19, 0x33	; 51
     18a:	33 0f       	add	r19, r19
     18c:	98 6e       	ori	r25, 0xE8	; 232
     18e:	12 83       	std	Z+2, r17	; 0x02
     190:	11 41       	sbci	r17, 0x11	; 17
     192:	ef 8d       	ldd	r30, Y+31	; 0x1f
     194:	21 14       	cp	r2, r1
     196:	89 3b       	cpi	r24, 0xB9	; 185
     198:	e6 55       	subi	r30, 0x56	; 86
     19a:	16 cf       	rjmp	.-468    	; 0xffffffc8 <__eeprom_end+0xff7effc8>
     19c:	fe e6       	ldi	r31, 0x6E	; 110
     19e:	db 18       	sub	r13, r11
     1a0:	d1 84       	ldd	r13, Z+9	; 0x09
     1a2:	4b 38       	cpi	r20, 0x8B	; 139
     1a4:	1b f7       	brvc	.-58     	; 0x16c <__trampolines_end+0xa8>
     1a6:	7c 1d       	adc	r23, r12
     1a8:	90 1d       	adc	r25, r0
     1aa:	a4 bb       	out	0x14, r26	; 20
     1ac:	e4 24       	eor	r14, r4
     1ae:	20 32       	cpi	r18, 0x20	; 32
     1b0:	84 72       	andi	r24, 0x24	; 36
     1b2:	5e 22       	and	r5, r30
     1b4:	81 00       	.word	0x0081	; ????
     1b6:	c9 f1       	breq	.+114    	; 0x22a <digital_pin_to_timer_PGM+0x7>
     1b8:	24 ec       	ldi	r18, 0xC4	; 196
     1ba:	a1 e5       	ldi	r26, 0x51	; 81
     1bc:	3d 27       	eor	r19, r29

000001be <_ZL11json_format>:
     1be:	25 63 7b 22 73 65 6e 73 6f 72 4e 61 6d 65 22 3a     %c{"sensorName":
     1ce:	22 25 73 22 2c 22 75 6e 69 74 22 3a 22 25 73 22     "%s","unit":"%s"
     1de:	2c 22 76 61 6c 75 65 22 3a 25 73 2c 22 63 73 22     ,"value":%s,"cs"
     1ee:	3a 25 64 7d 25 63 0a 00                             :%d}%c..

000001f6 <_ZL20magnetic_sensor_name>:
     1f6:	4d 61 67 6e 65 74 69 63 00                          Magnetic.

000001ff <_ZL15begin_error_msg>:
     1ff:	62 65 67 69 6e 20 25 73 20 66 61 69 6c 65 64 2e     begin %s failed.
     20f:	20 43 68 65 63 6b 20 77 69 72 69 6e 67 21 00         Check wiring!.

0000021e <_ZL13concat_string>:
     21e:	25 73 25 73 00                                      %s%s.

00000223 <digital_pin_to_timer_PGM>:
     223:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     233:	00 00 00 00                                         ....

00000237 <digital_pin_to_bit_mask_PGM>:
     237:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     247:	04 08 10 20                                         ... 

0000024b <digital_pin_to_port_PGM>:
     24b:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     25b:	03 03 03 03                                         ....

0000025f <port_to_input_PGM>:
     25f:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000269 <port_to_output_PGM>:
     269:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000273 <port_to_mode_PGM>:
     273:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000027e <__ctors_start>:
     27e:	bd 07       	cpc	r27, r29
     280:	89 0f       	add	r24, r25
     282:	fb 13       	cpse	r31, r27
     284:	bc 15       	cp	r27, r12

00000286 <__ctors_end>:
     286:	d5 07       	cpc	r29, r21
     288:	97 0f       	add	r25, r23

0000028a <__dtors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	d8 e0       	ldi	r29, 0x08	; 8
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61

00000296 <__do_copy_data>:
     296:	12 e0       	ldi	r17, 0x02	; 2
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b1 e0       	ldi	r27, 0x01	; 1
     29c:	ee ed       	ldi	r30, 0xDE	; 222
     29e:	f1 e4       	ldi	r31, 0x41	; 65
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <__do_copy_data+0x10>
     2a2:	05 90       	lpm	r0, Z+
     2a4:	0d 92       	st	X+, r0
     2a6:	aa 31       	cpi	r26, 0x1A	; 26
     2a8:	b1 07       	cpc	r27, r17
     2aa:	d9 f7       	brne	.-10     	; 0x2a2 <__do_copy_data+0xc>

000002ac <__do_clear_bss>:
     2ac:	24 e0       	ldi	r18, 0x04	; 4
     2ae:	aa e1       	ldi	r26, 0x1A	; 26
     2b0:	b2 e0       	ldi	r27, 0x02	; 2
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <.do_clear_bss_start>

000002b4 <.do_clear_bss_loop>:
     2b4:	1d 92       	st	X+, r1

000002b6 <.do_clear_bss_start>:
     2b6:	ae 31       	cpi	r26, 0x1E	; 30
     2b8:	b2 07       	cpc	r27, r18
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <.do_clear_bss_loop>

000002bc <__do_global_ctors>:
     2bc:	11 e0       	ldi	r17, 0x01	; 1
     2be:	c3 e4       	ldi	r28, 0x43	; 67
     2c0:	d1 e0       	ldi	r29, 0x01	; 1
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <__do_global_ctors+0x10>
     2c4:	21 97       	sbiw	r28, 0x01	; 1
     2c6:	fe 01       	movw	r30, r28
     2c8:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__tablejump2__>
     2cc:	cf 33       	cpi	r28, 0x3F	; 63
     2ce:	d1 07       	cpc	r29, r17
     2d0:	c9 f7       	brne	.-14     	; 0x2c4 <__do_global_ctors+0x8>
     2d2:	0e 94 29 14 	call	0x2852	; 0x2852 <main>
     2d6:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <__do_global_dtors>

000002da <__bad_interrupt>:
     2da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002de <_ZN8Magnetic10initializeEv>:
void Sensor::initializeHeader(sensor_id_t sensor_id, data_unit_t unit, const char name[] PROGMEM) {
  this->name = name;
  this->header.sensor_id = sensor_id;
  this->header.unit = unit;
  this->header.timestamp = 0;
  this->initialized = false;
     2de:	fc 01       	movw	r30, r24
     2e0:	83 85       	ldd	r24, Z+11	; 0x0b
     2e2:	0c 94 93 06 	jmp	0xd26	; 0xd26 <lsm303_mag_init>

000002e6 <_ZN8Magnetic10readSensorEv>:
     2e6:	ac 01       	movw	r20, r24
     2e8:	4c 5e       	subi	r20, 0xEC	; 236
     2ea:	5f 4f       	sbci	r21, 0xFF	; 255
     2ec:	bc 01       	movw	r22, r24
     2ee:	60 5f       	subi	r22, 0xF0	; 240
     2f0:	7f 4f       	sbci	r23, 0xFF	; 255
     2f2:	0c 96       	adiw	r24, 0x0c	; 12
     2f4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lsm303_getMag>
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	08 95       	ret

000002fc <_Z10_getOutBufv>:
     2fc:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_output_buffer>
     300:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <_output_buffer+0x1>
     304:	89 2b       	or	r24, r25
     306:	51 f4       	brne	.+20     	; 0x31c <_Z10_getOutBufv+0x20>
     308:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <OUTPUT_BUF_SIZE>
     30c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <OUTPUT_BUF_SIZE+0x1>
     310:	0e 94 3a 14 	call	0x2874	; 0x2874 <_Znaj>
     314:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_output_buffer+0x1>
     318:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_output_buffer>
     31c:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_output_buffer>
     320:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <_output_buffer+0x1>
     324:	08 95       	ret

00000326 <_Z12_resetOutBufv>:
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <OUTPUT_BUF_SIZE>
     32e:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <OUTPUT_BUF_SIZE+0x1>
     332:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     336:	ae 01       	movw	r20, r28
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <memset>
     340:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__data_end+0x1>
     344:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <_Z11unit_to_strh>:
     34e:	81 50       	subi	r24, 0x01	; 1
     350:	8b 30       	cpi	r24, 0x0B	; 11
     352:	48 f4       	brcc	.+18     	; 0x366 <_Z11unit_to_strh+0x18>
     354:	e8 2f       	mov	r30, r24
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	ee 0f       	add	r30, r30
     35a:	ff 1f       	adc	r31, r31
     35c:	e3 5a       	subi	r30, 0xA3	; 163
     35e:	fe 4f       	sbci	r31, 0xFE	; 254
     360:	80 81       	ld	r24, Z
     362:	91 81       	ldd	r25, Z+1	; 0x01
     364:	08 95       	ret
     366:	8d ef       	ldi	r24, 0xFD	; 253
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	08 95       	ret

0000036c <_Z18_writeErrorMessagePKcS0_>:
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	c0 55       	subi	r28, 0x50	; 80
     37e:	d1 09       	sbc	r29, r1
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	7b 01       	movw	r14, r22
     38c:	8e 01       	movw	r16, r28
     38e:	0d 5c       	subi	r16, 0xCD	; 205
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	c8 01       	movw	r24, r16
     396:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <strcpy_P>
     39a:	b7 01       	movw	r22, r14
     39c:	ce 01       	movw	r24, r28
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	7c 01       	movw	r14, r24
     3a2:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <strcpy_P>
     3a6:	0e 94 93 01 	call	0x326	; 0x326 <_Z12_resetOutBufv>
     3aa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     3ae:	ff 92       	push	r15
     3b0:	ef 92       	push	r14
     3b2:	1f 93       	push	r17
     3b4:	0f 93       	push	r16
     3b6:	9f 93       	push	r25
     3b8:	8f 93       	push	r24
     3ba:	0e 94 b6 1b 	call	0x376c	; 0x376c <sprintf>
     3be:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     3c2:	bc 01       	movw	r22, r24
     3c4:	84 eb       	ldi	r24, 0xB4	; 180
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN5Print7printlnEPKc>
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	c0 5b       	subi	r28, 0xB0	; 176
     3da:	df 4f       	sbci	r29, 0xFF	; 255
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	08 95       	ret

000003f4 <_Z23_calculateCheckSumValuePKciPv>:
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	6c 01       	movw	r12, r24
     40a:	5b 01       	movw	r10, r22
     40c:	7a 01       	movw	r14, r20
     40e:	00 e0       	ldi	r16, 0x00	; 0
     410:	10 e0       	ldi	r17, 0x00	; 0
     412:	c0 e0       	ldi	r28, 0x00	; 0
     414:	d0 e0       	ldi	r29, 0x00	; 0
     416:	0a 15       	cp	r16, r10
     418:	1b 05       	cpc	r17, r11
     41a:	6c f4       	brge	.+26     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     41c:	f7 01       	movw	r30, r14
     41e:	61 91       	ld	r22, Z+
     420:	71 91       	ld	r23, Z+
     422:	81 91       	ld	r24, Z+
     424:	91 91       	ld	r25, Z+
     426:	7f 01       	movw	r14, r30
     428:	0e 94 ca 11 	call	0x2394	; 0x2394 <lround>
     42c:	c6 0f       	add	r28, r22
     42e:	d7 1f       	adc	r29, r23
     430:	0f 5f       	subi	r16, 0xFF	; 255
     432:	1f 4f       	sbci	r17, 0xFF	; 255
     434:	f0 cf       	rjmp	.-32     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     436:	f6 01       	movw	r30, r12
     438:	81 91       	ld	r24, Z+
     43a:	88 23       	and	r24, r24
     43c:	19 f0       	breq	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     43e:	c8 0f       	add	r28, r24
     440:	d1 1d       	adc	r29, r1
     442:	fa cf       	rjmp	.-12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     444:	ce 01       	movw	r24, r28
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	df 90       	pop	r13
     454:	cf 90       	pop	r12
     456:	bf 90       	pop	r11
     458:	af 90       	pop	r10
     45a:	08 95       	ret

0000045c <_Z17calculateCheckSumPKciz>:
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
     464:	ae 01       	movw	r20, r28
     466:	47 5f       	subi	r20, 0xF7	; 247
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	6f 81       	ldd	r22, Y+7	; 0x07
     46c:	78 85       	ldd	r23, Y+8	; 0x08
     46e:	8d 81       	ldd	r24, Y+5	; 0x05
     470:	9e 81       	ldd	r25, Y+6	; 0x06
     472:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z23_calculateCheckSumValuePKciPv>
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <_Z11valuesToCSVPKcmiz>:
     47c:	4f 92       	push	r4
     47e:	5f 92       	push	r5
     480:	7f 92       	push	r7
     482:	8f 92       	push	r8
     484:	9f 92       	push	r9
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	ea 88       	ldd	r14, Y+18	; 0x12
     4a0:	fb 88       	ldd	r15, Y+19	; 0x13
     4a2:	8c 88       	ldd	r8, Y+20	; 0x14
     4a4:	9d 88       	ldd	r9, Y+21	; 0x15
     4a6:	ae 88       	ldd	r10, Y+22	; 0x16
     4a8:	bf 88       	ldd	r11, Y+23	; 0x17
     4aa:	c8 8c       	ldd	r12, Y+24	; 0x18
     4ac:	d9 8c       	ldd	r13, Y+25	; 0x19
     4ae:	81 14       	cp	r8, r1
     4b0:	91 04       	cpc	r9, r1
     4b2:	a1 04       	cpc	r10, r1
     4b4:	b1 04       	cpc	r11, r1
     4b6:	21 f4       	brne	.+8      	; 0x4c0 <_Z11valuesToCSVPKcmiz+0x44>
     4b8:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <millis>
     4bc:	4b 01       	movw	r8, r22
     4be:	5c 01       	movw	r10, r24
     4c0:	0e 94 93 01 	call	0x326	; 0x326 <_Z12_resetOutBufv>
     4c4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     4c8:	2a e0       	ldi	r18, 0x0A	; 10
     4ca:	ac 01       	movw	r20, r24
     4cc:	c5 01       	movw	r24, r10
     4ce:	b4 01       	movw	r22, r8
     4d0:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <__ultoa_ncheck>
     4d4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     4d8:	fc 01       	movw	r30, r24
     4da:	01 90       	ld	r0, Z+
     4dc:	00 20       	and	r0, r0
     4de:	e9 f7       	brne	.-6      	; 0x4da <_Z11valuesToCSVPKcmiz+0x5e>
     4e0:	31 97       	sbiw	r30, 0x01	; 1
     4e2:	e8 1b       	sub	r30, r24
     4e4:	f9 0b       	sbc	r31, r25
     4e6:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__data_end+0x1>
     4ea:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__data_end>
     4ee:	e1 14       	cp	r14, r1
     4f0:	f1 04       	cpc	r15, r1
     4f2:	89 f1       	breq	.+98     	; 0x556 <_Z11valuesToCSVPKcmiz+0xda>
     4f4:	f7 01       	movw	r30, r14
     4f6:	01 90       	ld	r0, Z+
     4f8:	00 20       	and	r0, r0
     4fa:	e9 f7       	brne	.-6      	; 0x4f6 <_Z11valuesToCSVPKcmiz+0x7a>
     4fc:	31 97       	sbiw	r30, 0x01	; 1
     4fe:	8f 01       	movw	r16, r30
     500:	0e 19       	sub	r16, r14
     502:	1f 09       	sbc	r17, r15
     504:	03 33       	cpi	r16, 0x33	; 51
     506:	11 05       	cpc	r17, r1
     508:	14 f0       	brlt	.+4      	; 0x50e <_Z11valuesToCSVPKcmiz+0x92>
     50a:	02 e3       	ldi	r16, 0x32	; 50
     50c:	10 e0       	ldi	r17, 0x00	; 0
     50e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     512:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__data_end>
     516:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__data_end+0x1>
     51a:	a9 01       	movw	r20, r18
     51c:	4f 5f       	subi	r20, 0xFF	; 255
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <__data_end+0x1>
     524:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <__data_end>
     528:	82 0f       	add	r24, r18
     52a:	93 1f       	adc	r25, r19
     52c:	2c e2       	ldi	r18, 0x2C	; 44
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
     532:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     536:	a0 90 1a 02 	lds	r10, 0x021A	; 0x80021a <__data_end>
     53a:	b0 90 1b 02 	lds	r11, 0x021B	; 0x80021b <__data_end+0x1>
     53e:	a8 01       	movw	r20, r16
     540:	b7 01       	movw	r22, r14
     542:	8a 0d       	add	r24, r10
     544:	9b 1d       	adc	r25, r11
     546:	0e 94 5f 1b 	call	0x36be	; 0x36be <memcpy>
     54a:	0a 0d       	add	r16, r10
     54c:	1b 1d       	adc	r17, r11
     54e:	10 93 1b 02 	sts	0x021B, r17	; 0x80021b <__data_end+0x1>
     552:	00 93 1a 02 	sts	0x021A, r16	; 0x80021a <__data_end>
     556:	ce 01       	movw	r24, r28
     558:	4a 96       	adiw	r24, 0x1a	; 26
     55a:	2c 01       	movw	r4, r24
     55c:	a1 2c       	mov	r10, r1
     55e:	b1 2c       	mov	r11, r1
     560:	8c e2       	ldi	r24, 0x2C	; 44
     562:	78 2e       	mov	r7, r24
     564:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__data_end>
     568:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__data_end+0x1>
     56c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <OUTPUT_BUF_SIZE>
     570:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <OUTPUT_BUF_SIZE+0x1>
     574:	ac 14       	cp	r10, r12
     576:	bd 04       	cpc	r11, r13
     578:	f4 f5       	brge	.+124    	; 0x5f6 <_Z11valuesToCSVPKcmiz+0x17a>
     57a:	ac 01       	movw	r20, r24
     57c:	49 50       	subi	r20, 0x09	; 9
     57e:	51 09       	sbc	r21, r1
     580:	24 17       	cp	r18, r20
     582:	35 07       	cpc	r19, r21
     584:	c4 f5       	brge	.+112    	; 0x5f6 <_Z11valuesToCSVPKcmiz+0x17a>
     586:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     58a:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__data_end>
     58e:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__data_end+0x1>
     592:	a9 01       	movw	r20, r18
     594:	4f 5f       	subi	r20, 0xFF	; 255
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <__data_end+0x1>
     59c:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <__data_end>
     5a0:	82 0f       	add	r24, r18
     5a2:	93 1f       	adc	r25, r19
     5a4:	fc 01       	movw	r30, r24
     5a6:	70 82       	st	Z, r7
     5a8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     5ac:	42 01       	movw	r8, r4
     5ae:	f4 e0       	ldi	r31, 0x04	; 4
     5b0:	8f 0e       	add	r8, r31
     5b2:	91 1c       	adc	r9, r1
     5b4:	00 91 1a 02 	lds	r16, 0x021A	; 0x80021a <__data_end>
     5b8:	10 91 1b 02 	lds	r17, 0x021B	; 0x80021b <__data_end+0x1>
     5bc:	08 0f       	add	r16, r24
     5be:	19 1f       	adc	r17, r25
     5c0:	f2 01       	movw	r30, r4
     5c2:	60 81       	ld	r22, Z
     5c4:	71 81       	ldd	r23, Z+1	; 0x01
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	93 81       	ldd	r25, Z+3	; 0x03
     5ca:	23 e0       	ldi	r18, 0x03	; 3
     5cc:	42 e0       	ldi	r20, 0x02	; 2
     5ce:	0e 94 17 1a 	call	0x342e	; 0x342e <dtostrf>
     5d2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     5d6:	fc 01       	movw	r30, r24
     5d8:	01 90       	ld	r0, Z+
     5da:	00 20       	and	r0, r0
     5dc:	e9 f7       	brne	.-6      	; 0x5d8 <_Z11valuesToCSVPKcmiz+0x15c>
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	e8 1b       	sub	r30, r24
     5e2:	f9 0b       	sbc	r31, r25
     5e4:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__data_end+0x1>
     5e8:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__data_end>
     5ec:	ff ef       	ldi	r31, 0xFF	; 255
     5ee:	af 1a       	sub	r10, r31
     5f0:	bf 0a       	sbc	r11, r31
     5f2:	24 01       	movw	r4, r8
     5f4:	b7 cf       	rjmp	.-146    	; 0x564 <_Z11valuesToCSVPKcmiz+0xe8>
     5f6:	0a 97       	sbiw	r24, 0x0a	; 10
     5f8:	28 17       	cp	r18, r24
     5fa:	39 07       	cpc	r19, r25
     5fc:	9c f5       	brge	.+102    	; 0x664 <_Z11valuesToCSVPKcmiz+0x1e8>
     5fe:	ae 01       	movw	r20, r28
     600:	46 5e       	subi	r20, 0xE6	; 230
     602:	5f 4f       	sbci	r21, 0xFF	; 255
     604:	b6 01       	movw	r22, r12
     606:	c7 01       	movw	r24, r14
     608:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z23_calculateCheckSumValuePKciPv>
     60c:	8c 01       	movw	r16, r24
     60e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     612:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__data_end>
     616:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__data_end+0x1>
     61a:	a9 01       	movw	r20, r18
     61c:	4f 5f       	subi	r20, 0xFF	; 255
     61e:	5f 4f       	sbci	r21, 0xFF	; 255
     620:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <__data_end+0x1>
     624:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <__data_end>
     628:	82 0f       	add	r24, r18
     62a:	93 1f       	adc	r25, r19
     62c:	2c e2       	ldi	r18, 0x2C	; 44
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18
     632:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     636:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <__data_end>
     63a:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <__data_end+0x1>
     63e:	68 0f       	add	r22, r24
     640:	79 1f       	adc	r23, r25
     642:	4a e0       	ldi	r20, 0x0A	; 10
     644:	c8 01       	movw	r24, r16
     646:	0e 94 6f 1b 	call	0x36de	; 0x36de <__itoa_ncheck>
     64a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     64e:	fc 01       	movw	r30, r24
     650:	01 90       	ld	r0, Z+
     652:	00 20       	and	r0, r0
     654:	e9 f7       	brne	.-6      	; 0x650 <_Z11valuesToCSVPKcmiz+0x1d4>
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	e8 1b       	sub	r30, r24
     65a:	f9 0b       	sbc	r31, r25
     65c:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__data_end+0x1>
     660:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__data_end>
     664:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     668:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__data_end>
     66c:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__data_end+0x1>
     670:	a9 01       	movw	r20, r18
     672:	4f 5f       	subi	r20, 0xFF	; 255
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <__data_end+0x1>
     67a:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <__data_end>
     67e:	82 0f       	add	r24, r18
     680:	93 1f       	adc	r25, r19
     682:	2a e0       	ldi	r18, 0x0A	; 10
     684:	fc 01       	movw	r30, r24
     686:	20 83       	st	Z, r18
     688:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	bf 90       	pop	r11
     69e:	af 90       	pop	r10
     6a0:	9f 90       	pop	r9
     6a2:	8f 90       	pop	r8
     6a4:	7f 90       	pop	r7
     6a6:	5f 90       	pop	r5
     6a8:	4f 90       	pop	r4
     6aa:	08 95       	ret

000006ac <_ZN8Magnetic5toCSVEPKc>:
     6ac:	fc 01       	movw	r30, r24
     6ae:	96 2f       	mov	r25, r22
     6b0:	27 2f       	mov	r18, r23
     6b2:	46 81       	ldd	r20, Z+6	; 0x06
     6b4:	57 81       	ldd	r21, Z+7	; 0x07
     6b6:	60 85       	ldd	r22, Z+8	; 0x08
     6b8:	71 85       	ldd	r23, Z+9	; 0x09
     6ba:	41 15       	cp	r20, r1
     6bc:	51 05       	cpc	r21, r1
     6be:	61 05       	cpc	r22, r1
     6c0:	71 05       	cpc	r23, r1
     6c2:	69 f1       	breq	.+90     	; 0x71e <_ZN8Magnetic5toCSVEPKc+0x72>
     6c4:	87 89       	ldd	r24, Z+23	; 0x17
     6c6:	8f 93       	push	r24
     6c8:	86 89       	ldd	r24, Z+22	; 0x16
     6ca:	8f 93       	push	r24
     6cc:	85 89       	ldd	r24, Z+21	; 0x15
     6ce:	8f 93       	push	r24
     6d0:	84 89       	ldd	r24, Z+20	; 0x14
     6d2:	8f 93       	push	r24
     6d4:	83 89       	ldd	r24, Z+19	; 0x13
     6d6:	8f 93       	push	r24
     6d8:	82 89       	ldd	r24, Z+18	; 0x12
     6da:	8f 93       	push	r24
     6dc:	81 89       	ldd	r24, Z+17	; 0x11
     6de:	8f 93       	push	r24
     6e0:	80 89       	ldd	r24, Z+16	; 0x10
     6e2:	8f 93       	push	r24
     6e4:	87 85       	ldd	r24, Z+15	; 0x0f
     6e6:	8f 93       	push	r24
     6e8:	86 85       	ldd	r24, Z+14	; 0x0e
     6ea:	8f 93       	push	r24
     6ec:	85 85       	ldd	r24, Z+13	; 0x0d
     6ee:	8f 93       	push	r24
     6f0:	84 85       	ldd	r24, Z+12	; 0x0c
     6f2:	8f 93       	push	r24
     6f4:	1f 92       	push	r1
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	8f 93       	push	r24
     6fa:	7f 93       	push	r23
     6fc:	6f 93       	push	r22
     6fe:	5f 93       	push	r21
     700:	4f 93       	push	r20
     702:	2f 93       	push	r18
     704:	9f 93       	push	r25
     706:	0e 94 3e 02 	call	0x47c	; 0x47c <_Z11valuesToCSVPKcmiz>
     70a:	2d b7       	in	r18, 0x3d	; 61
     70c:	3e b7       	in	r19, 0x3e	; 62
     70e:	2c 5e       	subi	r18, 0xEC	; 236
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	3e bf       	out	0x3e, r19	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	2d bf       	out	0x3d, r18	; 61
     71c:	08 95       	ret
     71e:	8d ef       	ldi	r24, 0xFD	; 253
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	08 95       	ret

00000724 <_Z15_writeJSONValuePcPKcS1_f>:
     724:	4f 92       	push	r4
     726:	5f 92       	push	r5
     728:	6f 92       	push	r6
     72a:	7f 92       	push	r7
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	c0 57       	subi	r28, 0x70	; 112
     74a:	d1 09       	sbc	r29, r1
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	db 01       	movw	r26, r22
     758:	0d 90       	ld	r0, X+
     75a:	00 20       	and	r0, r0
     75c:	e9 f7       	brne	.-6      	; 0x758 <_Z15_writeJSONValuePcPKcS1_f+0x34>
     75e:	11 97       	sbiw	r26, 0x01	; 1
     760:	7d 01       	movw	r14, r26
     762:	e6 1a       	sub	r14, r22
     764:	f7 0a       	sbc	r15, r23
     766:	da 01       	movw	r26, r20
     768:	0d 90       	ld	r0, X+
     76a:	00 20       	and	r0, r0
     76c:	e9 f7       	brne	.-6      	; 0x768 <_Z15_writeJSONValuePcPKcS1_f+0x44>
     76e:	11 97       	sbiw	r26, 0x01	; 1
     770:	a4 1b       	sub	r26, r20
     772:	b5 0b       	sbc	r27, r21
     774:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__data_end>
     778:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <__data_end+0x1>
     77c:	3a 96       	adiw	r30, 0x0a	; 10
     77e:	ee 0d       	add	r30, r14
     780:	ff 1d       	adc	r31, r15
     782:	ea 0f       	add	r30, r26
     784:	fb 1f       	adc	r31, r27
     786:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <OUTPUT_BUF_SIZE>
     78a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <OUTPUT_BUF_SIZE+0x1>
     78e:	ae 17       	cp	r26, r30
     790:	bf 07       	cpc	r27, r31
     792:	08 f4       	brcc	.+2      	; 0x796 <_Z15_writeJSONValuePcPKcS1_f+0x72>
     794:	50 c0       	rjmp	.+160    	; 0x836 <_Z15_writeJSONValuePcPKcS1_f+0x112>
     796:	e2 2f       	mov	r30, r18
     798:	f1 2f       	mov	r31, r17
     79a:	a0 2f       	mov	r26, r16
     79c:	c5 2e       	mov	r12, r21
     79e:	d4 2e       	mov	r13, r20
     7a0:	e7 2e       	mov	r14, r23
     7a2:	f6 2e       	mov	r15, r22
     7a4:	a9 2e       	mov	r10, r25
     7a6:	b8 2e       	mov	r11, r24
     7a8:	4e 01       	movw	r8, r28
     7aa:	21 e5       	ldi	r18, 0x51	; 81
     7ac:	82 0e       	add	r8, r18
     7ae:	91 1c       	adc	r9, r1
     7b0:	84 01       	movw	r16, r8
     7b2:	22 e0       	ldi	r18, 0x02	; 2
     7b4:	44 e0       	ldi	r20, 0x04	; 4
     7b6:	7a 2e       	mov	r7, r26
     7b8:	6f 2e       	mov	r6, r31
     7ba:	5e 2e       	mov	r5, r30
     7bc:	43 2e       	mov	r4, r19
     7be:	6a 2f       	mov	r22, r26
     7c0:	7f 2f       	mov	r23, r31
     7c2:	8e 2f       	mov	r24, r30
     7c4:	93 2f       	mov	r25, r19
     7c6:	0e 94 17 1a 	call	0x342e	; 0x342e <dtostrf>
     7ca:	6e eb       	ldi	r22, 0xBE	; 190
     7cc:	71 e0       	ldi	r23, 0x01	; 1
     7ce:	00 55       	subi	r16, 0x50	; 80
     7d0:	11 09       	sbc	r17, r1
     7d2:	c8 01       	movw	r24, r16
     7d4:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <strcpy_P>
     7d8:	4f 92       	push	r4
     7da:	5f 92       	push	r5
     7dc:	6f 92       	push	r6
     7de:	7f 92       	push	r7
     7e0:	1f 92       	push	r1
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	8f 93       	push	r24
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0e 94 2e 02 	call	0x45c	; 0x45c <_Z17calculateCheckSumPKciz>
     7ee:	1f 92       	push	r1
     7f0:	2c e7       	ldi	r18, 0x7C	; 124
     7f2:	2f 93       	push	r18
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	9f 92       	push	r9
     7fa:	8f 92       	push	r8
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	1f 92       	push	r1
     806:	8e e7       	ldi	r24, 0x7E	; 126
     808:	8f 93       	push	r24
     80a:	1f 93       	push	r17
     80c:	0f 93       	push	r16
     80e:	af 92       	push	r10
     810:	bf 92       	push	r11
     812:	0e 94 b6 1b 	call	0x376c	; 0x376c <sprintf>
     816:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__data_end>
     81a:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__data_end+0x1>
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <__data_end+0x1>
     826:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end>
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	02 c0       	rjmp	.+4      	; 0x83a <_Z15_writeJSONValuePcPKcS1_f+0x116>
     836:	8f ef       	ldi	r24, 0xFF	; 255
     838:	9f ef       	ldi	r25, 0xFF	; 255
     83a:	c0 59       	subi	r28, 0x90	; 144
     83c:	df 4f       	sbci	r29, 0xFF	; 255
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	bf 90       	pop	r11
     85a:	af 90       	pop	r10
     85c:	9f 90       	pop	r9
     85e:	8f 90       	pop	r8
     860:	7f 90       	pop	r7
     862:	6f 90       	pop	r6
     864:	5f 90       	pop	r5
     866:	4f 90       	pop	r4
     868:	08 95       	ret

0000086a <_Z12valuesToJSONPKchiz>:
     86a:	2f 92       	push	r2
     86c:	3f 92       	push	r3
     86e:	4f 92       	push	r4
     870:	5f 92       	push	r5
     872:	6f 92       	push	r6
     874:	7f 92       	push	r7
     876:	8f 92       	push	r8
     878:	9f 92       	push	r9
     87a:	af 92       	push	r10
     87c:	bf 92       	push	r11
     87e:	cf 92       	push	r12
     880:	df 92       	push	r13
     882:	ef 92       	push	r14
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	2d 97       	sbiw	r28, 0x0d	; 13
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	2a a1       	ldd	r18, Y+34	; 0x22
     8a0:	2e 83       	std	Y+6, r18	; 0x06
     8a2:	3b a1       	ldd	r19, Y+35	; 0x23
     8a4:	3f 83       	std	Y+7, r19	; 0x07
     8a6:	8d b7       	in	r24, 0x3d	; 61
     8a8:	9e b7       	in	r25, 0x3e	; 62
     8aa:	9d 87       	std	Y+13, r25	; 0x0d
     8ac:	8c 87       	std	Y+12, r24	; 0x0c
     8ae:	f9 01       	movw	r30, r18
     8b0:	df 01       	movw	r26, r30
     8b2:	0d 90       	ld	r0, X+
     8b4:	00 20       	and	r0, r0
     8b6:	e9 f7       	brne	.-6      	; 0x8b2 <_Z12valuesToJSONPKchiz+0x48>
     8b8:	11 97       	sbiw	r26, 0x01	; 1
     8ba:	1d 01       	movw	r2, r26
     8bc:	2e 1a       	sub	r2, r30
     8be:	3f 0a       	sbc	r3, r31
     8c0:	6e e1       	ldi	r22, 0x1E	; 30
     8c2:	72 e0       	ldi	r23, 0x02	; 2
     8c4:	9e 01       	movw	r18, r28
     8c6:	2f 5f       	subi	r18, 0xFF	; 255
     8c8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ca:	59 01       	movw	r10, r18
     8cc:	c9 01       	movw	r24, r18
     8ce:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <strcpy_P>
     8d2:	0e 94 93 01 	call	0x326	; 0x326 <_Z12_resetOutBufv>
     8d6:	fe 01       	movw	r30, r28
     8d8:	b7 96       	adiw	r30, 0x27	; 39
     8da:	c1 2c       	mov	r12, r1
     8dc:	d1 2c       	mov	r13, r1
     8de:	32 e0       	ldi	r19, 0x02	; 2
     8e0:	23 0e       	add	r2, r19
     8e2:	31 1c       	adc	r3, r1
     8e4:	8d a1       	ldd	r24, Y+37	; 0x25
     8e6:	9e a1       	ldd	r25, Y+38	; 0x26
     8e8:	c8 16       	cp	r12, r24
     8ea:	d9 06       	cpc	r13, r25
     8ec:	0c f0       	brlt	.+2      	; 0x8f0 <_Z12valuesToJSONPKchiz+0x86>
     8ee:	50 c0       	rjmp	.+160    	; 0x990 <__stack+0x91>
     8f0:	2d b7       	in	r18, 0x3d	; 61
     8f2:	3e b7       	in	r19, 0x3e	; 62
     8f4:	3b 87       	std	Y+11, r19	; 0x0b
     8f6:	2a 87       	std	Y+10, r18	; 0x0a
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	9f 01       	movw	r18, r30
     8fe:	2a 5f       	subi	r18, 0xFA	; 250
     900:	3f 4f       	sbci	r19, 0xFF	; 255
     902:	39 87       	std	Y+9, r19	; 0x09
     904:	28 87       	std	Y+8, r18	; 0x08
     906:	42 80       	ldd	r4, Z+2	; 0x02
     908:	53 80       	ldd	r5, Z+3	; 0x03
     90a:	64 80       	ldd	r6, Z+4	; 0x04
     90c:	75 80       	ldd	r7, Z+5	; 0x05
     90e:	dc 01       	movw	r26, r24
     910:	fd 01       	movw	r30, r26
     912:	01 90       	ld	r0, Z+
     914:	00 20       	and	r0, r0
     916:	e9 f7       	brne	.-6      	; 0x912 <__stack+0x13>
     918:	31 97       	sbiw	r30, 0x01	; 1
     91a:	ea 1b       	sub	r30, r26
     91c:	fb 0b       	sbc	r31, r27
     91e:	e2 0d       	add	r30, r2
     920:	f3 1d       	adc	r31, r3
     922:	2d b7       	in	r18, 0x3d	; 61
     924:	3e b7       	in	r19, 0x3e	; 62
     926:	2e 1b       	sub	r18, r30
     928:	3f 0b       	sbc	r19, r31
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	3e bf       	out	0x3e, r19	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	2d bf       	out	0x3d, r18	; 61
     934:	2f 5f       	subi	r18, 0xFF	; 255
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	79 01       	movw	r14, r18
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	3f 81       	ldd	r19, Y+7	; 0x07
     940:	3f 93       	push	r19
     942:	8e 81       	ldd	r24, Y+6	; 0x06
     944:	8f 93       	push	r24
     946:	bf 92       	push	r11
     948:	af 92       	push	r10
     94a:	ff 92       	push	r15
     94c:	ef 92       	push	r14
     94e:	0e 94 b6 1b 	call	0x376c	; 0x376c <sprintf>
     952:	8c a1       	ldd	r24, Y+36	; 0x24
     954:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z11unit_to_strh>
     958:	4c 01       	movw	r8, r24
     95a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     95e:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__data_end>
     962:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <__data_end+0x1>
     966:	93 01       	movw	r18, r6
     968:	82 01       	movw	r16, r4
     96a:	a4 01       	movw	r20, r8
     96c:	b7 01       	movw	r22, r14
     96e:	8e 0f       	add	r24, r30
     970:	9f 1f       	adc	r25, r31
     972:	0e 94 92 03 	call	0x724	; 0x724 <_Z15_writeJSONValuePcPKcS1_f>
     976:	2a 85       	ldd	r18, Y+10	; 0x0a
     978:	3b 85       	ldd	r19, Y+11	; 0x0b
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	3e bf       	out	0x3e, r19	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	2d bf       	out	0x3d, r18	; 61
     984:	3f ef       	ldi	r19, 0xFF	; 255
     986:	c3 1a       	sub	r12, r19
     988:	d3 0a       	sbc	r13, r19
     98a:	e8 85       	ldd	r30, Y+8	; 0x08
     98c:	f9 85       	ldd	r31, Y+9	; 0x09
     98e:	aa cf       	rjmp	.-172    	; 0x8e4 <_Z12valuesToJSONPKchiz+0x7a>
     990:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     994:	2c 85       	ldd	r18, Y+12	; 0x0c
     996:	3d 85       	ldd	r19, Y+13	; 0x0d
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	3e bf       	out	0x3e, r19	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	2d bf       	out	0x3d, r18	; 61
     9a2:	2d 96       	adiw	r28, 0x0d	; 13
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	3f 90       	pop	r3
     9d0:	2f 90       	pop	r2
     9d2:	08 95       	ret

000009d4 <_ZN8Magnetic6toJSONEPKc>:
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	fc 01       	movw	r30, r24
     9da:	06 81       	ldd	r16, Z+6	; 0x06
     9dc:	17 81       	ldd	r17, Z+7	; 0x07
     9de:	20 85       	ldd	r18, Z+8	; 0x08
     9e0:	31 85       	ldd	r19, Z+9	; 0x09
     9e2:	01 2b       	or	r16, r17
     9e4:	02 2b       	or	r16, r18
     9e6:	03 2b       	or	r16, r19
     9e8:	b9 f1       	breq	.+110    	; 0xa58 <_ZN8Magnetic6toJSONEPKc+0x84>
     9ea:	87 89       	ldd	r24, Z+23	; 0x17
     9ec:	8f 93       	push	r24
     9ee:	86 89       	ldd	r24, Z+22	; 0x16
     9f0:	8f 93       	push	r24
     9f2:	85 89       	ldd	r24, Z+21	; 0x15
     9f4:	8f 93       	push	r24
     9f6:	84 89       	ldd	r24, Z+20	; 0x14
     9f8:	8f 93       	push	r24
     9fa:	8c e0       	ldi	r24, 0x0C	; 12
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	9f 93       	push	r25
     a00:	8f 93       	push	r24
     a02:	83 89       	ldd	r24, Z+19	; 0x13
     a04:	8f 93       	push	r24
     a06:	82 89       	ldd	r24, Z+18	; 0x12
     a08:	8f 93       	push	r24
     a0a:	81 89       	ldd	r24, Z+17	; 0x11
     a0c:	8f 93       	push	r24
     a0e:	80 89       	ldd	r24, Z+16	; 0x10
     a10:	8f 93       	push	r24
     a12:	8e e0       	ldi	r24, 0x0E	; 14
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	87 85       	ldd	r24, Z+15	; 0x0f
     a1c:	8f 93       	push	r24
     a1e:	86 85       	ldd	r24, Z+14	; 0x0e
     a20:	8f 93       	push	r24
     a22:	85 85       	ldd	r24, Z+13	; 0x0d
     a24:	8f 93       	push	r24
     a26:	84 85       	ldd	r24, Z+12	; 0x0c
     a28:	8f 93       	push	r24
     a2a:	80 e1       	ldi	r24, 0x10	; 16
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	1f 92       	push	r1
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	8f 93       	push	r24
     a38:	84 81       	ldd	r24, Z+4	; 0x04
     a3a:	8f 93       	push	r24
     a3c:	7f 93       	push	r23
     a3e:	6f 93       	push	r22
     a40:	0e 94 35 04 	call	0x86a	; 0x86a <_Z12valuesToJSONPKchiz>
     a44:	2d b7       	in	r18, 0x3d	; 61
     a46:	3e b7       	in	r19, 0x3e	; 62
     a48:	29 5e       	subi	r18, 0xE9	; 233
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	3e bf       	out	0x3e, r19	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	2d bf       	out	0x3d, r18	; 61
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <_ZN8Magnetic6toJSONEPKc+0x88>
     a58:	8d ef       	ldi	r24, 0xFD	; 253
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	08 95       	ret

00000a62 <_ZN6Sensor5beginEv>:
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
     a68:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <catchSpaceboard>
     a6c:	e8 81       	ld	r30, Y
     a6e:	f9 81       	ldd	r31, Y+1	; 0x01
     a70:	01 90       	ld	r0, Z+
     a72:	f0 81       	ld	r31, Z
     a74:	e0 2d       	mov	r30, r0
     a76:	ce 01       	movw	r24, r28
     a78:	09 95       	icall
     a7a:	8a 87       	std	Y+10, r24	; 0x0a
     a7c:	81 11       	cpse	r24, r1
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <_ZN6Sensor5beginEv+0x2a>
     a80:	6a 81       	ldd	r22, Y+2	; 0x02
     a82:	7b 81       	ldd	r23, Y+3	; 0x03
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z18_writeErrorMessagePKcS0_>
     a8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <_ZN6Sensor4readEv>:
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	fc 01       	movw	r30, r24
     a9a:	22 85       	ldd	r18, Z+10	; 0x0a
     a9c:	22 23       	and	r18, r18
     a9e:	81 f0       	breq	.+32     	; 0xac0 <_ZN6Sensor4readEv+0x2c>
     aa0:	ec 01       	movw	r28, r24
     aa2:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <millis>
     aa6:	6e 83       	std	Y+6, r22	; 0x06
     aa8:	7f 83       	std	Y+7, r23	; 0x07
     aaa:	88 87       	std	Y+8, r24	; 0x08
     aac:	99 87       	std	Y+9, r25	; 0x09
     aae:	e8 81       	ld	r30, Y
     ab0:	f9 81       	ldd	r31, Y+1	; 0x01
     ab2:	02 80       	ldd	r0, Z+2	; 0x02
     ab4:	f3 81       	ldd	r31, Z+3	; 0x03
     ab6:	e0 2d       	mov	r30, r0
     ab8:	ce 01       	movw	r24, r28
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	09 94       	ijmp
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <_ZN8MagneticC1Ev>:
 *     Magnetic mag;                          // Instantiate sensor object
 *     mag.begin();                           // Initialize sensor
 *     Serial.println(mag.readToJSON("mag")); // Read and print values in JSON
 * @endcode
 *****************************************************************************/
Magnetic::Magnetic(void) :
     ac8:	fc 01       	movw	r30, r24
  gaussScale(LSM303_MAG_SCALE4GAUSS)
     aca:	87 e7       	ldi	r24, 0x77	; 119
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	91 83       	std	Z+1, r25	; 0x01
     ad0:	80 83       	st	Z, r24
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	83 87       	std	Z+11, r24	; 0x0b
 *          and need a Sensor Constructor they can be passed to. However, this
 *          constructor causes more memory overhead than it was decided to be
 *          worth. Which is why they're explicitly set instead of initialized.
 */
void Sensor::initializeHeader(sensor_id_t sensor_id, data_unit_t unit, const char name[] PROGMEM) {
  this->name = name;
     ad6:	26 ef       	ldi	r18, 0xF6	; 246
     ad8:	31 e0       	ldi	r19, 0x01	; 1
     ada:	33 83       	std	Z+3, r19	; 0x03
     adc:	22 83       	std	Z+2, r18	; 0x02
  this->header.sensor_id = sensor_id;
     ade:	94 e0       	ldi	r25, 0x04	; 4
     ae0:	95 83       	std	Z+5, r25	; 0x05
  this->header.unit = unit;
     ae2:	84 83       	std	Z+4, r24	; 0x04
  this->header.timestamp = 0;
     ae4:	16 82       	std	Z+6, r1	; 0x06
     ae6:	17 82       	std	Z+7, r1	; 0x07
     ae8:	10 86       	std	Z+8, r1	; 0x08
     aea:	11 86       	std	Z+9, r1	; 0x09
  this->initialized = false;
     aec:	12 86       	std	Z+10, r1	; 0x0a
     aee:	08 95       	ret

00000af0 <_ZN15Adafruit_SI1145C1Ev>:
#define read8(reg, val) readFromRegAddr(_addr, reg, val, 1, BIG_ENDIAN)
#define read16(reg, val) readFromRegAddr(_addr, reg, val, 2, BIG_ENDIAN)
#define write8(reg, val) writeToRegAddr(_addr, reg, val, 1, BIG_ENDIAN)

Adafruit_SI1145::Adafruit_SI1145() {
  _addr = SI1145_ADDR;
     af0:	20 e6       	ldi	r18, 0x60	; 96
     af2:	fc 01       	movw	r30, r24
     af4:	20 83       	st	Z, r18
     af6:	08 95       	ret

00000af8 <_ZN17Adafruit_TCS34725C1E25tcs34725IntegrationTime_t14tcs34725Gain_t>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_TCS34725::Adafruit_TCS34725(tcs34725IntegrationTime_t it, tcs34725Gain_t gain) 
     af8:	fc 01       	movw	r30, r24
{
  _tcs34725Initialised = false;
     afa:	10 82       	st	Z, r1
  _tcs34725IntegrationTime = it;
     afc:	62 83       	std	Z+2, r22	; 0x02
  _tcs34725Gain = gain;
     afe:	41 83       	std	Z+1, r20	; 0x01
     b00:	08 95       	ret

00000b02 <_Z15readFromRegAddrhhPvj8endian_e>:
 * @param length number of bytes to read
 *
 * @return 0 on success, other on failure
 */
int readFromRegAddr(uint8_t devAddr, uint8_t reg, void *val, size_t length, endian_e endianness)
{
     b02:	af 92       	push	r10
     b04:	bf 92       	push	r11
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	d8 2e       	mov	r13, r24
     b16:	c6 2e       	mov	r12, r22
     b18:	7a 01       	movw	r14, r20
     b1a:	e9 01       	movw	r28, r18
  uint8_t *byteArray = (uint8_t *) val;
  int ret;
  int readData = 0;

  Wire.beginTransmission(devAddr);
     b1c:	68 2f       	mov	r22, r24
     b1e:	81 e5       	ldi	r24, 0x51	; 81
     b20:	93 e0       	ldi	r25, 0x03	; 3
     b22:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7TwoWire17beginTransmissionEh>

  if (Wire.write(reg) < 1) {
     b26:	6c 2d       	mov	r22, r12
     b28:	81 e5       	ldi	r24, 0x51	; 81
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_ZN7TwoWire5writeEh>
     b30:	89 2b       	or	r24, r25
     b32:	41 f1       	breq	.+80     	; 0xb84 <_Z15readFromRegAddrhhPvj8endian_e+0x82>
    return -1;
  }

  if ((ret = Wire.endTransmission(false)) != 0) {
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	81 e5       	ldi	r24, 0x51	; 81
     b38:	93 e0       	ldi	r25, 0x03	; 3
     b3a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <_ZN7TwoWire15endTransmissionEh>
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	09 f0       	breq	.+2      	; 0xb46 <_Z15readFromRegAddrhhPvj8endian_e+0x44>
     b44:	3f c0       	rjmp	.+126    	; 0xbc4 <_Z15readFromRegAddrhhPvj8endian_e+0xc2>
    return ret;
  }

  if (byteArray == NULL || length == 0) {
     b46:	e1 14       	cp	r14, r1
     b48:	f1 04       	cpc	r15, r1
     b4a:	f9 f0       	breq	.+62     	; 0xb8a <_Z15readFromRegAddrhhPvj8endian_e+0x88>
     b4c:	20 97       	sbiw	r28, 0x00	; 0
     b4e:	e9 f0       	breq	.+58     	; 0xb8a <_Z15readFromRegAddrhhPvj8endian_e+0x88>
    return 0;
  }

  Wire.beginTransmission(devAddr);
     b50:	6d 2d       	mov	r22, r13
     b52:	81 e5       	ldi	r24, 0x51	; 81
     b54:	93 e0       	ldi	r25, 0x03	; 3
     b56:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7TwoWire17beginTransmissionEh>
  Wire.requestFrom(devAddr, (uint8_t) length);
     b5a:	4c 2f       	mov	r20, r28
     b5c:	6d 2d       	mov	r22, r13
     b5e:	81 e5       	ldi	r24, 0x51	; 81
     b60:	93 e0       	ldi	r25, 0x03	; 3
     b62:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <_ZN7TwoWire11requestFromEhh>
     b66:	21 97       	sbiw	r28, 0x01	; 1
 */
int readFromRegAddr(uint8_t devAddr, uint8_t reg, void *val, size_t length, endian_e endianness)
{
  uint8_t *byteArray = (uint8_t *) val;
  int ret;
  int readData = 0;
     b68:	a1 2c       	mov	r10, r1
     b6a:	b1 2c       	mov	r11, r1
  }

  Wire.beginTransmission(devAddr);
  Wire.requestFrom(devAddr, (uint8_t) length);

  while (Wire.available() > 0 && readData < length) {
     b6c:	81 e5       	ldi	r24, 0x51	; 81
     b6e:	93 e0       	ldi	r25, 0x03	; 3
     b70:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN7TwoWire9availableEv>
     b74:	18 16       	cp	r1, r24
     b76:	19 06       	cpc	r1, r25
     b78:	5c f4       	brge	.+22     	; 0xb90 <_Z15readFromRegAddrhhPvj8endian_e+0x8e>
     b7a:	cf 3f       	cpi	r28, 0xFF	; 255
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	d8 07       	cpc	r29, r24
     b80:	71 f4       	brne	.+28     	; 0xb9e <_Z15readFromRegAddrhhPvj8endian_e+0x9c>
     b82:	06 c0       	rjmp	.+12     	; 0xb90 <_Z15readFromRegAddrhhPvj8endian_e+0x8e>
  int readData = 0;

  Wire.beginTransmission(devAddr);

  if (Wire.write(reg) < 1) {
    return -1;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	1d c0       	rjmp	.+58     	; 0xbc4 <_Z15readFromRegAddrhhPvj8endian_e+0xc2>
  if ((ret = Wire.endTransmission(false)) != 0) {
    return ret;
  }

  if (byteArray == NULL || length == 0) {
    return 0;
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	1a c0       	rjmp	.+52     	; 0xbc4 <_Z15readFromRegAddrhhPvj8endian_e+0xc2>
  while (Wire.available() > 0 && readData < length) {
    byteArray[endianness == BIG_ENDIAN ? readData : length - 1 - readData] = Wire.read();
    readData++;
  }

  if ((ret = Wire.endTransmission(true)) != 0) {
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	81 e5       	ldi	r24, 0x51	; 81
     b94:	93 e0       	ldi	r25, 0x03	; 3
     b96:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <_ZN7TwoWire15endTransmissionEh>
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	13 c0       	rjmp	.+38     	; 0xbc4 <_Z15readFromRegAddrhhPvj8endian_e+0xc2>

  Wire.beginTransmission(devAddr);
  Wire.requestFrom(devAddr, (uint8_t) length);

  while (Wire.available() > 0 && readData < length) {
    byteArray[endianness == BIG_ENDIAN ? readData : length - 1 - readData] = Wire.read();
     b9e:	00 23       	and	r16, r16
     ba0:	79 f0       	breq	.+30     	; 0xbc0 <_Z15readFromRegAddrhhPvj8endian_e+0xbe>
     ba2:	ce 01       	movw	r24, r28
     ba4:	67 01       	movw	r12, r14
     ba6:	c8 0e       	add	r12, r24
     ba8:	d9 1e       	adc	r13, r25
     baa:	81 e5       	ldi	r24, 0x51	; 81
     bac:	93 e0       	ldi	r25, 0x03	; 3
     bae:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
     bb2:	f6 01       	movw	r30, r12
     bb4:	80 83       	st	Z, r24
    readData++;
     bb6:	ff ef       	ldi	r31, 0xFF	; 255
     bb8:	af 1a       	sub	r10, r31
     bba:	bf 0a       	sbc	r11, r31
     bbc:	21 97       	sbiw	r28, 0x01	; 1
  }

  Wire.beginTransmission(devAddr);
  Wire.requestFrom(devAddr, (uint8_t) length);

  while (Wire.available() > 0 && readData < length) {
     bbe:	d6 cf       	rjmp	.-84     	; 0xb6c <_Z15readFromRegAddrhhPvj8endian_e+0x6a>
    byteArray[endianness == BIG_ENDIAN ? readData : length - 1 - readData] = Wire.read();
     bc0:	c5 01       	movw	r24, r10
     bc2:	f0 cf       	rjmp	.-32     	; 0xba4 <_Z15readFromRegAddrhhPvj8endian_e+0xa2>
  if ((ret = Wire.endTransmission(true)) != 0) {
    return ret;
  }

  return 0;
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	bf 90       	pop	r11
     bd4:	af 90       	pop	r10
     bd6:	08 95       	ret

00000bd8 <catchSpaceboard>:
  float UVindex = si1132_uv.readUV();

  // the index is multiplied by 100 so to get the integer index, divide by 100
  UVindex /= 100.0;
  return UVindex;
}
     bd8:	0f 93       	push	r16
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <catchSpaceboard+0x8>
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <ARDUSAT_SPACEBOARD>
     be8:	81 11       	cpse	r24, r1
     bea:	26 c0       	rjmp	.+76     	; 0xc38 <catchSpaceboard+0x60>
     bec:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <MANUAL_CONFIG>
     bf0:	81 11       	cpse	r24, r1
     bf2:	22 c0       	rjmp	.+68     	; 0xc38 <catchSpaceboard+0x60>
     bf4:	81 e5       	ldi	r24, 0x51	; 81
     bf6:	93 e0       	ldi	r25, 0x03	; 3
     bf8:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN7TwoWire5beginEv>
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	21 e0       	ldi	r18, 0x01	; 1
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	ae 01       	movw	r20, r28
     c04:	4e 5f       	subi	r20, 0xFE	; 254
     c06:	5f 4f       	sbci	r21, 0xFF	; 255
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	84 e4       	ldi	r24, 0x44	; 68
     c0c:	0e 94 81 05 	call	0xb02	; 0xb02 <_Z15readFromRegAddrhhPvj8endian_e>
     c10:	21 e0       	ldi	r18, 0x01	; 1
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	ae 01       	movw	r20, r28
     c16:	4f 5f       	subi	r20, 0xFF	; 255
     c18:	5f 4f       	sbci	r21, 0xFF	; 255
     c1a:	62 e9       	ldi	r22, 0x92	; 146
     c1c:	89 e2       	ldi	r24, 0x29	; 41
     c1e:	0e 94 81 05 	call	0xb02	; 0xb02 <_Z15readFromRegAddrhhPvj8endian_e>
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	8d 37       	cpi	r24, 0x7D	; 125
     c26:	41 f4       	brne	.+16     	; 0xc38 <catchSpaceboard+0x60>
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	84 34       	cpi	r24, 0x44	; 68
     c2c:	11 f0       	breq	.+4      	; 0xc32 <catchSpaceboard+0x5a>
     c2e:	80 31       	cpi	r24, 0x10	; 16
     c30:	19 f4       	brne	.+6      	; 0xc38 <catchSpaceboard+0x60>
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <ARDUSAT_SPACEBOARD>
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <_Z18_lsm303_mag_config18lsm303_mag_scale_e>:
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	cf 93       	push	r28
     c4e:	e8 2f       	mov	r30, r24
     c50:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <_ZL20_lsm303_d_mag_config>
     c54:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <lsm+0xd>
     c58:	ce 2e       	mov	r12, r30
     c5a:	d1 2c       	mov	r13, r1
     c5c:	83 30       	cpi	r24, 0x03	; 3
     c5e:	99 f5       	brne	.+102    	; 0xcc6 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0x82>
     c60:	44 e6       	ldi	r20, 0x64	; 100
     c62:	64 e2       	ldi	r22, 0x24	; 36
     c64:	86 e2       	ldi	r24, 0x26	; 38
     c66:	92 e0       	ldi	r25, 0x02	; 2
     c68:	0e 94 23 08 	call	0x1046	; 0x1046 <_ZN6LSM3038writeRegEhh>
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	c8 16       	cp	r12, r24
     c70:	d1 04       	cpc	r13, r1
     c72:	c0 f4       	brcc	.+48     	; 0xca4 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0x60>
     c74:	f6 01       	movw	r30, r12
     c76:	ec 5c       	subi	r30, 0xCC	; 204
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__tablejump2__>
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <_ZL20_lsm303_d_mag_config>
     c84:	c0 e0       	ldi	r28, 0x00	; 0
     c86:	0e c0       	rjmp	.+28     	; 0xca4 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0x60>
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <_ZL20_lsm303_d_mag_config>
     c8e:	c0 e2       	ldi	r28, 0x20	; 32
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0x60>
     c92:	86 e0       	ldi	r24, 0x06	; 6
     c94:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <_ZL20_lsm303_d_mag_config>
     c98:	c0 e4       	ldi	r28, 0x40	; 64
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0x60>
     c9c:	87 e0       	ldi	r24, 0x07	; 7
     c9e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <_ZL20_lsm303_d_mag_config>
     ca2:	c0 e6       	ldi	r28, 0x60	; 96
     ca4:	4c 2f       	mov	r20, r28
     ca6:	65 e2       	ldi	r22, 0x25	; 37
     ca8:	86 e2       	ldi	r24, 0x26	; 38
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 23 08 	call	0x1046	; 0x1046 <_ZN6LSM3038writeRegEhh>
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	66 e2       	ldi	r22, 0x26	; 38
     cb4:	86 e2       	ldi	r24, 0x26	; 38
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	cf 91       	pop	r28
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	0c 94 23 08 	jmp	0x1046	; 0x1046 <_ZN6LSM3038writeRegEhh>
     cc6:	4c e0       	ldi	r20, 0x0C	; 12
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	86 e2       	ldi	r24, 0x26	; 38
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	0e 94 03 08 	call	0x1006	; 0x1006 <_ZN6LSM30311writeMagRegEhh>
     cd2:	88 e0       	ldi	r24, 0x08	; 8
     cd4:	c8 16       	cp	r12, r24
     cd6:	d1 04       	cpc	r13, r1
     cd8:	a8 f4       	brcc	.+42     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cda:	f6 01       	movw	r30, r12
     cdc:	e4 5c       	subi	r30, 0xC4	; 196
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__tablejump2__>
     ce4:	c0 e2       	ldi	r28, 0x20	; 32
     ce6:	0e c0       	rjmp	.+28     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     ce8:	c0 e4       	ldi	r28, 0x40	; 64
     cea:	0c c0       	rjmp	.+24     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cec:	c0 e6       	ldi	r28, 0x60	; 96
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cf0:	c0 e8       	ldi	r28, 0x80	; 128
     cf2:	08 c0       	rjmp	.+16     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cf4:	c0 ea       	ldi	r28, 0xA0	; 160
     cf6:	06 c0       	rjmp	.+12     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cf8:	c0 ec       	ldi	r28, 0xC0	; 192
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cfc:	86 e0       	ldi	r24, 0x06	; 6
     cfe:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <_ZL20_lsm303_d_mag_config>
     d02:	c0 ee       	ldi	r28, 0xE0	; 224
     d04:	4c 2f       	mov	r20, r28
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	86 e2       	ldi	r24, 0x26	; 38
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	0e 94 03 08 	call	0x1006	; 0x1006 <_ZN6LSM30311writeMagRegEhh>
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	62 e0       	ldi	r22, 0x02	; 2
     d14:	86 e2       	ldi	r24, 0x26	; 38
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	cf 91       	pop	r28
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	0c 94 03 08 	jmp	0x1006	; 0x1006 <_ZN6LSM30311writeMagRegEhh>

00000d26 <lsm303_mag_init>:
     d26:	cf 93       	push	r28
     d28:	c8 2f       	mov	r28, r24
     d2a:	81 e5       	ldi	r24, 0x51	; 81
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN7TwoWire5beginEv>
     d32:	42 e0       	ldi	r20, 0x02	; 2
     d34:	64 e0       	ldi	r22, 0x04	; 4
     d36:	86 e2       	ldi	r24, 0x26	; 38
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE>
     d3e:	8c 2f       	mov	r24, r28
     d40:	0e 94 22 06 	call	0xc44	; 0xc44 <_Z18_lsm303_mag_config18lsm303_mag_scale_e>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <lsm303_getMag>:
     d4a:	4f 92       	push	r4
     d4c:	5f 92       	push	r5
     d4e:	6f 92       	push	r6
     d50:	7f 92       	push	r7
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	5c 01       	movw	r10, r24
     d68:	6b 01       	movw	r12, r22
     d6a:	7a 01       	movw	r14, r20
     d6c:	86 e2       	ldi	r24, 0x26	; 38
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN6LSM3037readMagEv>
     d74:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <lsm+0xd>
     d78:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <_ZL20_lsm303_d_mag_config>
     d7c:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <lsm+0x6>
     d80:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <lsm+0x7>
     d84:	00 91 2e 02 	lds	r16, 0x022E	; 0x80022e <lsm+0x8>
     d88:	10 91 2f 02 	lds	r17, 0x022F	; 0x80022f <lsm+0x9>
     d8c:	c0 91 30 02 	lds	r28, 0x0230	; 0x800230 <lsm+0xa>
     d90:	d0 91 31 02 	lds	r29, 0x0231	; 0x800231 <lsm+0xb>
     d94:	83 30       	cpi	r24, 0x03	; 3
     d96:	09 f0       	breq	.+2      	; 0xd9a <lsm303_getMag+0x50>
     d98:	65 c0       	rjmp	.+202    	; 0xe64 <lsm303_getMag+0x11a>
     d9a:	e3 30       	cpi	r30, 0x03	; 3
     d9c:	c9 f0       	breq	.+50     	; 0xdd0 <lsm303_getMag+0x86>
     d9e:	58 f4       	brcc	.+22     	; 0xdb6 <lsm303_getMag+0x6c>
     da0:	e1 30       	cpi	r30, 0x01	; 1
     da2:	39 f5       	brne	.+78     	; 0xdf2 <lsm303_getMag+0xa8>
     da4:	8a e0       	ldi	r24, 0x0A	; 10
     da6:	48 2e       	mov	r4, r24
     da8:	87 ed       	ldi	r24, 0xD7	; 215
     daa:	58 2e       	mov	r5, r24
     dac:	83 ea       	ldi	r24, 0xA3	; 163
     dae:	68 2e       	mov	r6, r24
     db0:	8d e3       	ldi	r24, 0x3D	; 61
     db2:	78 2e       	mov	r7, r24
     db4:	1e c0       	rjmp	.+60     	; 0xdf2 <lsm303_getMag+0xa8>
     db6:	e6 30       	cpi	r30, 0x06	; 6
     db8:	a1 f0       	breq	.+40     	; 0xde2 <lsm303_getMag+0x98>
     dba:	e7 30       	cpi	r30, 0x07	; 7
     dbc:	d1 f4       	brne	.+52     	; 0xdf2 <lsm303_getMag+0xa8>
     dbe:	fd e7       	ldi	r31, 0x7D	; 125
     dc0:	4f 2e       	mov	r4, r31
     dc2:	ff e3       	ldi	r31, 0x3F	; 63
     dc4:	5f 2e       	mov	r5, r31
     dc6:	f5 ef       	ldi	r31, 0xF5	; 245
     dc8:	6f 2e       	mov	r6, r31
     dca:	fe e3       	ldi	r31, 0x3E	; 62
     dcc:	7f 2e       	mov	r7, r31
     dce:	11 c0       	rjmp	.+34     	; 0xdf2 <lsm303_getMag+0xa8>
     dd0:	ba e0       	ldi	r27, 0x0A	; 10
     dd2:	4b 2e       	mov	r4, r27
     dd4:	b7 ed       	ldi	r27, 0xD7	; 215
     dd6:	5b 2e       	mov	r5, r27
     dd8:	b3 e2       	ldi	r27, 0x23	; 35
     dda:	6b 2e       	mov	r6, r27
     ddc:	be e3       	ldi	r27, 0x3E	; 62
     dde:	7b 2e       	mov	r7, r27
     de0:	08 c0       	rjmp	.+16     	; 0xdf2 <lsm303_getMag+0xa8>
     de2:	aa e0       	ldi	r26, 0x0A	; 10
     de4:	4a 2e       	mov	r4, r26
     de6:	a7 ed       	ldi	r26, 0xD7	; 215
     de8:	5a 2e       	mov	r5, r26
     dea:	a3 ea       	ldi	r26, 0xA3	; 163
     dec:	6a 2e       	mov	r6, r26
     dee:	ae e3       	ldi	r26, 0x3E	; 62
     df0:	7a 2e       	mov	r7, r26
     df2:	07 2e       	mov	r0, r23
     df4:	00 0c       	add	r0, r0
     df6:	88 0b       	sbc	r24, r24
     df8:	99 0b       	sbc	r25, r25
     dfa:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
     dfe:	a3 01       	movw	r20, r6
     e00:	92 01       	movw	r18, r4
     e02:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__mulsf3>
     e06:	2d ec       	ldi	r18, 0xCD	; 205
     e08:	3c ec       	ldi	r19, 0xCC	; 204
     e0a:	4c ec       	ldi	r20, 0xCC	; 204
     e0c:	5d e3       	ldi	r21, 0x3D	; 61
     e0e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__mulsf3>
     e12:	f5 01       	movw	r30, r10
     e14:	60 83       	st	Z, r22
     e16:	71 83       	std	Z+1, r23	; 0x01
     e18:	82 83       	std	Z+2, r24	; 0x02
     e1a:	93 83       	std	Z+3, r25	; 0x03
     e1c:	b8 01       	movw	r22, r16
     e1e:	11 0f       	add	r17, r17
     e20:	88 0b       	sbc	r24, r24
     e22:	99 0b       	sbc	r25, r25
     e24:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
     e28:	a3 01       	movw	r20, r6
     e2a:	92 01       	movw	r18, r4
     e2c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__mulsf3>
     e30:	2d ec       	ldi	r18, 0xCD	; 205
     e32:	3c ec       	ldi	r19, 0xCC	; 204
     e34:	4c ec       	ldi	r20, 0xCC	; 204
     e36:	5d e3       	ldi	r21, 0x3D	; 61
     e38:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__mulsf3>
     e3c:	f6 01       	movw	r30, r12
     e3e:	60 83       	st	Z, r22
     e40:	71 83       	std	Z+1, r23	; 0x01
     e42:	82 83       	std	Z+2, r24	; 0x02
     e44:	93 83       	std	Z+3, r25	; 0x03
     e46:	be 01       	movw	r22, r28
     e48:	dd 0f       	add	r29, r29
     e4a:	88 0b       	sbc	r24, r24
     e4c:	99 0b       	sbc	r25, r25
     e4e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
     e52:	a3 01       	movw	r20, r6
     e54:	92 01       	movw	r18, r4
     e56:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__mulsf3>
     e5a:	2d ec       	ldi	r18, 0xCD	; 205
     e5c:	3c ec       	ldi	r19, 0xCC	; 204
     e5e:	4c ec       	ldi	r20, 0xCC	; 204
     e60:	5d e3       	ldi	r21, 0x3D	; 61
     e62:	75 c0       	rjmp	.+234    	; 0xf4e <lsm303_getMag+0x204>
     e64:	8e 2f       	mov	r24, r30
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	87 30       	cpi	r24, 0x07	; 7
     e6a:	91 05       	cpc	r25, r1
     e6c:	c0 f5       	brcc	.+112    	; 0xede <lsm303_getMag+0x194>
     e6e:	fc 01       	movw	r30, r24
     e70:	ec 5b       	subi	r30, 0xBC	; 188
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__tablejump2__>
     e78:	41 2c       	mov	r4, r1
     e7a:	e0 e8       	ldi	r30, 0x80	; 128
     e7c:	5e 2e       	mov	r5, r30
     e7e:	e9 e8       	ldi	r30, 0x89	; 137
     e80:	6e 2e       	mov	r6, r30
     e82:	e4 e4       	ldi	r30, 0x44	; 68
     e84:	7e 2e       	mov	r7, r30
     e86:	2b c0       	rjmp	.+86     	; 0xede <lsm303_getMag+0x194>
     e88:	41 2c       	mov	r4, r1
     e8a:	50 ec       	ldi	r21, 0xC0	; 192
     e8c:	55 2e       	mov	r5, r21
     e8e:	55 e5       	ldi	r21, 0x55	; 85
     e90:	65 2e       	mov	r6, r21
     e92:	54 e4       	ldi	r21, 0x44	; 68
     e94:	75 2e       	mov	r7, r21
     e96:	23 c0       	rjmp	.+70     	; 0xede <lsm303_getMag+0x194>
     e98:	41 2c       	mov	r4, r1
     e9a:	40 e8       	ldi	r20, 0x80	; 128
     e9c:	54 2e       	mov	r5, r20
     e9e:	47 e2       	ldi	r20, 0x27	; 39
     ea0:	64 2e       	mov	r6, r20
     ea2:	44 e4       	ldi	r20, 0x44	; 68
     ea4:	74 2e       	mov	r7, r20
     ea6:	1b c0       	rjmp	.+54     	; 0xede <lsm303_getMag+0x194>
     ea8:	41 2c       	mov	r4, r1
     eaa:	51 2c       	mov	r5, r1
     eac:	31 ee       	ldi	r19, 0xE1	; 225
     eae:	63 2e       	mov	r6, r19
     eb0:	33 e4       	ldi	r19, 0x43	; 67
     eb2:	73 2e       	mov	r7, r19
     eb4:	14 c0       	rjmp	.+40     	; 0xede <lsm303_getMag+0x194>
     eb6:	41 2c       	mov	r4, r1
     eb8:	51 2c       	mov	r5, r1
     eba:	28 ec       	ldi	r18, 0xC8	; 200
     ebc:	62 2e       	mov	r6, r18
     ebe:	23 e4       	ldi	r18, 0x43	; 67
     ec0:	72 2e       	mov	r7, r18
     ec2:	0d c0       	rjmp	.+26     	; 0xede <lsm303_getMag+0x194>
     ec4:	41 2c       	mov	r4, r1
     ec6:	51 2c       	mov	r5, r1
     ec8:	95 ea       	ldi	r25, 0xA5	; 165
     eca:	69 2e       	mov	r6, r25
     ecc:	93 e4       	ldi	r25, 0x43	; 67
     ece:	79 2e       	mov	r7, r25
     ed0:	06 c0       	rjmp	.+12     	; 0xede <lsm303_getMag+0x194>
     ed2:	41 2c       	mov	r4, r1
     ed4:	51 2c       	mov	r5, r1
     ed6:	86 e6       	ldi	r24, 0x66	; 102
     ed8:	68 2e       	mov	r6, r24
     eda:	83 e4       	ldi	r24, 0x43	; 67
     edc:	78 2e       	mov	r7, r24
     ede:	07 2e       	mov	r0, r23
     ee0:	00 0c       	add	r0, r0
     ee2:	88 0b       	sbc	r24, r24
     ee4:	99 0b       	sbc	r25, r25
     ee6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
     eea:	a3 01       	movw	r20, r6
     eec:	92 01       	movw	r18, r4
     eee:	0e 94 3c 10 	call	0x2078	; 0x2078 <__divsf3>
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	48 ec       	ldi	r20, 0xC8	; 200
     ef8:	52 e4       	ldi	r21, 0x42	; 66
     efa:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__mulsf3>
     efe:	f5 01       	movw	r30, r10
     f00:	60 83       	st	Z, r22
     f02:	71 83       	std	Z+1, r23	; 0x01
     f04:	82 83       	std	Z+2, r24	; 0x02
     f06:	93 83       	std	Z+3, r25	; 0x03
     f08:	b8 01       	movw	r22, r16
     f0a:	11 0f       	add	r17, r17
     f0c:	88 0b       	sbc	r24, r24
     f0e:	99 0b       	sbc	r25, r25
     f10:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
     f14:	a3 01       	movw	r20, r6
     f16:	92 01       	movw	r18, r4
     f18:	0e 94 3c 10 	call	0x2078	; 0x2078 <__divsf3>
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	48 ec       	ldi	r20, 0xC8	; 200
     f22:	52 e4       	ldi	r21, 0x42	; 66
     f24:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__mulsf3>
     f28:	f6 01       	movw	r30, r12
     f2a:	60 83       	st	Z, r22
     f2c:	71 83       	std	Z+1, r23	; 0x01
     f2e:	82 83       	std	Z+2, r24	; 0x02
     f30:	93 83       	std	Z+3, r25	; 0x03
     f32:	be 01       	movw	r22, r28
     f34:	dd 0f       	add	r29, r29
     f36:	88 0b       	sbc	r24, r24
     f38:	99 0b       	sbc	r25, r25
     f3a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
     f3e:	a3 01       	movw	r20, r6
     f40:	92 01       	movw	r18, r4
     f42:	0e 94 3c 10 	call	0x2078	; 0x2078 <__divsf3>
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	48 ec       	ldi	r20, 0xC8	; 200
     f4c:	52 e4       	ldi	r21, 0x42	; 66
     f4e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__mulsf3>
     f52:	f7 01       	movw	r30, r14
     f54:	60 83       	st	Z, r22
     f56:	71 83       	std	Z+1, r23	; 0x01
     f58:	82 83       	std	Z+2, r24	; 0x02
     f5a:	93 83       	std	Z+3, r25	; 0x03
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	7f 90       	pop	r7
     f72:	6f 90       	pop	r6
     f74:	5f 90       	pop	r5
     f76:	4f 90       	pop	r4
     f78:	08 95       	ret

00000f7a <_GLOBAL__sub_I_catchSpaceboard>:
 * http://www.st.com/web/en/resource/technical/document/datasheet/DM00057547.pdf
 *
 * LSM303_DLHC Datasheet:
 * https://www.adafruit.com/datasheets/LSM303DLHC.PDF
 */
LSM303 lsm;
     f7a:	86 e2       	ldi	r24, 0x26	; 38
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN6LSM303C1Ev>
/**
 * Inits the ML8511 breakout board UV sensor
 *
 * @return true
 */
ML8511_ADC ml8511_uv_adc = ML8511_ADC(DRIVER_ML8511_ADDR);
     f82:	61 e5       	ldi	r22, 0x51	; 81
     f84:	85 e2       	ldi	r24, 0x25	; 37
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <_ZN10ML8511_ADCC1Eh>


/*
 * ISL29125 RGB Light Sensor
 */
SFE_ISL29125 isl29125 = SFE_ISL29125(DRIVER_SPACEBOARD_ISL29125_ADDR);
     f8c:	64 e4       	ldi	r22, 0x44	; 68
     f8e:	84 e2       	ldi	r24, 0x24	; 36
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_ZN12SFE_ISL29125C1Eh>


/*
 * TCS34725 RGB Light Sensor
 */
Adafruit_TCS34725 tcs34725 = Adafruit_TCS34725();
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	6f ef       	ldi	r22, 0xFF	; 255
     f9a:	81 e2       	ldi	r24, 0x21	; 33
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_ZN17Adafruit_TCS34725C1E25tcs34725IntegrationTime_t14tcs34725Gain_t>


/*
 * SI1132 UV Light Sensor
 */
Adafruit_SI1145 si1132_uv = Adafruit_SI1145();
     fa2:	80 e2       	ldi	r24, 0x20	; 32
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <_ZN15Adafruit_SI1145C1Ev>

00000faa <_GLOBAL__sub_D_catchSpaceboard>:


/*
 * ISL29125 RGB Light Sensor
 */
SFE_ISL29125 isl29125 = SFE_ISL29125(DRIVER_SPACEBOARD_ISL29125_ADDR);
     faa:	84 e2       	ldi	r24, 0x24	; 36
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <_ZN12SFE_ISL29125D1Ev>

00000fb2 <_ZN10ML8511_ADCC1Eh>:
#define read16(reg, val) readFromRegAddr(_addr, reg, val, 2, LITTLE_ENDIAN)
#define write8(reg, val) writeToRegAddr(_addr, reg, val, 1, LITTLE_ENDIAN)

// Constructor
ML8511_ADC::ML8511_ADC(uint8_t sensor_addr) :
  _addr(sensor_addr)
     fb2:	fc 01       	movw	r30, r24
     fb4:	60 83       	st	Z, r22
     fb6:	08 95       	ret

00000fb8 <_ZN6LSM303C1Ev>:

// Reads all 6 channels of the LSM303 and stores them in the object variables
void LSM303::read(void)
{
  readAcc();
  readMag();
     fb8:	fc 01       	movw	r30, r24
     fba:	84 e0       	ldi	r24, 0x04	; 4
     fbc:	85 87       	std	Z+13, r24	; 0x0d
     fbe:	10 8e       	std	Z+24, r1	; 0x18
     fc0:	17 8a       	std	Z+23, r1	; 0x17
     fc2:	11 8e       	std	Z+25, r1	; 0x19
     fc4:	08 95       	ret

00000fc6 <_ZN6LSM30311writeAccRegEhh>:
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
     fd0:	06 2f       	mov	r16, r22
     fd2:	14 2f       	mov	r17, r20
     fd4:	6e 85       	ldd	r22, Y+14	; 0x0e
     fd6:	81 e5       	ldi	r24, 0x51	; 81
     fd8:	93 e0       	ldi	r25, 0x03	; 3
     fda:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7TwoWire17beginTransmissionEh>
     fde:	60 2f       	mov	r22, r16
     fe0:	81 e5       	ldi	r24, 0x51	; 81
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_ZN7TwoWire5writeEh>
     fe8:	61 2f       	mov	r22, r17
     fea:	81 e5       	ldi	r24, 0x51	; 81
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_ZN7TwoWire5writeEh>
     ff2:	81 e5       	ldi	r24, 0x51	; 81
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <_ZN7TwoWire15endTransmissionEv>
     ffa:	8c 87       	std	Y+12, r24	; 0x0c
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	08 95       	ret

00001006 <_ZN6LSM30311writeMagRegEhh>:
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	ec 01       	movw	r28, r24
    1010:	06 2f       	mov	r16, r22
    1012:	14 2f       	mov	r17, r20
    1014:	6f 85       	ldd	r22, Y+15	; 0x0f
    1016:	81 e5       	ldi	r24, 0x51	; 81
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7TwoWire17beginTransmissionEh>
    101e:	60 2f       	mov	r22, r16
    1020:	81 e5       	ldi	r24, 0x51	; 81
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_ZN7TwoWire5writeEh>
    1028:	61 2f       	mov	r22, r17
    102a:	81 e5       	ldi	r24, 0x51	; 81
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_ZN7TwoWire5writeEh>
    1032:	81 e5       	ldi	r24, 0x51	; 81
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <_ZN7TwoWire15endTransmissionEv>
    103a:	8c 87       	std	Y+12, r24	; 0x0c
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	08 95       	ret

00001046 <_ZN6LSM3038writeRegEhh>:
    1046:	fc 01       	movw	r30, r24
    1048:	25 85       	ldd	r18, Z+13	; 0x0d
    104a:	23 30       	cpi	r18, 0x03	; 3
    104c:	11 f0       	breq	.+4      	; 0x1052 <_ZN6LSM3038writeRegEhh+0xc>
    104e:	60 32       	cpi	r22, 0x20	; 32
    1050:	10 f4       	brcc	.+4      	; 0x1056 <_ZN6LSM3038writeRegEhh+0x10>
    1052:	0c 94 03 08 	jmp	0x1006	; 0x1006 <_ZN6LSM30311writeMagRegEhh>
    1056:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <_ZN6LSM30311writeAccRegEhh>

0000105a <_ZN6LSM3037readMagEv>:
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	6f 85       	ldd	r22, Y+15	; 0x0f
    106e:	81 e5       	ldi	r24, 0x51	; 81
    1070:	93 e0       	ldi	r25, 0x03	; 3
    1072:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7TwoWire17beginTransmissionEh>
    1076:	8d 85       	ldd	r24, Y+13	; 0x0d
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	19 f4       	brne	.+6      	; 0x1082 <_ZN6LSM3037readMagEv+0x28>
    107c:	6a 89       	ldd	r22, Y+18	; 0x12
    107e:	60 68       	ori	r22, 0x80	; 128
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <_ZN6LSM3037readMagEv+0x2a>
    1082:	69 89       	ldd	r22, Y+17	; 0x11
    1084:	81 e5       	ldi	r24, 0x51	; 81
    1086:	93 e0       	ldi	r25, 0x03	; 3
    1088:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_ZN7TwoWire5writeEh>
    108c:	81 e5       	ldi	r24, 0x51	; 81
    108e:	93 e0       	ldi	r25, 0x03	; 3
    1090:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <_ZN7TwoWire15endTransmissionEv>
    1094:	8c 87       	std	Y+12, r24	; 0x0c
    1096:	46 e0       	ldi	r20, 0x06	; 6
    1098:	6f 85       	ldd	r22, Y+15	; 0x0f
    109a:	81 e5       	ldi	r24, 0x51	; 81
    109c:	93 e0       	ldi	r25, 0x03	; 3
    109e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <_ZN7TwoWire11requestFromEhh>
    10a2:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <millis>
    10a6:	8b 01       	movw	r16, r22
    10a8:	81 e5       	ldi	r24, 0x51	; 81
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN7TwoWire9availableEv>
    10b0:	06 97       	sbiw	r24, 0x06	; 6
    10b2:	84 f4       	brge	.+32     	; 0x10d4 <_ZN6LSM3037readMagEv+0x7a>
    10b4:	8f 89       	ldd	r24, Y+23	; 0x17
    10b6:	98 8d       	ldd	r25, Y+24	; 0x18
    10b8:	89 2b       	or	r24, r25
    10ba:	b1 f3       	breq	.-20     	; 0x10a8 <_ZN6LSM3037readMagEv+0x4e>
    10bc:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <millis>
    10c0:	60 1b       	sub	r22, r16
    10c2:	71 0b       	sbc	r23, r17
    10c4:	8f 89       	ldd	r24, Y+23	; 0x17
    10c6:	98 8d       	ldd	r25, Y+24	; 0x18
    10c8:	86 17       	cp	r24, r22
    10ca:	97 07       	cpc	r25, r23
    10cc:	68 f7       	brcc	.-38     	; 0x10a8 <_ZN6LSM3037readMagEv+0x4e>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	89 8f       	std	Y+25, r24	; 0x19
    10d2:	67 c0       	rjmp	.+206    	; 0x11a2 <_ZN6LSM3037readMagEv+0x148>
    10d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	f9 f4       	brne	.+62     	; 0x1118 <_ZN6LSM3037readMagEv+0xbe>
    10da:	81 e5       	ldi	r24, 0x51	; 81
    10dc:	93 e0       	ldi	r25, 0x03	; 3
    10de:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    10e2:	f8 2e       	mov	r15, r24
    10e4:	81 e5       	ldi	r24, 0x51	; 81
    10e6:	93 e0       	ldi	r25, 0x03	; 3
    10e8:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    10ec:	c8 2e       	mov	r12, r24
    10ee:	81 e5       	ldi	r24, 0x51	; 81
    10f0:	93 e0       	ldi	r25, 0x03	; 3
    10f2:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    10f6:	08 2f       	mov	r16, r24
    10f8:	81 e5       	ldi	r24, 0x51	; 81
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    1100:	d8 2e       	mov	r13, r24
    1102:	81 e5       	ldi	r24, 0x51	; 81
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    110a:	18 2f       	mov	r17, r24
    110c:	81 e5       	ldi	r24, 0x51	; 81
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    1114:	e8 2e       	mov	r14, r24
    1116:	36 c0       	rjmp	.+108    	; 0x1184 <_ZN6LSM3037readMagEv+0x12a>
    1118:	81 e5       	ldi	r24, 0x51	; 81
    111a:	93 e0       	ldi	r25, 0x03	; 3
    111c:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    1120:	c8 2e       	mov	r12, r24
    1122:	81 e5       	ldi	r24, 0x51	; 81
    1124:	93 e0       	ldi	r25, 0x03	; 3
    1126:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    112a:	f8 2e       	mov	r15, r24
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	81 11       	cpse	r24, r1
    1130:	15 c0       	rjmp	.+42     	; 0x115c <_ZN6LSM3037readMagEv+0x102>
    1132:	81 e5       	ldi	r24, 0x51	; 81
    1134:	93 e0       	ldi	r25, 0x03	; 3
    1136:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    113a:	d8 2e       	mov	r13, r24
    113c:	81 e5       	ldi	r24, 0x51	; 81
    113e:	93 e0       	ldi	r25, 0x03	; 3
    1140:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    1144:	08 2f       	mov	r16, r24
    1146:	81 e5       	ldi	r24, 0x51	; 81
    1148:	93 e0       	ldi	r25, 0x03	; 3
    114a:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    114e:	e8 2e       	mov	r14, r24
    1150:	81 e5       	ldi	r24, 0x51	; 81
    1152:	93 e0       	ldi	r25, 0x03	; 3
    1154:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    1158:	18 2f       	mov	r17, r24
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <_ZN6LSM3037readMagEv+0x12a>
    115c:	81 e5       	ldi	r24, 0x51	; 81
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    1164:	e8 2e       	mov	r14, r24
    1166:	81 e5       	ldi	r24, 0x51	; 81
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    116e:	18 2f       	mov	r17, r24
    1170:	81 e5       	ldi	r24, 0x51	; 81
    1172:	93 e0       	ldi	r25, 0x03	; 3
    1174:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    1178:	d8 2e       	mov	r13, r24
    117a:	81 e5       	ldi	r24, 0x51	; 81
    117c:	93 e0       	ldi	r25, 0x03	; 3
    117e:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
    1182:	08 2f       	mov	r16, r24
    1184:	8f 2d       	mov	r24, r15
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9c 29       	or	r25, r12
    118a:	9f 83       	std	Y+7, r25	; 0x07
    118c:	8e 83       	std	Y+6, r24	; 0x06
    118e:	80 2f       	mov	r24, r16
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9d 29       	or	r25, r13
    1194:	99 87       	std	Y+9, r25	; 0x09
    1196:	88 87       	std	Y+8, r24	; 0x08
    1198:	81 2f       	mov	r24, r17
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	9e 29       	or	r25, r14
    119e:	9b 87       	std	Y+11, r25	; 0x0b
    11a0:	8a 87       	std	Y+10, r24	; 0x0a
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	08 95       	ret

000011b4 <_ZN6LSM3037testRegEhh>:
}

// Private Methods //////////////////////////////////////////////////////////////

int LSM303::testReg(byte address, uint8_t reg)
{
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	c6 2f       	mov	r28, r22
    11ba:	d4 2f       	mov	r29, r20
  Wire.beginTransmission(address);
    11bc:	81 e5       	ldi	r24, 0x51	; 81
    11be:	93 e0       	ldi	r25, 0x03	; 3
    11c0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    11c4:	6d 2f       	mov	r22, r29
    11c6:	81 e5       	ldi	r24, 0x51	; 81
    11c8:	93 e0       	ldi	r25, 0x03	; 3
    11ca:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_ZN7TwoWire5writeEh>
  if (Wire.endTransmission() != 0)
    11ce:	81 e5       	ldi	r24, 0x51	; 81
    11d0:	93 e0       	ldi	r25, 0x03	; 3
    11d2:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <_ZN7TwoWire15endTransmissionEv>
    11d6:	81 11       	cpse	r24, r1
    11d8:	12 c0       	rjmp	.+36     	; 0x11fe <_ZN6LSM3037testRegEhh+0x4a>
  {
    return TEST_REG_ERROR;
  }

  Wire.requestFrom(address, (byte)1);
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	6c 2f       	mov	r22, r28
    11de:	81 e5       	ldi	r24, 0x51	; 81
    11e0:	93 e0       	ldi	r25, 0x03	; 3
    11e2:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <_ZN7TwoWire11requestFromEhh>
  if (Wire.available())
    11e6:	81 e5       	ldi	r24, 0x51	; 81
    11e8:	93 e0       	ldi	r25, 0x03	; 3
    11ea:	0e 94 93 14 	call	0x2926	; 0x2926 <_ZN7TwoWire9availableEv>
    11ee:	89 2b       	or	r24, r25
    11f0:	31 f0       	breq	.+12     	; 0x11fe <_ZN6LSM3037testRegEhh+0x4a>
  {
    return Wire.read();
    11f2:	81 e5       	ldi	r24, 0x51	; 81
    11f4:	93 e0       	ldi	r25, 0x03	; 3
  }
  else
  {
    return TEST_REG_ERROR;
  }
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
  }

  Wire.requestFrom(address, (byte)1);
  if (Wire.available())
  {
    return Wire.read();
    11fa:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <_ZN7TwoWire4readEv>
  }
  else
  {
    return TEST_REG_ERROR;
  }
}
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE>:
}

// Public Methods //////////////////////////////////////////////////////////////

bool LSM303::init(deviceType device, sa0State sa0)
{
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	ec 01       	movw	r28, r24
    1212:	16 2f       	mov	r17, r22
    1214:	04 2f       	mov	r16, r20
  // perform auto-detection unless device type and SA0 state were both specified
  if (device == device_auto || sa0 == sa0_auto)
    1216:	64 30       	cpi	r22, 0x04	; 4
    1218:	19 f0       	breq	.+6      	; 0x1220 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x18>
    121a:	42 30       	cpi	r20, 0x02	; 2
    121c:	09 f0       	breq	.+2      	; 0x1220 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x18>
    121e:	40 c0       	rjmp	.+128    	; 0x12a0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
  {
    // check for LSM303D if device is unidentified or was specified to be this type
    if (device == device_auto || device == device_D)
    1220:	8d ef       	ldi	r24, 0xFD	; 253
    1222:	81 0f       	add	r24, r17
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	c8 f4       	brcc	.+50     	; 0x125a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x52>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
    1228:	00 23       	and	r16, r16
    122a:	61 f0       	breq	.+24     	; 0x1244 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x3c>
    122c:	4f e0       	ldi	r20, 0x0F	; 15
    122e:	6d e1       	ldi	r22, 0x1D	; 29
    1230:	ce 01       	movw	r24, r28
    1232:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
    1236:	89 34       	cpi	r24, 0x49	; 73
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x36>
    123c:	8f c0       	rjmp	.+286    	; 0x135c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x154>
        // device responds to address 0011101 with D ID; it's a D with SA0 high
        device = device_D;
        sa0 = sa0_high;
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(D_SA0_LOW_ADDRESS, WHO_AM_I) == D_WHO_ID)
    123e:	01 30       	cpi	r16, 0x01	; 1
    1240:	09 f4       	brne	.+2      	; 0x1244 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x3c>
    1242:	95 c0       	rjmp	.+298    	; 0x136e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x166>
    1244:	4f e0       	ldi	r20, 0x0F	; 15
    1246:	6e e1       	ldi	r22, 0x1E	; 30
    1248:	ce 01       	movw	r24, r28
    124a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
    124e:	89 34       	cpi	r24, 0x49	; 73
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x4e>
    1254:	85 c0       	rjmp	.+266    	; 0x1360 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x158>
        sa0 = sa0_low;
      }
    }
    
    // check for LSM303DLHC, DLM, DLH if device is still unidentified or was specified to be one of these types
    if (device == device_auto || device == device_DLHC || device == device_DLM || device == device_DLH)
    1256:	14 30       	cpi	r17, 0x04	; 4
    1258:	31 f0       	breq	.+12     	; 0x1266 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x5e>
    125a:	12 30       	cpi	r17, 0x02	; 2
    125c:	21 f0       	breq	.+8      	; 0x1266 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x5e>
    125e:	11 30       	cpi	r17, 0x01	; 1
    1260:	11 f0       	breq	.+4      	; 0x1266 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x5e>
    1262:	11 11       	cpse	r17, r1
    1264:	16 c0       	rjmp	.+44     	; 0x1292 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x8a>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
    1266:	00 23       	and	r16, r16
    1268:	51 f0       	breq	.+20     	; 0x127e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x76>
    126a:	40 e2       	ldi	r20, 0x20	; 32
    126c:	69 e1       	ldi	r22, 0x19	; 25
    126e:	ce 01       	movw	r24, r28
    1270:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	89 f4       	brne	.+34     	; 0x129a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x92>
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
        }
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
    1278:	01 30       	cpi	r16, 0x01	; 1
    127a:	09 f4       	brne	.+2      	; 0x127e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x76>
    127c:	74 c0       	rjmp	.+232    	; 0x1366 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x15e>
    127e:	40 e2       	ldi	r20, 0x20	; 32
    1280:	68 e1       	ldi	r22, 0x18	; 24
    1282:	ce 01       	movw	r24, r28
    1284:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	09 f0       	breq	.+2      	; 0x128e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x86>
    128c:	5a c0       	rjmp	.+180    	; 0x1342 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x13a>
        }
      }
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    128e:	14 30       	cpi	r17, 0x04	; 4
    1290:	11 f0       	breq	.+4      	; 0x1296 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x8e>
    1292:	02 30       	cpi	r16, 0x02	; 2
    1294:	29 f4       	brne	.+10     	; 0x12a0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
    {
      return false;
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	6e c0       	rjmp	.+220    	; 0x1376 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x16e>
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011001; it's a DLHC, DLM with SA0 high, or DLH with SA0 high
        sa0 = sa0_high;
        if (device == device_auto)
    129a:	14 30       	cpi	r17, 0x04	; 4
    129c:	c1 f1       	breq	.+112    	; 0x130e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x106>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011001; it's a DLHC, DLM with SA0 high, or DLH with SA0 high
        sa0 = sa0_high;
    129e:	01 e0       	ldi	r16, 0x01	; 1
    {
      return false;
    }
  }
  
  _device = device;
    12a0:	1d 87       	std	Y+13, r17	; 0x0d
  
  // set device addresses and translated register addresses
  switch (device)
    12a2:	11 30       	cpi	r17, 0x01	; 1
    12a4:	d1 f0       	breq	.+52     	; 0x12da <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xd2>
    12a6:	78 f1       	brcs	.+94     	; 0x1306 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xfe>
    12a8:	12 30       	cpi	r17, 0x02	; 2
    12aa:	e9 f0       	breq	.+58     	; 0x12e6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xde>
    12ac:	13 30       	cpi	r17, 0x03	; 3
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xaa>
    12b0:	46 c0       	rjmp	.+140    	; 0x133e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x136>
  {
    case device_D:
      acc_address = mag_address = (sa0 == sa0_high) ? D_SA0_HIGH_ADDRESS : D_SA0_LOW_ADDRESS;
    12b2:	01 30       	cpi	r16, 0x01	; 1
    12b4:	11 f0       	breq	.+4      	; 0x12ba <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xb2>
    12b6:	8e e1       	ldi	r24, 0x1E	; 30
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xb4>
    12ba:	8d e1       	ldi	r24, 0x1D	; 29
    12bc:	8f 87       	std	Y+15, r24	; 0x0f
    12be:	8e 87       	std	Y+14, r24	; 0x0e
      translated_regs[-OUT_X_L_M] = D_OUT_X_L_M;
    12c0:	88 e0       	ldi	r24, 0x08	; 8
    12c2:	8a 8b       	std	Y+18, r24	; 0x12
      translated_regs[-OUT_X_H_M] = D_OUT_X_H_M;
    12c4:	89 e0       	ldi	r24, 0x09	; 9
    12c6:	89 8b       	std	Y+17, r24	; 0x11
      translated_regs[-OUT_Y_L_M] = D_OUT_Y_L_M;
    12c8:	8a e0       	ldi	r24, 0x0A	; 10
    12ca:	8c 8b       	std	Y+20, r24	; 0x14
      translated_regs[-OUT_Y_H_M] = D_OUT_Y_H_M;
    12cc:	8b e0       	ldi	r24, 0x0B	; 11
    12ce:	8b 8b       	std	Y+19, r24	; 0x13
      translated_regs[-OUT_Z_L_M] = D_OUT_Z_L_M;
    12d0:	8c e0       	ldi	r24, 0x0C	; 12
    12d2:	8e 8b       	std	Y+22, r24	; 0x16
      translated_regs[-OUT_Z_H_M] = D_OUT_Z_H_M;
    12d4:	8d e0       	ldi	r24, 0x0D	; 13
    12d6:	8d 8b       	std	Y+21, r24	; 0x15
    12d8:	32 c0       	rjmp	.+100    	; 0x133e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x136>
      translated_regs[-OUT_Z_H_M] = DLHC_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLHC_OUT_Z_L_M;
      break;

    case device_DLM:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    12da:	01 30       	cpi	r16, 0x01	; 1
    12dc:	21 f0       	breq	.+8      	; 0x12e6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xde>
    12de:	88 e1       	ldi	r24, 0x18	; 24
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xe0>
    {
      return false;
    }
  }
  
  _device = device;
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	8d 87       	std	Y+13, r24	; 0x0d
      translated_regs[-OUT_Z_H_M] = DLHC_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLHC_OUT_Z_L_M;
      break;

    case device_DLM:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    12e6:	89 e1       	ldi	r24, 0x19	; 25
    12e8:	8e 87       	std	Y+14, r24	; 0x0e
      mag_address = DLHC_DLM_DLH_MAG_ADDRESS;
    12ea:	8e e1       	ldi	r24, 0x1E	; 30
    12ec:	8f 87       	std	Y+15, r24	; 0x0f
      translated_regs[-OUT_X_H_M] = DLM_OUT_X_H_M;
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	89 8b       	std	Y+17, r24	; 0x11
      translated_regs[-OUT_X_L_M] = DLM_OUT_X_L_M;
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	8a 8b       	std	Y+18, r24	; 0x12
      translated_regs[-OUT_Y_H_M] = DLM_OUT_Y_H_M;
    12f6:	87 e0       	ldi	r24, 0x07	; 7
    12f8:	8b 8b       	std	Y+19, r24	; 0x13
      translated_regs[-OUT_Y_L_M] = DLM_OUT_Y_L_M;
    12fa:	88 e0       	ldi	r24, 0x08	; 8
    12fc:	8c 8b       	std	Y+20, r24	; 0x14
      translated_regs[-OUT_Z_H_M] = DLM_OUT_Z_H_M;
    12fe:	85 e0       	ldi	r24, 0x05	; 5
    1300:	8d 8b       	std	Y+21, r24	; 0x15
      translated_regs[-OUT_Z_L_M] = DLM_OUT_Z_L_M;
    1302:	86 e0       	ldi	r24, 0x06	; 6
    1304:	1b c0       	rjmp	.+54     	; 0x133c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x134>
      break;

    case device_DLH:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    1306:	01 30       	cpi	r16, 0x01	; 1
    1308:	51 f0       	breq	.+20     	; 0x131e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x116>
    130a:	88 e1       	ldi	r24, 0x18	; 24
    130c:	09 c0       	rjmp	.+18     	; 0x1320 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x118>
          // DLHC seems to respond to WHO_AM_I request the same way as DLM, even though this
          // register isn't documented in its datasheet. Since the DLHC accelerometer address is the
          // same as the DLM with SA0 high, but Pololu DLM boards pull SA0 low by default, we'll
          // guess that a device whose accelerometer responds to the SA0 high address and whose
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
    130e:	4f e0       	ldi	r20, 0x0F	; 15
    1310:	6e e1       	ldi	r22, 0x1E	; 30
    1312:	ce 01       	movw	r24, r28
    1314:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
    1318:	cc 97       	sbiw	r24, 0x3c	; 60
    131a:	19 f3       	breq	.-58     	; 0x12e2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xda>
    {
      return false;
    }
  }
  
  _device = device;
    131c:	1d 86       	std	Y+13, r1	; 0x0d
      translated_regs[-OUT_Z_H_M] = DLM_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLM_OUT_Z_L_M;
      break;

    case device_DLH:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    131e:	89 e1       	ldi	r24, 0x19	; 25
    1320:	8e 87       	std	Y+14, r24	; 0x0e
      mag_address = DLHC_DLM_DLH_MAG_ADDRESS;
    1322:	8e e1       	ldi	r24, 0x1E	; 30
    1324:	8f 87       	std	Y+15, r24	; 0x0f
      translated_regs[-OUT_X_H_M] = DLH_OUT_X_H_M;
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	89 8b       	std	Y+17, r24	; 0x11
      translated_regs[-OUT_X_L_M] = DLH_OUT_X_L_M;
    132a:	84 e0       	ldi	r24, 0x04	; 4
    132c:	8a 8b       	std	Y+18, r24	; 0x12
      translated_regs[-OUT_Y_H_M] = DLH_OUT_Y_H_M;
    132e:	85 e0       	ldi	r24, 0x05	; 5
    1330:	8b 8b       	std	Y+19, r24	; 0x13
      translated_regs[-OUT_Y_L_M] = DLH_OUT_Y_L_M;
    1332:	86 e0       	ldi	r24, 0x06	; 6
    1334:	8c 8b       	std	Y+20, r24	; 0x14
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
    1336:	87 e0       	ldi	r24, 0x07	; 7
    1338:	8d 8b       	std	Y+21, r24	; 0x15
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
    133a:	88 e0       	ldi	r24, 0x08	; 8
    133c:	8e 8b       	std	Y+22, r24	; 0x16
      break;
  }
  
  return true;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	1a c0       	rjmp	.+52     	; 0x1376 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x16e>
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011000; it's a DLM with SA0 low or DLH with SA0 low
        sa0 = sa0_low;
        if (device == device_auto)
    1342:	14 30       	cpi	r17, 0x04	; 4
    1344:	49 f4       	brne	.+18     	; 0x1358 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x150>
        {
          // use magnetometer WHO_AM_I register to determine device type
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLM : device_DLH;
    1346:	4f e0       	ldi	r20, 0x0F	; 15
    1348:	6e e1       	ldi	r22, 0x1E	; 30
    134a:	ce 01       	movw	r24, r28
    134c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
          // DLHC seems to respond to WHO_AM_I request the same way as DLM, even though this
          // register isn't documented in its datasheet. Since the DLHC accelerometer address is the
          // same as the DLM with SA0 high, but Pololu DLM boards pull SA0 low by default, we'll
          // guess that a device whose accelerometer responds to the SA0 high address and whose
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
    1350:	11 e0       	ldi	r17, 0x01	; 1
    1352:	cc 97       	sbiw	r24, 0x3c	; 60
    1354:	09 f0       	breq	.+2      	; 0x1358 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x150>
    1356:	10 e0       	ldi	r17, 0x00	; 0
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011000; it's a DLM with SA0 low or DLH with SA0 low
        sa0 = sa0_low;
    1358:	00 e0       	ldi	r16, 0x00	; 0
    135a:	a2 cf       	rjmp	.-188    	; 0x12a0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
      {
        // device responds to address 0011101 with D ID; it's a D with SA0 high
        device = device_D;
        sa0 = sa0_high;
    135c:	01 e0       	ldi	r16, 0x01	; 1
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x15a>
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(D_SA0_LOW_ADDRESS, WHO_AM_I) == D_WHO_ID)
      {
        // device responds to address 0011110 with D ID; it's a D with SA0 low
        device = device_D;
        sa0 = sa0_low;
    1360:	00 e0       	ldi	r16, 0x00	; 0
}

// Public Methods //////////////////////////////////////////////////////////////

bool LSM303::init(deviceType device, sa0State sa0)
{
    1362:	13 e0       	ldi	r17, 0x03	; 3
    1364:	9d cf       	rjmp	.-198    	; 0x12a0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
        }
      }
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    1366:	14 30       	cpi	r17, 0x04	; 4
    1368:	09 f4       	brne	.+2      	; 0x136c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x164>
    136a:	95 cf       	rjmp	.-214    	; 0x1296 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x8e>
    136c:	99 cf       	rjmp	.-206    	; 0x12a0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
        sa0 = sa0_low;
      }
    }
    
    // check for LSM303DLHC, DLM, DLH if device is still unidentified or was specified to be one of these types
    if (device == device_auto || device == device_DLHC || device == device_DLM || device == device_DLH)
    136e:	14 30       	cpi	r17, 0x04	; 4
    1370:	09 f4       	brne	.+2      	; 0x1374 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x16c>
    1372:	7b cf       	rjmp	.-266    	; 0x126a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x62>
    1374:	72 cf       	rjmp	.-284    	; 0x125a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x52>
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
}
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <_ZN13ArdusatSerialC1E10serialModehhb>:
}

void ArdusatSerial::end()
{
  send_to_serial(end())
}
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ec 01       	movw	r28, r24
    1392:	16 2f       	mov	r17, r22
    1394:	d4 2e       	mov	r13, r20
    1396:	c2 2e       	mov	r12, r18
    1398:	1b 82       	std	Y+3, r1	; 0x03
    139a:	1a 82       	std	Y+2, r1	; 0x02
    139c:	88 ee       	ldi	r24, 0xE8	; 232
    139e:	93 e0       	ldi	r25, 0x03	; 3
    13a0:	a0 e0       	ldi	r26, 0x00	; 0
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	8c 83       	std	Y+4, r24	; 0x04
    13a6:	9d 83       	std	Y+5, r25	; 0x05
    13a8:	ae 83       	std	Y+6, r26	; 0x06
    13aa:	bf 83       	std	Y+7, r27	; 0x07
    13ac:	83 e8       	ldi	r24, 0x83	; 131
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	99 83       	std	Y+1, r25	; 0x01
    13b2:	88 83       	st	Y, r24
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	86 0f       	add	r24, r22
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	60 f4       	brcc	.+24     	; 0x13d4 <_ZN13ArdusatSerialC1E10serialModehhb+0x54>
    13bc:	8c e1       	ldi	r24, 0x1C	; 28
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 38 14 	call	0x2870	; 0x2870 <_Znwj>
    13c4:	7c 01       	movw	r14, r24
    13c6:	20 2f       	mov	r18, r16
    13c8:	4c 2d       	mov	r20, r12
    13ca:	6d 2d       	mov	r22, r13
    13cc:	0e 94 96 0c 	call	0x192c	; 0x192c <_ZN14SoftwareSerialC1Ehhb>
    13d0:	fd 86       	std	Y+13, r15	; 0x0d
    13d2:	ec 86       	std	Y+12, r14	; 0x0c
    13d4:	1e 87       	std	Y+14, r17	; 0x0e
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	df 90       	pop	r13
    13e4:	cf 90       	pop	r12
    13e6:	08 95       	ret

000013e8 <_ZN13ArdusatSerialD1Ev>:
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	23 e8       	ldi	r18, 0x83	; 131
    13ee:	31 e0       	ldi	r19, 0x01	; 1
    13f0:	fc 01       	movw	r30, r24
    13f2:	31 83       	std	Z+1, r19	; 0x01
    13f4:	20 83       	st	Z, r18
    13f6:	c4 85       	ldd	r28, Z+12	; 0x0c
    13f8:	d5 85       	ldd	r29, Z+13	; 0x0d
    13fa:	20 97       	sbiw	r28, 0x00	; 0
    13fc:	41 f0       	breq	.+16     	; 0x140e <_ZN13ArdusatSerialD1Ev+0x26>
    13fe:	ce 01       	movw	r24, r28
    1400:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN14SoftwareSerialD1Ev>
    1404:	ce 01       	movw	r24, r28
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <_ZdlPv>
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	08 95       	ret

00001414 <_ZN13ArdusatSerial4peekEv>:

int ArdusatSerial::peek()
{
    1414:	fc 01       	movw	r30, r24
  return_serial_function(peek())
    1416:	96 85       	ldd	r25, Z+14	; 0x0e
    1418:	91 50       	subi	r25, 0x01	; 1
    141a:	92 30       	cpi	r25, 0x02	; 2
    141c:	48 f4       	brcc	.+18     	; 0x1430 <_ZN13ArdusatSerial4peekEv+0x1c>
    141e:	84 85       	ldd	r24, Z+12	; 0x0c
    1420:	95 85       	ldd	r25, Z+13	; 0x0d
    1422:	dc 01       	movw	r26, r24
    1424:	ed 91       	ld	r30, X+
    1426:	fc 91       	ld	r31, X
    1428:	00 84       	ldd	r0, Z+8	; 0x08
    142a:	f1 85       	ldd	r31, Z+9	; 0x09
    142c:	e0 2d       	mov	r30, r0
    142e:	09 94       	ijmp
    1430:	84 eb       	ldi	r24, 0xB4	; 180
    1432:	92 e0       	ldi	r25, 0x02	; 2
    1434:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <_ZN14HardwareSerial4peekEv>

00001438 <_ZN13ArdusatSerial4readEv>:
}

int ArdusatSerial::read()
{
    1438:	fc 01       	movw	r30, r24
  return_serial_function(read())
    143a:	96 85       	ldd	r25, Z+14	; 0x0e
    143c:	91 50       	subi	r25, 0x01	; 1
    143e:	92 30       	cpi	r25, 0x02	; 2
    1440:	48 f4       	brcc	.+18     	; 0x1454 <_ZN13ArdusatSerial4readEv+0x1c>
    1442:	84 85       	ldd	r24, Z+12	; 0x0c
    1444:	95 85       	ldd	r25, Z+13	; 0x0d
    1446:	dc 01       	movw	r26, r24
    1448:	ed 91       	ld	r30, X+
    144a:	fc 91       	ld	r31, X
    144c:	06 80       	ldd	r0, Z+6	; 0x06
    144e:	f7 81       	ldd	r31, Z+7	; 0x07
    1450:	e0 2d       	mov	r30, r0
    1452:	09 94       	ijmp
    1454:	84 eb       	ldi	r24, 0xB4	; 180
    1456:	92 e0       	ldi	r25, 0x02	; 2
    1458:	0c 94 88 12 	jmp	0x2510	; 0x2510 <_ZN14HardwareSerial4readEv>

0000145c <_ZN13ArdusatSerial9availableEv>:
}

int ArdusatSerial::available()
{
    145c:	fc 01       	movw	r30, r24
  return_serial_function(available())
    145e:	96 85       	ldd	r25, Z+14	; 0x0e
    1460:	91 50       	subi	r25, 0x01	; 1
    1462:	92 30       	cpi	r25, 0x02	; 2
    1464:	48 f4       	brcc	.+18     	; 0x1478 <_ZN13ArdusatSerial9availableEv+0x1c>
    1466:	84 85       	ldd	r24, Z+12	; 0x0c
    1468:	95 85       	ldd	r25, Z+13	; 0x0d
    146a:	dc 01       	movw	r26, r24
    146c:	ed 91       	ld	r30, X+
    146e:	fc 91       	ld	r31, X
    1470:	04 80       	ldd	r0, Z+4	; 0x04
    1472:	f5 81       	ldd	r31, Z+5	; 0x05
    1474:	e0 2d       	mov	r30, r0
    1476:	09 94       	ijmp
    1478:	84 eb       	ldi	r24, 0xB4	; 180
    147a:	92 e0       	ldi	r25, 0x02	; 2
    147c:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <_ZN14HardwareSerial9availableEv>

00001480 <_ZN13ArdusatSerial5flushEv>:
}

void ArdusatSerial::flush()
{
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	ec 01       	movw	r28, r24
  send_to_serial(flush())
    1486:	8e 85       	ldd	r24, Y+14	; 0x0e
    1488:	8d 7f       	andi	r24, 0xFD	; 253
    148a:	21 f4       	brne	.+8      	; 0x1494 <_ZN13ArdusatSerial5flushEv+0x14>
    148c:	84 eb       	ldi	r24, 0xB4	; 180
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN14HardwareSerial5flushEv>
    1494:	8c 85       	ldd	r24, Y+12	; 0x0c
    1496:	9d 85       	ldd	r25, Y+13	; 0x0d
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	69 f0       	breq	.+26     	; 0x14b6 <_ZN13ArdusatSerial5flushEv+0x36>
    149c:	2e 85       	ldd	r18, Y+14	; 0x0e
    149e:	21 50       	subi	r18, 0x01	; 1
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	48 f4       	brcc	.+18     	; 0x14b6 <_ZN13ArdusatSerial5flushEv+0x36>
    14a4:	dc 01       	movw	r26, r24
    14a6:	ed 91       	ld	r30, X+
    14a8:	fc 91       	ld	r31, X
    14aa:	02 84       	ldd	r0, Z+10	; 0x0a
    14ac:	f3 85       	ldd	r31, Z+11	; 0x0b
    14ae:	e0 2d       	mov	r30, r0
}
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
  return_serial_function(available())
}

void ArdusatSerial::flush()
{
  send_to_serial(flush())
    14b4:	09 94       	ijmp
}
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	08 95       	ret

000014bc <_ZN13ArdusatSerial5writeEh>:

size_t ArdusatSerial::write(unsigned char b) {
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	8c 01       	movw	r16, r24
    14c8:	f6 2e       	mov	r15, r22
  size_t ret = 1;

  if (_soft_serial != NULL && 
    14ca:	dc 01       	movw	r26, r24
    14cc:	1c 96       	adiw	r26, 0x0c	; 12
    14ce:	8d 91       	ld	r24, X+
    14d0:	9c 91       	ld	r25, X
    14d2:	1d 97       	sbiw	r26, 0x0d	; 13
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	81 f0       	breq	.+32     	; 0x14f8 <_ZN13ArdusatSerial5writeEh+0x3c>
    14d8:	1e 96       	adiw	r26, 0x0e	; 14
    14da:	2c 91       	ld	r18, X
    14dc:	21 50       	subi	r18, 0x01	; 1
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	58 f4       	brcc	.+22     	; 0x14f8 <_ZN13ArdusatSerial5writeEh+0x3c>
      ( _mode == SERIAL_MODE_SOFTWARE || _mode == SERIAL_MODE_HARDWARE_AND_SOFTWARE)) {
    ret = ret & _soft_serial->write(b);
    14e2:	dc 01       	movw	r26, r24
    14e4:	ed 91       	ld	r30, X+
    14e6:	fc 91       	ld	r31, X
    14e8:	01 90       	ld	r0, Z+
    14ea:	f0 81       	ld	r31, Z
    14ec:	e0 2d       	mov	r30, r0
    14ee:	09 95       	icall
    14f0:	ec 01       	movw	r28, r24
    14f2:	c1 70       	andi	r28, 0x01	; 1
    14f4:	dd 27       	eor	r29, r29
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <_ZN13ArdusatSerial5writeEh+0x40>
{
  send_to_serial(flush())
}

size_t ArdusatSerial::write(unsigned char b) {
  size_t ret = 1;
    14f8:	c1 e0       	ldi	r28, 0x01	; 1
    14fa:	d0 e0       	ldi	r29, 0x00	; 0
  if (_soft_serial != NULL && 
      ( _mode == SERIAL_MODE_SOFTWARE || _mode == SERIAL_MODE_HARDWARE_AND_SOFTWARE)) {
    ret = ret & _soft_serial->write(b);
  }

  if (_mode == SERIAL_MODE_HARDWARE || _mode == SERIAL_MODE_HARDWARE_AND_SOFTWARE) {
    14fc:	f8 01       	movw	r30, r16
    14fe:	86 85       	ldd	r24, Z+14	; 0x0e
    1500:	8d 7f       	andi	r24, 0xFD	; 253
    1502:	39 f4       	brne	.+14     	; 0x1512 <_ZN13ArdusatSerial5writeEh+0x56>
    ret = ret & Serial.write(b);
    1504:	6f 2d       	mov	r22, r15
    1506:	84 eb       	ldi	r24, 0xB4	; 180
    1508:	92 e0       	ldi	r25, 0x02	; 2
    150a:	0e 94 cb 12 	call	0x2596	; 0x2596 <_ZN14HardwareSerial5writeEh>
    150e:	c8 23       	and	r28, r24
    1510:	d9 23       	and	r29, r25
  }

  return ret;
}
    1512:	ce 01       	movw	r24, r28
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	08 95       	ret

00001520 <_ZN14SoftwareSerial4readEv>:
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    1520:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <_ZN14SoftwareSerial13active_objectE>
    1524:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <_ZN14SoftwareSerial13active_objectE+0x1>
    1528:	28 17       	cp	r18, r24
    152a:	39 07       	cpc	r19, r25
    152c:	b9 f4       	brne	.+46     	; 0x155c <_ZN14SoftwareSerial4readEv+0x3c>
    152e:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1532:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1536:	98 17       	cp	r25, r24
    1538:	89 f0       	breq	.+34     	; 0x155c <_ZN14SoftwareSerial4readEv+0x3c>
    153a:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <_ZN14SoftwareSerial20_receive_buffer_headE>
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	ed 5b       	subi	r30, 0xBD	; 189
    1542:	fd 4f       	sbci	r31, 0xFD	; 253
    1544:	80 81       	ld	r24, Z
    1546:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <_ZN14SoftwareSerial20_receive_buffer_headE>
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	2f 5f       	subi	r18, 0xFF	; 255
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	2f 73       	andi	r18, 0x3F	; 63
    1552:	33 27       	eor	r19, r19
    1554:	20 93 41 02 	sts	0x0241, r18	; 0x800241 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	08 95       	ret
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	9f ef       	ldi	r25, 0xFF	; 255
    1560:	08 95       	ret

00001562 <_ZN14SoftwareSerial4peekEv>:
    1562:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <_ZN14SoftwareSerial13active_objectE>
    1566:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <_ZN14SoftwareSerial13active_objectE+0x1>
    156a:	28 17       	cp	r18, r24
    156c:	39 07       	cpc	r19, r25
    156e:	71 f4       	brne	.+28     	; 0x158c <_ZN14SoftwareSerial4peekEv+0x2a>
    1570:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1574:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1578:	98 17       	cp	r25, r24
    157a:	41 f0       	breq	.+16     	; 0x158c <_ZN14SoftwareSerial4peekEv+0x2a>
    157c:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	ed 5b       	subi	r30, 0xBD	; 189
    1584:	fd 4f       	sbci	r31, 0xFD	; 253
    1586:	80 81       	ld	r24, Z
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	08 95       	ret
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	9f ef       	ldi	r25, 0xFF	; 255
    1590:	08 95       	ret

00001592 <_ZN14SoftwareSerial9availableEv>:
    1592:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <_ZN14SoftwareSerial13active_objectE>
    1596:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <_ZN14SoftwareSerial13active_objectE+0x1>
    159a:	28 17       	cp	r18, r24
    159c:	39 07       	cpc	r19, r25
    159e:	71 f4       	brne	.+28     	; 0x15bc <_ZN14SoftwareSerial9availableEv+0x2a>
    15a0:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    15a4:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <_ZN14SoftwareSerial20_receive_buffer_headE>
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	80 5c       	subi	r24, 0xC0	; 192
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	82 1b       	sub	r24, r18
    15b0:	91 09       	sbc	r25, r1
    15b2:	60 e4       	ldi	r22, 0x40	; 64
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	0e 94 c7 19 	call	0x338e	; 0x338e <__divmodhi4>
    15ba:	08 95       	ret
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	08 95       	ret

000015c2 <_ZN14SoftwareSerial5flushEv>:
    15c2:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <_ZN14SoftwareSerial13active_objectE>
    15c6:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <_ZN14SoftwareSerial13active_objectE+0x1>
    15ca:	28 17       	cp	r18, r24
    15cc:	39 07       	cpc	r19, r25
    15ce:	39 f4       	brne	.+14     	; 0x15de <_ZN14SoftwareSerial5flushEv+0x1c>
    15d0:	8f b7       	in	r24, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    15d8:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <_ZN14SoftwareSerial20_receive_buffer_headE>
    15dc:	8f bf       	out	0x3f, r24	; 63
    15de:	08 95       	ret

000015e0 <_ZN14SoftwareSerial12tx_pin_writeEh.part.4.constprop.9>:
    15e0:	dc 01       	movw	r26, r24
    15e2:	51 96       	adiw	r26, 0x11	; 17
    15e4:	ed 91       	ld	r30, X+
    15e6:	fc 91       	ld	r31, X
    15e8:	52 97       	sbiw	r26, 0x12	; 18
    15ea:	90 81       	ld	r25, Z
    15ec:	50 96       	adiw	r26, 0x10	; 16
    15ee:	8c 91       	ld	r24, X
    15f0:	80 95       	com	r24
    15f2:	89 23       	and	r24, r25
    15f4:	80 83       	st	Z, r24
    15f6:	08 95       	ret

000015f8 <_ZN14SoftwareSerial10tunedDelayEj>:
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	2f ef       	ldi	r18, 0xFF	; 255
    15fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1600:	92 07       	cpc	r25, r18
    1602:	d9 f7       	brne	.-10     	; 0x15fa <_ZN14SoftwareSerial10tunedDelayEj+0x2>
    1604:	08 95       	ret

00001606 <_ZN14SoftwareSerial4recvEv>:
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
    1614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1616:	ee 85       	ldd	r30, Y+14	; 0x0e
    1618:	ff 85       	ldd	r31, Y+15	; 0x0f
    161a:	9d 85       	ldd	r25, Y+13	; 0x0d
    161c:	81 ff       	sbrs	r24, 1
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <_ZN14SoftwareSerial4recvEv+0x22>
    1620:	80 81       	ld	r24, Z
    1622:	98 23       	and	r25, r24
    1624:	29 f4       	brne	.+10     	; 0x1630 <_ZN14SoftwareSerial4recvEv+0x2a>
    1626:	46 c0       	rjmp	.+140    	; 0x16b4 <_ZN14SoftwareSerial4recvEv+0xae>
    1628:	80 81       	ld	r24, Z
    162a:	98 23       	and	r25, r24
    162c:	09 f0       	breq	.+2      	; 0x1630 <_ZN14SoftwareSerial4recvEv+0x2a>
    162e:	42 c0       	rjmp	.+132    	; 0x16b4 <_ZN14SoftwareSerial4recvEv+0xae>
    1630:	8b 89       	ldd	r24, Y+19	; 0x13
    1632:	9c 89       	ldd	r25, Y+20	; 0x14
    1634:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    1638:	88 e0       	ldi	r24, 0x08	; 8
    163a:	e8 2e       	mov	r14, r24
    163c:	f1 2c       	mov	r15, r1
    163e:	10 e0       	ldi	r17, 0x00	; 0
    1640:	01 e0       	ldi	r16, 0x01	; 1
    1642:	8d 89       	ldd	r24, Y+21	; 0x15
    1644:	9e 89       	ldd	r25, Y+22	; 0x16
    1646:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    164a:	ee 85       	ldd	r30, Y+14	; 0x0e
    164c:	ff 85       	ldd	r31, Y+15	; 0x0f
    164e:	90 81       	ld	r25, Z
    1650:	8d 85       	ldd	r24, Y+13	; 0x0d
    1652:	89 23       	and	r24, r25
    1654:	11 f0       	breq	.+4      	; 0x165a <_ZN14SoftwareSerial4recvEv+0x54>
    1656:	10 2b       	or	r17, r16
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <_ZN14SoftwareSerial4recvEv+0x5a>
    165a:	80 2f       	mov	r24, r16
    165c:	80 95       	com	r24
    165e:	18 23       	and	r17, r24
    1660:	00 0f       	add	r16, r16
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	e8 1a       	sub	r14, r24
    1666:	f1 08       	sbc	r15, r1
    1668:	61 f7       	brne	.-40     	; 0x1642 <_ZN14SoftwareSerial4recvEv+0x3c>
    166a:	8f 89       	ldd	r24, Y+23	; 0x17
    166c:	98 8d       	ldd	r25, Y+24	; 0x18
    166e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    1672:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1674:	81 fd       	sbrc	r24, 1
    1676:	10 95       	com	r17
    1678:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    167c:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	8f 73       	andi	r24, 0x3F	; 63
    1686:	99 27       	eor	r25, r25
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	82 17       	cp	r24, r18
    168c:	93 07       	cpc	r25, r19
    168e:	79 f0       	breq	.+30     	; 0x16ae <_ZN14SoftwareSerial4recvEv+0xa8>
    1690:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	ed 5b       	subi	r30, 0xBD	; 189
    1698:	fd 4f       	sbci	r31, 0xFD	; 253
    169a:	10 83       	st	Z, r17
    169c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	8f 73       	andi	r24, 0x3F	; 63
    16a6:	99 27       	eor	r25, r25
    16a8:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    16ac:	03 c0       	rjmp	.+6      	; 0x16b4 <_ZN14SoftwareSerial4recvEv+0xae>
    16ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b0:	81 60       	ori	r24, 0x01	; 1
    16b2:	8b 8f       	std	Y+27, r24	; 0x1b
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	08 95       	ret

000016c2 <_ZN14SoftwareSerial12tx_pin_writeEh>:
    16c2:	61 11       	cpse	r22, r1
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <_ZN14SoftwareSerial12tx_pin_writeEh+0x8>
    16c6:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <_ZN14SoftwareSerial12tx_pin_writeEh.part.4.constprop.9>
    16ca:	dc 01       	movw	r26, r24
    16cc:	51 96       	adiw	r26, 0x11	; 17
    16ce:	ed 91       	ld	r30, X+
    16d0:	fc 91       	ld	r31, X
    16d2:	52 97       	sbiw	r26, 0x12	; 18
    16d4:	20 81       	ld	r18, Z
    16d6:	50 96       	adiw	r26, 0x10	; 16
    16d8:	8c 91       	ld	r24, X
    16da:	82 2b       	or	r24, r18
    16dc:	80 83       	st	Z, r24
    16de:	08 95       	ret

000016e0 <_ZN14SoftwareSerial5writeEh>:
    16e0:	df 92       	push	r13
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	ec 01       	movw	r28, r24
    16f0:	29 8d       	ldd	r18, Y+25	; 0x19
    16f2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    16f4:	21 15       	cp	r18, r1
    16f6:	31 05       	cpc	r19, r1
    16f8:	29 f4       	brne	.+10     	; 0x1704 <_ZN14SoftwareSerial5writeEh+0x24>
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9b 83       	std	Y+3, r25	; 0x03
    1700:	8a 83       	std	Y+2, r24	; 0x02
    1702:	4b c0       	rjmp	.+150    	; 0x179a <_ZN14SoftwareSerial5writeEh+0xba>
    1704:	16 2f       	mov	r17, r22
    1706:	df b6       	in	r13, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    170c:	66 95       	lsr	r22
    170e:	61 70       	andi	r22, 0x01	; 1
    1710:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN14SoftwareSerial12tx_pin_writeEh>
    1714:	89 8d       	ldd	r24, Y+25	; 0x19
    1716:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1718:	05 96       	adiw	r24, 0x05	; 5
    171a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    171e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1720:	98 e0       	ldi	r25, 0x08	; 8
    1722:	e9 2e       	mov	r14, r25
    1724:	f1 2c       	mov	r15, r1
    1726:	01 e0       	ldi	r16, 0x01	; 1
    1728:	81 ff       	sbrs	r24, 1
    172a:	18 c0       	rjmp	.+48     	; 0x175c <_ZN14SoftwareSerial5writeEh+0x7c>
    172c:	81 2f       	mov	r24, r17
    172e:	80 23       	and	r24, r16
    1730:	21 f0       	breq	.+8      	; 0x173a <_ZN14SoftwareSerial5writeEh+0x5a>
    1732:	ce 01       	movw	r24, r28
    1734:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_ZN14SoftwareSerial12tx_pin_writeEh.part.4.constprop.9>
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <_ZN14SoftwareSerial5writeEh+0x62>
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	ce 01       	movw	r24, r28
    173e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN14SoftwareSerial12tx_pin_writeEh>
    1742:	89 8d       	ldd	r24, Y+25	; 0x19
    1744:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1746:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    174a:	00 0f       	add	r16, r16
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	e8 1a       	sub	r14, r24
    1750:	f1 08       	sbc	r15, r1
    1752:	61 f7       	brne	.-40     	; 0x172c <_ZN14SoftwareSerial5writeEh+0x4c>
    1754:	ce 01       	movw	r24, r28
    1756:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_ZN14SoftwareSerial12tx_pin_writeEh.part.4.constprop.9>
    175a:	18 c0       	rjmp	.+48     	; 0x178c <_ZN14SoftwareSerial5writeEh+0xac>
    175c:	81 2f       	mov	r24, r17
    175e:	80 23       	and	r24, r16
    1760:	29 f0       	breq	.+10     	; 0x176c <_ZN14SoftwareSerial5writeEh+0x8c>
    1762:	61 e0       	ldi	r22, 0x01	; 1
    1764:	ce 01       	movw	r24, r28
    1766:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN14SoftwareSerial12tx_pin_writeEh>
    176a:	03 c0       	rjmp	.+6      	; 0x1772 <_ZN14SoftwareSerial5writeEh+0x92>
    176c:	ce 01       	movw	r24, r28
    176e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_ZN14SoftwareSerial12tx_pin_writeEh.part.4.constprop.9>
    1772:	89 8d       	ldd	r24, Y+25	; 0x19
    1774:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1776:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    177a:	00 0f       	add	r16, r16
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	e8 1a       	sub	r14, r24
    1780:	f1 08       	sbc	r15, r1
    1782:	61 f7       	brne	.-40     	; 0x175c <_ZN14SoftwareSerial5writeEh+0x7c>
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	ce 01       	movw	r24, r28
    1788:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN14SoftwareSerial12tx_pin_writeEh>
    178c:	df be       	out	0x3f, r13	; 63
    178e:	89 8d       	ldd	r24, Y+25	; 0x19
    1790:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1792:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    1796:	21 e0       	ldi	r18, 0x01	; 1
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	c9 01       	movw	r24, r18
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	df 90       	pop	r13
    17aa:	08 95       	ret

000017ac <__vector_5>:
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <_ZN14SoftwareSerial13active_objectE>
    17d2:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <_ZN14SoftwareSerial13active_objectE+0x1>
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	11 f0       	breq	.+4      	; 0x17de <__vector_5+0x32>
    17da:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN14SoftwareSerial4recvEv>
    17de:	ff 91       	pop	r31
    17e0:	ef 91       	pop	r30
    17e2:	bf 91       	pop	r27
    17e4:	af 91       	pop	r26
    17e6:	9f 91       	pop	r25
    17e8:	8f 91       	pop	r24
    17ea:	7f 91       	pop	r23
    17ec:	6f 91       	pop	r22
    17ee:	5f 91       	pop	r21
    17f0:	4f 91       	pop	r20
    17f2:	3f 91       	pop	r19
    17f4:	2f 91       	pop	r18
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0
    17fc:	1f 90       	pop	r1
    17fe:	18 95       	reti

00001800 <__vector_4>:
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
    1822:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__vector_5>
    1826:	ff 91       	pop	r31
    1828:	ef 91       	pop	r30
    182a:	bf 91       	pop	r27
    182c:	af 91       	pop	r26
    182e:	9f 91       	pop	r25
    1830:	8f 91       	pop	r24
    1832:	7f 91       	pop	r23
    1834:	6f 91       	pop	r22
    1836:	5f 91       	pop	r21
    1838:	4f 91       	pop	r20
    183a:	3f 91       	pop	r19
    183c:	2f 91       	pop	r18
    183e:	0f 90       	pop	r0
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	0f 90       	pop	r0
    1844:	1f 90       	pop	r1
    1846:	18 95       	reti

00001848 <__vector_3>:
    1848:	1f 92       	push	r1
    184a:	0f 92       	push	r0
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	0f 92       	push	r0
    1850:	11 24       	eor	r1, r1
    1852:	2f 93       	push	r18
    1854:	3f 93       	push	r19
    1856:	4f 93       	push	r20
    1858:	5f 93       	push	r21
    185a:	6f 93       	push	r22
    185c:	7f 93       	push	r23
    185e:	8f 93       	push	r24
    1860:	9f 93       	push	r25
    1862:	af 93       	push	r26
    1864:	bf 93       	push	r27
    1866:	ef 93       	push	r30
    1868:	ff 93       	push	r31
    186a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__vector_5>
    186e:	ff 91       	pop	r31
    1870:	ef 91       	pop	r30
    1872:	bf 91       	pop	r27
    1874:	af 91       	pop	r26
    1876:	9f 91       	pop	r25
    1878:	8f 91       	pop	r24
    187a:	7f 91       	pop	r23
    187c:	6f 91       	pop	r22
    187e:	5f 91       	pop	r21
    1880:	4f 91       	pop	r20
    1882:	3f 91       	pop	r19
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <_ZN14SoftwareSerial5setTXEh>:
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	ec 01       	movw	r28, r24
    1898:	16 2f       	mov	r17, r22
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	81 2f       	mov	r24, r17
    189e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <pinMode>
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	81 2f       	mov	r24, r17
    18a6:	0e 94 76 17 	call	0x2eec	; 0x2eec <digitalWrite>
    18aa:	81 2f       	mov	r24, r17
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	fc 01       	movw	r30, r24
    18b0:	e9 5c       	subi	r30, 0xC9	; 201
    18b2:	fd 4f       	sbci	r31, 0xFD	; 253
    18b4:	e4 91       	lpm	r30, Z
    18b6:	e8 8b       	std	Y+16, r30	; 0x10
    18b8:	fc 01       	movw	r30, r24
    18ba:	e5 5b       	subi	r30, 0xB5	; 181
    18bc:	fd 4f       	sbci	r31, 0xFD	; 253
    18be:	e4 91       	lpm	r30, Z
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	e7 59       	subi	r30, 0x97	; 151
    18c8:	fd 4f       	sbci	r31, 0xFD	; 253
    18ca:	85 91       	lpm	r24, Z+
    18cc:	94 91       	lpm	r25, Z
    18ce:	9a 8b       	std	Y+18, r25	; 0x12
    18d0:	89 8b       	std	Y+17, r24	; 0x11
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	08 95       	ret

000018da <_ZN14SoftwareSerial5setRXEh>:
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	ec 01       	movw	r28, r24
    18e2:	16 2f       	mov	r17, r22
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	81 2f       	mov	r24, r17
    18e8:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <pinMode>
    18ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ee:	81 fd       	sbrc	r24, 1
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <_ZN14SoftwareSerial5setRXEh+0x20>
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	81 2f       	mov	r24, r17
    18f6:	0e 94 76 17 	call	0x2eec	; 0x2eec <digitalWrite>
    18fa:	1c 87       	std	Y+12, r17	; 0x0c
    18fc:	81 2f       	mov	r24, r17
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	fc 01       	movw	r30, r24
    1902:	e9 5c       	subi	r30, 0xC9	; 201
    1904:	fd 4f       	sbci	r31, 0xFD	; 253
    1906:	e4 91       	lpm	r30, Z
    1908:	ed 87       	std	Y+13, r30	; 0x0d
    190a:	fc 01       	movw	r30, r24
    190c:	e5 5b       	subi	r30, 0xB5	; 181
    190e:	fd 4f       	sbci	r31, 0xFD	; 253
    1910:	e4 91       	lpm	r30, Z
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	ee 0f       	add	r30, r30
    1916:	ff 1f       	adc	r31, r31
    1918:	e1 5a       	subi	r30, 0xA1	; 161
    191a:	fd 4f       	sbci	r31, 0xFD	; 253
    191c:	85 91       	lpm	r24, Z+
    191e:	94 91       	lpm	r25, Z
    1920:	9f 87       	std	Y+15, r25	; 0x0f
    1922:	8e 87       	std	Y+14, r24	; 0x0e
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	08 95       	ret

0000192c <_ZN14SoftwareSerialC1Ehhb>:
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	ec 01       	movw	r28, r24
    1934:	16 2f       	mov	r17, r22
    1936:	1b 82       	std	Y+3, r1	; 0x03
    1938:	1a 82       	std	Y+2, r1	; 0x02
    193a:	88 ee       	ldi	r24, 0xE8	; 232
    193c:	93 e0       	ldi	r25, 0x03	; 3
    193e:	a0 e0       	ldi	r26, 0x00	; 0
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	8c 83       	std	Y+4, r24	; 0x04
    1944:	9d 83       	std	Y+5, r25	; 0x05
    1946:	ae 83       	std	Y+6, r26	; 0x06
    1948:	bf 83       	std	Y+7, r27	; 0x07
    194a:	83 e9       	ldi	r24, 0x93	; 147
    194c:	91 e0       	ldi	r25, 0x01	; 1
    194e:	99 83       	std	Y+1, r25	; 0x01
    1950:	88 83       	st	Y, r24
    1952:	1c 8a       	std	Y+20, r1	; 0x14
    1954:	1b 8a       	std	Y+19, r1	; 0x13
    1956:	1e 8a       	std	Y+22, r1	; 0x16
    1958:	1d 8a       	std	Y+21, r1	; 0x15
    195a:	18 8e       	std	Y+24, r1	; 0x18
    195c:	1f 8a       	std	Y+23, r1	; 0x17
    195e:	1a 8e       	std	Y+26, r1	; 0x1a
    1960:	19 8e       	std	Y+25, r1	; 0x19
    1962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1964:	8e 7f       	andi	r24, 0xFE	; 254
    1966:	20 fb       	bst	r18, 0
    1968:	81 f9       	bld	r24, 1
    196a:	8b 8f       	std	Y+27, r24	; 0x1b
    196c:	64 2f       	mov	r22, r20
    196e:	ce 01       	movw	r24, r28
    1970:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN14SoftwareSerial5setTXEh>
    1974:	61 2f       	mov	r22, r17
    1976:	ce 01       	movw	r24, r28
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <_ZN14SoftwareSerial5setRXEh>

00001982 <_ZN14SoftwareSerial3endEv>:
}

void SoftwareSerial::end()
{
  if (digitalPinToPCMSK(_receivePin))
    1982:	fc 01       	movw	r30, r24
    1984:	24 85       	ldd	r18, Z+12	; 0x0c
    1986:	26 31       	cpi	r18, 0x16	; 22
    1988:	40 f5       	brcc	.+80     	; 0x19da <_ZN14SoftwareSerial3endEv+0x58>
    *digitalPinToPCMSK(_receivePin) &= ~_BV(digitalPinToPCMSKbit(_receivePin));
    198a:	28 30       	cpi	r18, 0x08	; 8
    198c:	28 f0       	brcs	.+10     	; 0x1998 <_ZN14SoftwareSerial3endEv+0x16>
    198e:	2e 30       	cpi	r18, 0x0E	; 14
    1990:	30 f4       	brcc	.+12     	; 0x199e <_ZN14SoftwareSerial3endEv+0x1c>
    1992:	eb e6       	ldi	r30, 0x6B	; 107
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <_ZN14SoftwareSerial3endEv+0x20>
    1998:	ed e6       	ldi	r30, 0x6D	; 109
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <_ZN14SoftwareSerial3endEv+0x20>
    199e:	ec e6       	ldi	r30, 0x6C	; 108
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	30 81       	ld	r19, Z
    19a4:	28 30       	cpi	r18, 0x08	; 8
    19a6:	38 f4       	brcc	.+14     	; 0x19b6 <_ZN14SoftwareSerial3endEv+0x34>
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <_ZN14SoftwareSerial3endEv+0x2e>
    19ae:	88 0f       	add	r24, r24
    19b0:	2a 95       	dec	r18
    19b2:	ea f7       	brpl	.-6      	; 0x19ae <_ZN14SoftwareSerial3endEv+0x2c>
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <_ZN14SoftwareSerial3endEv+0x52>
    19b6:	42 2f       	mov	r20, r18
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	2e 30       	cpi	r18, 0x0E	; 14
    19bc:	18 f4       	brcc	.+6      	; 0x19c4 <_ZN14SoftwareSerial3endEv+0x42>
    19be:	48 50       	subi	r20, 0x08	; 8
    19c0:	51 09       	sbc	r21, r1
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <_ZN14SoftwareSerial3endEv+0x46>
    19c4:	4e 50       	subi	r20, 0x0E	; 14
    19c6:	51 09       	sbc	r21, r1
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <_ZN14SoftwareSerial3endEv+0x4e>
    19ce:	88 0f       	add	r24, r24
    19d0:	4a 95       	dec	r20
    19d2:	ea f7       	brpl	.-6      	; 0x19ce <_ZN14SoftwareSerial3endEv+0x4c>
    19d4:	80 95       	com	r24
    19d6:	83 23       	and	r24, r19
    19d8:	80 83       	st	Z, r24
    19da:	08 95       	ret

000019dc <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    19dc:	23 e9       	ldi	r18, 0x93	; 147
    19de:	31 e0       	ldi	r19, 0x01	; 1
    19e0:	fc 01       	movw	r30, r24
    19e2:	31 83       	std	Z+1, r19	; 0x01
    19e4:	20 83       	st	Z, r18
{
  end();
    19e6:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <_ZN14SoftwareSerial3endEv>

000019ea <_ZN12SFE_ISL29125C1Eh>:


// Constructor - Creates sensor object and sets I2C address
SFE_ISL29125::SFE_ISL29125(uint8_t addr) 
{
  _addr = addr;
    19ea:	fc 01       	movw	r30, r24
    19ec:	60 83       	st	Z, r22
    19ee:	08 95       	ret

000019f0 <_ZN12SFE_ISL29125D1Ev>:
}

// Destructor - Deletes sensor object
SFE_ISL29125::~SFE_ISL29125()
    19f0:	08 95       	ret

000019f2 <_Z8distanceff>:
#define B_1B 10
ArdusatSerial serialConnection(SERIAL_MODE_HARDWARE_AND_SOFTWARE, 8, 9);

Magnetic mag;
float distance(float a,float b)
{
    19f2:	cf 92       	push	r12
    19f4:	df 92       	push	r13
    19f6:	ef 92       	push	r14
    19f8:	ff 92       	push	r15
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    int d = abs(a - b) % 360;
    19fe:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__subsf3>
    1a02:	6b 01       	movw	r12, r22
    1a04:	7c 01       	movw	r14, r24
    1a06:	0e 94 ae 10 	call	0x215c	; 0x215c <__fixsfsi>
    1a0a:	ab 01       	movw	r20, r22
    1a0c:	77 ff       	sbrs	r23, 7
    1a0e:	04 c0       	rjmp	.+8      	; 0x1a18 <_Z8distanceff+0x26>
    1a10:	44 27       	eor	r20, r20
    1a12:	55 27       	eor	r21, r21
    1a14:	46 1b       	sub	r20, r22
    1a16:	57 0b       	sbc	r21, r23
    1a18:	28 e6       	ldi	r18, 0x68	; 104
    1a1a:	31 e0       	ldi	r19, 0x01	; 1
    1a1c:	ca 01       	movw	r24, r20
    1a1e:	b9 01       	movw	r22, r18
    1a20:	0e 94 c7 19 	call	0x338e	; 0x338e <__divmodhi4>
    1a24:	ec 01       	movw	r28, r24
    int r = d > 180 ? 360 - d : d;
    1a26:	85 3b       	cpi	r24, 0xB5	; 181
    1a28:	91 05       	cpc	r25, r1
    1a2a:	24 f0       	brlt	.+8      	; 0x1a34 <_Z8distanceff+0x42>
    1a2c:	c9 01       	movw	r24, r18
    1a2e:	8c 1b       	sub	r24, r28
    1a30:	9d 0b       	sbc	r25, r29
    1a32:	ec 01       	movw	r28, r24

    //calculate sign
    int sign = (a - b >= 0 && a - b <= 180) || (a - b <=-180 && a- b>= -360) ? 1 : -1;
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	a9 01       	movw	r20, r18
    1a3a:	c7 01       	movw	r24, r14
    1a3c:	b6 01       	movw	r22, r12
    1a3e:	0e 94 bd 11 	call	0x237a	; 0x237a <__gesf2>
    1a42:	87 fd       	sbrc	r24, 7
    1a44:	0a c0       	rjmp	.+20     	; 0x1a5a <_Z8distanceff+0x68>
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	44 e3       	ldi	r20, 0x34	; 52
    1a4c:	53 e4       	ldi	r21, 0x43	; 67
    1a4e:	c7 01       	movw	r24, r14
    1a50:	b6 01       	movw	r22, r12
    1a52:	0e 94 37 10 	call	0x206e	; 0x206e <__cmpsf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	a4 f4       	brge	.+40     	; 0x1a82 <_Z8distanceff+0x90>
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	44 e3       	ldi	r20, 0x34	; 52
    1a60:	53 ec       	ldi	r21, 0xC3	; 195
    1a62:	c7 01       	movw	r24, r14
    1a64:	b6 01       	movw	r22, r12
    1a66:	0e 94 37 10 	call	0x206e	; 0x206e <__cmpsf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	6c f0       	brlt	.+26     	; 0x1a88 <_Z8distanceff+0x96>
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	44 eb       	ldi	r20, 0xB4	; 180
    1a74:	53 ec       	ldi	r21, 0xC3	; 195
    1a76:	c7 01       	movw	r24, r14
    1a78:	b6 01       	movw	r22, r12
    1a7a:	0e 94 bd 11 	call	0x237a	; 0x237a <__gesf2>
    1a7e:	87 fd       	sbrc	r24, 7
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <_Z8distanceff+0x96>
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <_Z8distanceff+0x9a>
    1a88:	8f ef       	ldi	r24, 0xFF	; 255
    1a8a:	9f ef       	ldi	r25, 0xFF	; 255
    r *= sign;
    return r;
    1a8c:	c8 9f       	mul	r28, r24
    1a8e:	b0 01       	movw	r22, r0
    1a90:	c9 9f       	mul	r28, r25
    1a92:	70 0d       	add	r23, r0
    1a94:	d8 9f       	mul	r29, r24
    1a96:	70 0d       	add	r23, r0
    1a98:	11 24       	eor	r1, r1
    1a9a:	07 2e       	mov	r0, r23
    1a9c:	00 0c       	add	r0, r0
    1a9e:	88 0b       	sbc	r24, r24
    1aa0:	99 0b       	sbc	r25, r25
    1aa2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
}
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	df 90       	pop	r13
    1ab0:	cf 90       	pop	r12
    1ab2:	08 95       	ret

00001ab4 <setup>:

void setup(void)
{

    //initialize the variables we're linked to
    Input = 90;
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a4 eb       	ldi	r26, 0xB4	; 180
    1aba:	b2 e4       	ldi	r27, 0x42	; 66
    1abc:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <Input>
    1ac0:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <Input+0x1>
    1ac4:	a0 93 8b 02 	sts	0x028B, r26	; 0x80028b <Input+0x2>
    1ac8:	b0 93 8c 02 	sts	0x028C, r27	; 0x80028c <Input+0x3>
    Setpoint = 100;
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a8 ec       	ldi	r26, 0xC8	; 200
    1ad2:	b2 e4       	ldi	r27, 0x42	; 66
    1ad4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Setpoint>
    1ad8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <Setpoint+0x1>
    1adc:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <Setpoint+0x2>
    1ae0:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <Setpoint+0x3>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1ae4:	26 e0       	ldi	r18, 0x06	; 6
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	55 e2       	ldi	r21, 0x25	; 37
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	84 eb       	ldi	r24, 0xB4	; 180
    1af0:	92 e0       	ldi	r25, 0x02	; 2
    1af2:	0e 94 34 13 	call	0x2668	; 0x2668 <_ZN14HardwareSerial5beginEmh>

    Serial.begin(9600);

    
    /* Initialize the sensor */
    if(!mag.begin())
    1af6:	8d e8       	ldi	r24, 0x8D	; 141
    1af8:	92 e0       	ldi	r25, 0x02	; 2
    1afa:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN6Sensor5beginEv>
    1afe:	81 11       	cpse	r24, r1
    1b00:	07 c0       	rjmp	.+14     	; 0x1b10 <setup+0x5c>
    {
        /* There was a problem detecting the LSM303 ... check your connections */
        Serial.println("Ooops, no LSM303 detected ... Check your wiring!");
    1b02:	6f e9       	ldi	r22, 0x9F	; 159
    1b04:	71 e0       	ldi	r23, 0x01	; 1
    1b06:	84 eb       	ldi	r24, 0xB4	; 180
    1b08:	92 e0       	ldi	r25, 0x02	; 2
    1b0a:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN5Print7printlnEPKc>
    1b0e:	ff cf       	rjmp	.-2      	; 0x1b0e <setup+0x5a>
        while(1);
    }
    pinMode(B_1A,OUTPUT);
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	8b e0       	ldi	r24, 0x0B	; 11
    1b14:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <pinMode>
    pinMode(B_1B,OUTPUT);
    1b18:	61 e0       	ldi	r22, 0x01	; 1
    1b1a:	8a e0       	ldi	r24, 0x0A	; 10
    1b1c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <pinMode>
    digitalWrite(B_1A, LOW);
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	8b e0       	ldi	r24, 0x0B	; 11
    1b24:	0e 94 76 17 	call	0x2eec	; 0x2eec <digitalWrite>
    digitalWrite(B_1B,LOW);
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	8a e0       	ldi	r24, 0x0A	; 10
    1b2c:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <digitalWrite>

00001b30 <_Z6runForiii>:
    
}

void runFor(int power, int forMs, int direction)
{
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	8b 01       	movw	r16, r22
    //	char buffer[100];
    //	sprintf(buffer,"Power: %i time %i: direction %i", power, forMs, direction);
    if(direction == 1)
    1b38:	41 30       	cpi	r20, 0x01	; 1
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	11 f4       	brne	.+4      	; 0x1b42 <_Z6runForiii+0x12>
    power -=1;
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <_Z6runForiii+0x1a>
    int pin = (direction == -1 ? B_1A : B_1B);
    1b42:	4f 3f       	cpi	r20, 0xFF	; 255
    1b44:	2f ef       	ldi	r18, 0xFF	; 255
    1b46:	52 07       	cpc	r21, r18
    1b48:	11 f0       	breq	.+4      	; 0x1b4e <_Z6runForiii+0x1e>
    1b4a:	ca e0       	ldi	r28, 0x0A	; 10
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <_Z6runForiii+0x20>
    1b4e:	cb e0       	ldi	r28, 0x0B	; 11
    //	sprintf(buffer,"Pin %i", pin);
    analogWrite(pin,power += direction);
    1b50:	ba 01       	movw	r22, r20
    1b52:	68 0f       	add	r22, r24
    1b54:	79 1f       	adc	r23, r25
    1b56:	8c 2f       	mov	r24, r28
    1b58:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <analogWrite>
    delay(forMs);
    1b5c:	b8 01       	movw	r22, r16
    1b5e:	11 0f       	add	r17, r17
    1b60:	88 0b       	sbc	r24, r24
    1b62:	99 0b       	sbc	r25, r25
    1b64:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <delay>
    analogWrite(pin,0);
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	8c 2f       	mov	r24, r28
    1b6e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <analogWrite>
    digitalWrite(pin, LOW);
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	8c 2f       	mov	r24, r28
    //	delay(10);
    //Serial.println(buffer);
}
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    int pin = (direction == -1 ? B_1A : B_1B);
    //	sprintf(buffer,"Pin %i", pin);
    analogWrite(pin,power += direction);
    delay(forMs);
    analogWrite(pin,0);
    digitalWrite(pin, LOW);
    1b7c:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <digitalWrite>

00001b80 <_Z10averageMagi>:
{
    float x;
    float y;
}	VECT;
VECT averageMag(int of)
{
    1b80:	4f 92       	push	r4
    1b82:	5f 92       	push	r5
    1b84:	6f 92       	push	r6
    1b86:	7f 92       	push	r7
    1b88:	8f 92       	push	r8
    1b8a:	9f 92       	push	r9
    1b8c:	af 92       	push	r10
    1b8e:	bf 92       	push	r11
    1b90:	cf 92       	push	r12
    1b92:	df 92       	push	r13
    1b94:	ef 92       	push	r14
    1b96:	ff 92       	push	r15
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	28 97       	sbiw	r28, 0x08	; 8
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	8c 01       	movw	r16, r24
    VECT sumVect = {0};
    1bb2:	c1 2c       	mov	r12, r1
    1bb4:	d1 2c       	mov	r13, r1
    1bb6:	76 01       	movw	r14, r12
    1bb8:	26 01       	movw	r4, r12
    1bba:	37 01       	movw	r6, r14
    
    //Serial.println("Mag data");
    for(int i = 0; i < of; i++)
    1bbc:	a1 2c       	mov	r10, r1
    1bbe:	b1 2c       	mov	r11, r1
    1bc0:	a0 16       	cp	r10, r16
    1bc2:	b1 06       	cpc	r11, r17
    1bc4:	24 f5       	brge	.+72     	; 0x1c0e <_Z10averageMagi+0x8e>
    {
        mag.read();
    1bc6:	8d e8       	ldi	r24, 0x8D	; 141
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	0e 94 4a 05 	call	0xa94	; 0xa94 <_ZN6Sensor4readEv>
        sumVect.x += mag.x;
    1bce:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <mag+0xc>
    1bd2:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <mag+0xd>
    1bd6:	40 91 9b 02 	lds	r20, 0x029B	; 0x80029b <mag+0xe>
    1bda:	50 91 9c 02 	lds	r21, 0x029C	; 0x80029c <mag+0xf>
    1bde:	c3 01       	movw	r24, r6
    1be0:	b2 01       	movw	r22, r4
    1be2:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__addsf3>
    1be6:	2b 01       	movw	r4, r22
    1be8:	3c 01       	movw	r6, r24
        sumVect.y += mag.y;
    1bea:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <mag+0x10>
    1bee:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <mag+0x11>
    1bf2:	40 91 9f 02 	lds	r20, 0x029F	; 0x80029f <mag+0x12>
    1bf6:	50 91 a0 02 	lds	r21, 0x02A0	; 0x8002a0 <mag+0x13>
    1bfa:	c7 01       	movw	r24, r14
    1bfc:	b6 01       	movw	r22, r12
    1bfe:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__addsf3>
    1c02:	6b 01       	movw	r12, r22
    1c04:	7c 01       	movw	r14, r24
VECT averageMag(int of)
{
    VECT sumVect = {0};
    
    //Serial.println("Mag data");
    for(int i = 0; i < of; i++)
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	a8 1a       	sub	r10, r24
    1c0a:	b8 0a       	sbc	r11, r24
    1c0c:	d9 cf       	rjmp	.-78     	; 0x1bc0 <_Z10averageMagi+0x40>
        //Serial.print(sumVect.x);
        //Serial.print(",");
        //Serial.print(sumVect.y);
        //Serial.print("|");
    }
    sumVect.x = sumVect.x / of;
    1c0e:	b8 01       	movw	r22, r16
    1c10:	11 0f       	add	r17, r17
    1c12:	88 0b       	sbc	r24, r24
    1c14:	99 0b       	sbc	r25, r25
    1c16:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__floatsisf>
    1c1a:	4b 01       	movw	r8, r22
    1c1c:	5c 01       	movw	r10, r24
    // 	Serial.println("Mag avg");
    // 	Serial.print(sumVect.x);
    // 	Serial.print(",");
    // 	Serial.print(sumVect.y);
    //	Serial.println();
    return sumVect;
    1c1e:	9b 01       	movw	r18, r22
    1c20:	ac 01       	movw	r20, r24
    1c22:	c3 01       	movw	r24, r6
    1c24:	b2 01       	movw	r22, r4
    1c26:	0e 94 3c 10 	call	0x2078	; 0x2078 <__divsf3>
    1c2a:	16 2f       	mov	r17, r22
    1c2c:	ab 01       	movw	r20, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	49 83       	std	Y+1, r20	; 0x01
    1c32:	5a 83       	std	Y+2, r21	; 0x02
    1c34:	6b 83       	std	Y+3, r22	; 0x03
    1c36:	7c 83       	std	Y+4, r23	; 0x04
    1c38:	a5 01       	movw	r20, r10
    1c3a:	94 01       	movw	r18, r8
    1c3c:	c7 01       	movw	r24, r14
    1c3e:	b6 01       	movw	r22, r12
    1c40:	0e 94 3c 10 	call	0x2078	; 0x2078 <__divsf3>
    1c44:	e6 2f       	mov	r30, r22
    1c46:	46 2f       	mov	r20, r22
    1c48:	57 2f       	mov	r21, r23
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	4d 83       	std	Y+5, r20	; 0x05
    1c4e:	5e 83       	std	Y+6, r21	; 0x06
    1c50:	6f 83       	std	Y+7, r22	; 0x07
    1c52:	78 87       	std	Y+8, r23	; 0x08
    1c54:	21 2f       	mov	r18, r17
    1c56:	3a 81       	ldd	r19, Y+2	; 0x02
    1c58:	4b 81       	ldd	r20, Y+3	; 0x03
    1c5a:	5c 81       	ldd	r21, Y+4	; 0x04
    1c5c:	6e 2f       	mov	r22, r30
    1c5e:	7e 81       	ldd	r23, Y+6	; 0x06
}
    1c60:	8f 81       	ldd	r24, Y+7	; 0x07
    1c62:	98 85       	ldd	r25, Y+8	; 0x08
    1c64:	28 96       	adiw	r28, 0x08	; 8
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	ff 90       	pop	r15
    1c7a:	ef 90       	pop	r14
    1c7c:	df 90       	pop	r13
    1c7e:	cf 90       	pop	r12
    1c80:	bf 90       	pop	r11
    1c82:	af 90       	pop	r10
    1c84:	9f 90       	pop	r9
    1c86:	8f 90       	pop	r8
    1c88:	7f 90       	pop	r7
    1c8a:	6f 90       	pop	r6
    1c8c:	5f 90       	pop	r5
    1c8e:	4f 90       	pop	r4
    1c90:	08 95       	ret

00001c92 <_Z10GetHeadingv>:


float GetHeading()
{
    1c92:	8f 92       	push	r8
    1c94:	9f 92       	push	r9
    1c96:	af 92       	push	r10
    1c98:	bf 92       	push	r11
    1c9a:	cf 92       	push	r12
    1c9c:	df 92       	push	r13
    1c9e:	ef 92       	push	r14
    1ca0:	ff 92       	push	r15
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	28 97       	sbiw	r28, 0x08	; 8
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    // Calculate the angle of the vector y,x
    auto avgVect = averageMag(20);
    1cb6:	84 e1       	ldi	r24, 0x14	; 20
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_Z10averageMagi>
    1cbe:	29 83       	std	Y+1, r18	; 0x01
    1cc0:	3a 83       	std	Y+2, r19	; 0x02
    1cc2:	4b 83       	std	Y+3, r20	; 0x03
    1cc4:	5c 83       	std	Y+4, r21	; 0x04
    1cc6:	6d 83       	std	Y+5, r22	; 0x05
    1cc8:	7e 83       	std	Y+6, r23	; 0x06
    1cca:	8f 83       	std	Y+7, r24	; 0x07
    1ccc:	98 87       	std	Y+8, r25	; 0x08
    1cce:	89 80       	ldd	r8, Y+1	; 0x01
    1cd0:	9a 80       	ldd	r9, Y+2	; 0x02
    1cd2:	ab 80       	ldd	r10, Y+3	; 0x03
    1cd4:	bc 80       	ldd	r11, Y+4	; 0x04
    1cd6:	cd 80       	ldd	r12, Y+5	; 0x05
    1cd8:	de 80       	ldd	r13, Y+6	; 0x06
    1cda:	ef 80       	ldd	r14, Y+7	; 0x07
    1cdc:	f8 84       	ldd	r15, Y+8	; 0x08

    float heading = 0.0;
    
    if(avgVect.y>0)
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	a9 01       	movw	r20, r18
    1ce4:	c7 01       	movw	r24, r14
    1ce6:	b6 01       	movw	r22, r12
    1ce8:	0e 94 bd 11 	call	0x237a	; 0x237a <__gesf2>
    1cec:	18 16       	cp	r1, r24
    1cee:	dc f4       	brge	.+54     	; 0x1d26 <_Z10GetHeadingv+0x94>
    heading = 90 - atan(avgVect.x/avgVect.y)*180/PI;
    1cf0:	a7 01       	movw	r20, r14
    1cf2:	96 01       	movw	r18, r12
    1cf4:	c5 01       	movw	r24, r10
    1cf6:	b4 01       	movw	r22, r8
    1cf8:	0e 94 3c 10 	call	0x2078	; 0x2078 <__divsf3>
    1cfc:	0e 94 08 10 	call	0x2010	; 0x2010 <atan>
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	44 e3       	ldi	r20, 0x34	; 52
    1d06:	53 e4       	ldi	r21, 0x43	; 67
    1d08:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__mulsf3>
    1d0c:	2b ed       	ldi	r18, 0xDB	; 219
    1d0e:	3f e0       	ldi	r19, 0x0F	; 15
    1d10:	49 e4       	ldi	r20, 0x49	; 73
    1d12:	50 e4       	ldi	r21, 0x40	; 64
    1d14:	0e 94 3c 10 	call	0x2078	; 0x2078 <__divsf3>
    1d18:	9b 01       	movw	r18, r22
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	84 eb       	ldi	r24, 0xB4	; 180
    1d22:	92 e4       	ldi	r25, 0x42	; 66
    1d24:	23 c0       	rjmp	.+70     	; 0x1d6c <_Z10GetHeadingv+0xda>
    else if(avgVect.y<0)
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	a9 01       	movw	r20, r18
    1d2c:	c7 01       	movw	r24, r14
    1d2e:	b6 01       	movw	r22, r12
    1d30:	0e 94 37 10 	call	0x206e	; 0x206e <__cmpsf2>
    1d34:	87 ff       	sbrs	r24, 7
    1d36:	1d c0       	rjmp	.+58     	; 0x1d72 <_Z10GetHeadingv+0xe0>
    heading = 270 - atan(avgVect.x/avgVect.y)*180/PI;
    1d38:	a7 01       	movw	r20, r14
    1d3a:	96 01       	movw	r18, r12
    1d3c:	c5 01       	movw	r24, r10
    1d3e:	b4 01       	movw	r22, r8
    1d40:	0e 94 3c 10 	call	0x2078	; 0x2078 <__divsf3>
    1d44:	0e 94 08 10 	call	0x2010	; 0x2010 <atan>
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	44 e3       	ldi	r20, 0x34	; 52
    1d4e:	53 e4       	ldi	r21, 0x43	; 67
    1d50:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__mulsf3>
    1d54:	2b ed       	ldi	r18, 0xDB	; 219
    1d56:	3f e0       	ldi	r19, 0x0F	; 15
    1d58:	49 e4       	ldi	r20, 0x49	; 73
    1d5a:	50 e4       	ldi	r21, 0x40	; 64
    1d5c:	0e 94 3c 10 	call	0x2078	; 0x2078 <__divsf3>
    1d60:	9b 01       	movw	r18, r22
    1d62:	ac 01       	movw	r20, r24
    1d64:	60 e0       	ldi	r22, 0x00	; 0
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	87 e8       	ldi	r24, 0x87	; 135
    1d6a:	93 e4       	ldi	r25, 0x43	; 67
    1d6c:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__subsf3>
    1d70:	1a c0       	rjmp	.+52     	; 0x1da6 <_Z10GetHeadingv+0x114>
    else if (avgVect.y==0 && avgVect.x < 0)
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	a9 01       	movw	r20, r18
    1d78:	c7 01       	movw	r24, r14
    1d7a:	b6 01       	movw	r22, r12
    1d7c:	0e 94 37 10 	call	0x206e	; 0x206e <__cmpsf2>
    1d80:	81 11       	cpse	r24, r1
    1d82:	0e c0       	rjmp	.+28     	; 0x1da0 <_Z10GetHeadingv+0x10e>
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	c5 01       	movw	r24, r10
    1d8c:	b4 01       	movw	r22, r8
    1d8e:	0e 94 37 10 	call	0x206e	; 0x206e <__cmpsf2>
    1d92:	87 ff       	sbrs	r24, 7
    1d94:	05 c0       	rjmp	.+10     	; 0x1da0 <_Z10GetHeadingv+0x10e>
    heading = 180;
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	84 e3       	ldi	r24, 0x34	; 52
    1d9c:	93 e4       	ldi	r25, 0x43	; 67
    1d9e:	03 c0       	rjmp	.+6      	; 0x1da6 <_Z10GetHeadingv+0x114>
float GetHeading()
{
    // Calculate the angle of the vector y,x
    auto avgVect = averageMag(20);

    float heading = 0.0;
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	cb 01       	movw	r24, r22
    else if (avgVect.y==0 && avgVect.x < 0)
    heading = 180;
    else if (avgVect.y==0 && avgVect.x > 0)
    heading = 0.0;
    return heading;
}
    1da6:	28 96       	adiw	r28, 0x08	; 8
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	ff 90       	pop	r15
    1db8:	ef 90       	pop	r14
    1dba:	df 90       	pop	r13
    1dbc:	cf 90       	pop	r12
    1dbe:	bf 90       	pop	r11
    1dc0:	af 90       	pop	r10
    1dc2:	9f 90       	pop	r9
    1dc4:	8f 90       	pop	r8
    1dc6:	08 95       	ret

00001dc8 <loop>:

float setPoint = 0;
int loopCount = 0;
void loop(void)
{
    1dc8:	4f 92       	push	r4
    1dca:	5f 92       	push	r5
    1dcc:	6f 92       	push	r6
    1dce:	7f 92       	push	r7
    1dd0:	af 92       	push	r10
    1dd2:	bf 92       	push	r11
    1dd4:	cf 92       	push	r12
    1dd6:	df 92       	push	r13
    1dd8:	ef 92       	push	r14
    1dda:	ff 92       	push	r15
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	c4 56       	subi	r28, 0x64	; 100
    1dea:	d1 09       	sbc	r29, r1
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    float heading = GetHeading();
    1df6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <_Z10GetHeadingv>
    1dfa:	2b 01       	movw	r4, r22
    1dfc:	3c 01       	movw	r6, r24
    
    char buffer[100];
    float dist = distance(heading,setPoint);
    1dfe:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <setPoint>
    1e02:	30 91 86 02 	lds	r19, 0x0286	; 0x800286 <setPoint+0x1>
    1e06:	40 91 87 02 	lds	r20, 0x0287	; 0x800287 <setPoint+0x2>
    1e0a:	50 91 88 02 	lds	r21, 0x0288	; 0x800288 <setPoint+0x3>
    1e0e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_Z8distanceff>
    1e12:	6b 01       	movw	r12, r22
    1e14:	7c 01       	movw	r14, r24
    Serial.println(buffer);
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	5c 01       	movw	r10, r24
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	84 eb       	ldi	r24, 0xB4	; 180
    1e20:	92 e0       	ldi	r25, 0x02	; 2
    1e22:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN5Print7printlnEPKc>
    int travelFor = max(min(abs(dist),100),2);
    1e26:	c7 01       	movw	r24, r14
    1e28:	b6 01       	movw	r22, r12
    1e2a:	0e 94 ae 10 	call	0x215c	; 0x215c <__fixsfsi>
    1e2e:	9b 01       	movw	r18, r22
    1e30:	2d 59       	subi	r18, 0x9D	; 157
    1e32:	3f 4f       	sbci	r19, 0xFF	; 255
    1e34:	27 3c       	cpi	r18, 0xC7	; 199
    1e36:	31 05       	cpc	r19, r1
    1e38:	68 f4       	brcc	.+26     	; 0x1e54 <loop+0x8c>
    1e3a:	8b 01       	movw	r16, r22
    1e3c:	77 ff       	sbrs	r23, 7
    1e3e:	04 c0       	rjmp	.+8      	; 0x1e48 <loop+0x80>
    1e40:	00 27       	eor	r16, r16
    1e42:	11 27       	eor	r17, r17
    1e44:	06 1b       	sub	r16, r22
    1e46:	17 0b       	sbc	r17, r23
    1e48:	02 30       	cpi	r16, 0x02	; 2
    1e4a:	11 05       	cpc	r17, r1
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <loop+0x90>
    1e4e:	02 e0       	ldi	r16, 0x02	; 2
    1e50:	10 e0       	ldi	r17, 0x00	; 0
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <loop+0x90>
    1e54:	04 e6       	ldi	r16, 0x64	; 100
    1e56:	10 e0       	ldi	r17, 0x00	; 0
    sprintf(buffer,"H\t\t%i\t\tS\t\t%i\t\tD\t\t%i\t\tT\t\t%i", (int)heading,(int)setPoint,  (int)dist,(int)travelFor);
    1e58:	1f 93       	push	r17
    1e5a:	0f 93       	push	r16
    1e5c:	7f 93       	push	r23
    1e5e:	6f 93       	push	r22
    1e60:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <setPoint>
    1e64:	70 91 86 02 	lds	r23, 0x0286	; 0x800286 <setPoint+0x1>
    1e68:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <setPoint+0x2>
    1e6c:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <setPoint+0x3>
    1e70:	0e 94 ae 10 	call	0x215c	; 0x215c <__fixsfsi>
    1e74:	7f 93       	push	r23
    1e76:	6f 93       	push	r22
    1e78:	c3 01       	movw	r24, r6
    1e7a:	b2 01       	movw	r22, r4
    1e7c:	0e 94 ae 10 	call	0x215c	; 0x215c <__fixsfsi>
    1e80:	7f 93       	push	r23
    1e82:	6f 93       	push	r22
    1e84:	80 ed       	ldi	r24, 0xD0	; 208
    1e86:	91 e0       	ldi	r25, 0x01	; 1
    1e88:	9f 93       	push	r25
    1e8a:	8f 93       	push	r24
    1e8c:	bf 92       	push	r11
    1e8e:	af 92       	push	r10
    1e90:	0e 94 b6 1b 	call	0x376c	; 0x376c <sprintf>
    if(dist < -5)
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 ea       	ldi	r20, 0xA0	; 160
    1ea4:	50 ec       	ldi	r21, 0xC0	; 192
    1ea6:	c7 01       	movw	r24, r14
    1ea8:	b6 01       	movw	r22, r12
    1eaa:	0e 94 37 10 	call	0x206e	; 0x206e <__cmpsf2>
    1eae:	87 ff       	sbrs	r24, 7
    1eb0:	03 c0       	rjmp	.+6      	; 0x1eb8 <loop+0xf0>
    runFor(250, travelFor, 1);
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	0c c0       	rjmp	.+24     	; 0x1ed0 <loop+0x108>
    else if(dist > 5)
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 ea       	ldi	r20, 0xA0	; 160
    1ebe:	50 e4       	ldi	r21, 0x40	; 64
    1ec0:	c7 01       	movw	r24, r14
    1ec2:	b6 01       	movw	r22, r12
    1ec4:	0e 94 bd 11 	call	0x237a	; 0x237a <__gesf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	3c f4       	brge	.+14     	; 0x1eda <loop+0x112>
    runFor(250, travelFor, -1);
    1ecc:	4f ef       	ldi	r20, 0xFF	; 255
    1ece:	5f ef       	ldi	r21, 0xFF	; 255
    1ed0:	b8 01       	movw	r22, r16
    1ed2:	8a ef       	ldi	r24, 0xFA	; 250
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_Z6runForiii>
    
    delay(80);
    1eda:	60 e5       	ldi	r22, 0x50	; 80
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <delay>
}
    1ee6:	cc 59       	subi	r28, 0x9C	; 156
    1ee8:	df 4f       	sbci	r29, 0xFF	; 255
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	df 90       	pop	r13
    1f02:	cf 90       	pop	r12
    1f04:	bf 90       	pop	r11
    1f06:	af 90       	pop	r10
    1f08:	7f 90       	pop	r7
    1f0a:	6f 90       	pop	r6
    1f0c:	5f 90       	pop	r5
    1f0e:	4f 90       	pop	r4
    1f10:	08 95       	ret

00001f12 <_GLOBAL__sub_I_serialConnection>:
    1f12:	0f 93       	push	r16
#include <ArdusatSDK.h>


#define B_1A 11
#define B_1B 10
ArdusatSerial serialConnection(SERIAL_MODE_HARDWARE_AND_SOFTWARE, 8, 9);
    1f14:	00 e0       	ldi	r16, 0x00	; 0
    1f16:	29 e0       	ldi	r18, 0x09	; 9
    1f18:	48 e0       	ldi	r20, 0x08	; 8
    1f1a:	62 e0       	ldi	r22, 0x02	; 2
    1f1c:	85 ea       	ldi	r24, 0xA5	; 165
    1f1e:	92 e0       	ldi	r25, 0x02	; 2
    1f20:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN13ArdusatSerialC1E10serialModehhb>

Magnetic mag;
    1f24:	8d e8       	ldi	r24, 0x8D	; 141
    1f26:	92 e0       	ldi	r25, 0x02	; 2
    runFor(250, travelFor, 1);
    else if(dist > 5)
    runFor(250, travelFor, -1);
    
    delay(80);
}
    1f28:	0f 91       	pop	r16

#define B_1A 11
#define B_1B 10
ArdusatSerial serialConnection(SERIAL_MODE_HARDWARE_AND_SOFTWARE, 8, 9);

Magnetic mag;
    1f2a:	0c 94 64 05 	jmp	0xac8	; 0xac8 <_ZN8MagneticC1Ev>

00001f2e <_GLOBAL__sub_D_serialConnection>:
#include <ArdusatSDK.h>


#define B_1A 11
#define B_1B 10
ArdusatSerial serialConnection(SERIAL_MODE_HARDWARE_AND_SOFTWARE, 8, 9);
    1f2e:	85 ea       	ldi	r24, 0xA5	; 165
    1f30:	92 e0       	ldi	r25, 0x02	; 2
    1f32:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <_ZN13ArdusatSerialD1Ev>

00001f36 <__subsf3>:
    1f36:	50 58       	subi	r21, 0x80	; 128

00001f38 <__addsf3>:
    1f38:	bb 27       	eor	r27, r27
    1f3a:	aa 27       	eor	r26, r26
    1f3c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__addsf3x>
    1f40:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_round>
    1f44:	0e 94 75 11 	call	0x22ea	; 0x22ea <__fp_pscA>
    1f48:	38 f0       	brcs	.+14     	; 0x1f58 <__addsf3+0x20>
    1f4a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__fp_pscB>
    1f4e:	20 f0       	brcs	.+8      	; 0x1f58 <__addsf3+0x20>
    1f50:	39 f4       	brne	.+14     	; 0x1f60 <__addsf3+0x28>
    1f52:	9f 3f       	cpi	r25, 0xFF	; 255
    1f54:	19 f4       	brne	.+6      	; 0x1f5c <__addsf3+0x24>
    1f56:	26 f4       	brtc	.+8      	; 0x1f60 <__addsf3+0x28>
    1f58:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__fp_nan>
    1f5c:	0e f4       	brtc	.+2      	; 0x1f60 <__addsf3+0x28>
    1f5e:	e0 95       	com	r30
    1f60:	e7 fb       	bst	r30, 7
    1f62:	0c 94 45 11 	jmp	0x228a	; 0x228a <__fp_inf>

00001f66 <__addsf3x>:
    1f66:	e9 2f       	mov	r30, r25
    1f68:	0e 94 94 11 	call	0x2328	; 0x2328 <__fp_split3>
    1f6c:	58 f3       	brcs	.-42     	; 0x1f44 <__addsf3+0xc>
    1f6e:	ba 17       	cp	r27, r26
    1f70:	62 07       	cpc	r22, r18
    1f72:	73 07       	cpc	r23, r19
    1f74:	84 07       	cpc	r24, r20
    1f76:	95 07       	cpc	r25, r21
    1f78:	20 f0       	brcs	.+8      	; 0x1f82 <__addsf3x+0x1c>
    1f7a:	79 f4       	brne	.+30     	; 0x1f9a <__addsf3x+0x34>
    1f7c:	a6 f5       	brtc	.+104    	; 0x1fe6 <__addsf3x+0x80>
    1f7e:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__fp_zero>
    1f82:	0e f4       	brtc	.+2      	; 0x1f86 <__addsf3x+0x20>
    1f84:	e0 95       	com	r30
    1f86:	0b 2e       	mov	r0, r27
    1f88:	ba 2f       	mov	r27, r26
    1f8a:	a0 2d       	mov	r26, r0
    1f8c:	0b 01       	movw	r0, r22
    1f8e:	b9 01       	movw	r22, r18
    1f90:	90 01       	movw	r18, r0
    1f92:	0c 01       	movw	r0, r24
    1f94:	ca 01       	movw	r24, r20
    1f96:	a0 01       	movw	r20, r0
    1f98:	11 24       	eor	r1, r1
    1f9a:	ff 27       	eor	r31, r31
    1f9c:	59 1b       	sub	r21, r25
    1f9e:	99 f0       	breq	.+38     	; 0x1fc6 <__addsf3x+0x60>
    1fa0:	59 3f       	cpi	r21, 0xF9	; 249
    1fa2:	50 f4       	brcc	.+20     	; 0x1fb8 <__addsf3x+0x52>
    1fa4:	50 3e       	cpi	r21, 0xE0	; 224
    1fa6:	68 f1       	brcs	.+90     	; 0x2002 <__addsf3x+0x9c>
    1fa8:	1a 16       	cp	r1, r26
    1faa:	f0 40       	sbci	r31, 0x00	; 0
    1fac:	a2 2f       	mov	r26, r18
    1fae:	23 2f       	mov	r18, r19
    1fb0:	34 2f       	mov	r19, r20
    1fb2:	44 27       	eor	r20, r20
    1fb4:	58 5f       	subi	r21, 0xF8	; 248
    1fb6:	f3 cf       	rjmp	.-26     	; 0x1f9e <__addsf3x+0x38>
    1fb8:	46 95       	lsr	r20
    1fba:	37 95       	ror	r19
    1fbc:	27 95       	ror	r18
    1fbe:	a7 95       	ror	r26
    1fc0:	f0 40       	sbci	r31, 0x00	; 0
    1fc2:	53 95       	inc	r21
    1fc4:	c9 f7       	brne	.-14     	; 0x1fb8 <__addsf3x+0x52>
    1fc6:	7e f4       	brtc	.+30     	; 0x1fe6 <__addsf3x+0x80>
    1fc8:	1f 16       	cp	r1, r31
    1fca:	ba 0b       	sbc	r27, r26
    1fcc:	62 0b       	sbc	r22, r18
    1fce:	73 0b       	sbc	r23, r19
    1fd0:	84 0b       	sbc	r24, r20
    1fd2:	ba f0       	brmi	.+46     	; 0x2002 <__addsf3x+0x9c>
    1fd4:	91 50       	subi	r25, 0x01	; 1
    1fd6:	a1 f0       	breq	.+40     	; 0x2000 <__addsf3x+0x9a>
    1fd8:	ff 0f       	add	r31, r31
    1fda:	bb 1f       	adc	r27, r27
    1fdc:	66 1f       	adc	r22, r22
    1fde:	77 1f       	adc	r23, r23
    1fe0:	88 1f       	adc	r24, r24
    1fe2:	c2 f7       	brpl	.-16     	; 0x1fd4 <__addsf3x+0x6e>
    1fe4:	0e c0       	rjmp	.+28     	; 0x2002 <__addsf3x+0x9c>
    1fe6:	ba 0f       	add	r27, r26
    1fe8:	62 1f       	adc	r22, r18
    1fea:	73 1f       	adc	r23, r19
    1fec:	84 1f       	adc	r24, r20
    1fee:	48 f4       	brcc	.+18     	; 0x2002 <__addsf3x+0x9c>
    1ff0:	87 95       	ror	r24
    1ff2:	77 95       	ror	r23
    1ff4:	67 95       	ror	r22
    1ff6:	b7 95       	ror	r27
    1ff8:	f7 95       	ror	r31
    1ffa:	9e 3f       	cpi	r25, 0xFE	; 254
    1ffc:	08 f0       	brcs	.+2      	; 0x2000 <__addsf3x+0x9a>
    1ffe:	b0 cf       	rjmp	.-160    	; 0x1f60 <__addsf3+0x28>
    2000:	93 95       	inc	r25
    2002:	88 0f       	add	r24, r24
    2004:	08 f0       	brcs	.+2      	; 0x2008 <__addsf3x+0xa2>
    2006:	99 27       	eor	r25, r25
    2008:	ee 0f       	add	r30, r30
    200a:	97 95       	ror	r25
    200c:	87 95       	ror	r24
    200e:	08 95       	ret

00002010 <atan>:
    2010:	df 93       	push	r29
    2012:	dd 27       	eor	r29, r29
    2014:	b9 2f       	mov	r27, r25
    2016:	bf 77       	andi	r27, 0x7F	; 127
    2018:	40 e8       	ldi	r20, 0x80	; 128
    201a:	5f e3       	ldi	r21, 0x3F	; 63
    201c:	16 16       	cp	r1, r22
    201e:	17 06       	cpc	r1, r23
    2020:	48 07       	cpc	r20, r24
    2022:	5b 07       	cpc	r21, r27
    2024:	18 f4       	brcc	.+6      	; 0x202c <atan+0x1c>
    2026:	d9 2f       	mov	r29, r25
    2028:	0e 94 c2 11 	call	0x2384	; 0x2384 <inverse>
    202c:	9f 93       	push	r25
    202e:	8f 93       	push	r24
    2030:	7f 93       	push	r23
    2032:	6f 93       	push	r22
    2034:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <square>
    2038:	e6 e9       	ldi	r30, 0x96	; 150
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	0e 94 4e 11 	call	0x229c	; 0x229c <__fp_powser>
    2040:	0e 94 83 11 	call	0x2306	; 0x2306 <__fp_round>
    2044:	2f 91       	pop	r18
    2046:	3f 91       	pop	r19
    2048:	4f 91       	pop	r20
    204a:	5f 91       	pop	r21
    204c:	0e 94 10 12 	call	0x2420	; 0x2420 <__mulsf3x>
    2050:	dd 23       	and	r29, r29
    2052:	51 f0       	breq	.+20     	; 0x2068 <atan+0x58>
    2054:	90 58       	subi	r25, 0x80	; 128
    2056:	a2 ea       	ldi	r26, 0xA2	; 162
    2058:	2a ed       	ldi	r18, 0xDA	; 218
    205a:	3f e0       	ldi	r19, 0x0F	; 15
    205c:	49 ec       	ldi	r20, 0xC9	; 201
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	d0 78       	andi	r29, 0x80	; 128
    2062:	5d 27       	eor	r21, r29
    2064:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__addsf3x>
    2068:	df 91       	pop	r29
    206a:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_round>

0000206e <__cmpsf2>:
    206e:	0e 94 21 11 	call	0x2242	; 0x2242 <__fp_cmp>
    2072:	08 f4       	brcc	.+2      	; 0x2076 <__cmpsf2+0x8>
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	08 95       	ret

00002078 <__divsf3>:
    2078:	0e 94 50 10 	call	0x20a0	; 0x20a0 <__divsf3x>
    207c:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_round>
    2080:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__fp_pscB>
    2084:	58 f0       	brcs	.+22     	; 0x209c <__divsf3+0x24>
    2086:	0e 94 75 11 	call	0x22ea	; 0x22ea <__fp_pscA>
    208a:	40 f0       	brcs	.+16     	; 0x209c <__divsf3+0x24>
    208c:	29 f4       	brne	.+10     	; 0x2098 <__divsf3+0x20>
    208e:	5f 3f       	cpi	r21, 0xFF	; 255
    2090:	29 f0       	breq	.+10     	; 0x209c <__divsf3+0x24>
    2092:	0c 94 45 11 	jmp	0x228a	; 0x228a <__fp_inf>
    2096:	51 11       	cpse	r21, r1
    2098:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__fp_szero>
    209c:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__fp_nan>

000020a0 <__divsf3x>:
    20a0:	0e 94 94 11 	call	0x2328	; 0x2328 <__fp_split3>
    20a4:	68 f3       	brcs	.-38     	; 0x2080 <__divsf3+0x8>

000020a6 <__divsf3_pse>:
    20a6:	99 23       	and	r25, r25
    20a8:	b1 f3       	breq	.-20     	; 0x2096 <__divsf3+0x1e>
    20aa:	55 23       	and	r21, r21
    20ac:	91 f3       	breq	.-28     	; 0x2092 <__divsf3+0x1a>
    20ae:	95 1b       	sub	r25, r21
    20b0:	55 0b       	sbc	r21, r21
    20b2:	bb 27       	eor	r27, r27
    20b4:	aa 27       	eor	r26, r26
    20b6:	62 17       	cp	r22, r18
    20b8:	73 07       	cpc	r23, r19
    20ba:	84 07       	cpc	r24, r20
    20bc:	38 f0       	brcs	.+14     	; 0x20cc <__divsf3_pse+0x26>
    20be:	9f 5f       	subi	r25, 0xFF	; 255
    20c0:	5f 4f       	sbci	r21, 0xFF	; 255
    20c2:	22 0f       	add	r18, r18
    20c4:	33 1f       	adc	r19, r19
    20c6:	44 1f       	adc	r20, r20
    20c8:	aa 1f       	adc	r26, r26
    20ca:	a9 f3       	breq	.-22     	; 0x20b6 <__divsf3_pse+0x10>
    20cc:	35 d0       	rcall	.+106    	; 0x2138 <__divsf3_pse+0x92>
    20ce:	0e 2e       	mov	r0, r30
    20d0:	3a f0       	brmi	.+14     	; 0x20e0 <__divsf3_pse+0x3a>
    20d2:	e0 e8       	ldi	r30, 0x80	; 128
    20d4:	32 d0       	rcall	.+100    	; 0x213a <__divsf3_pse+0x94>
    20d6:	91 50       	subi	r25, 0x01	; 1
    20d8:	50 40       	sbci	r21, 0x00	; 0
    20da:	e6 95       	lsr	r30
    20dc:	00 1c       	adc	r0, r0
    20de:	ca f7       	brpl	.-14     	; 0x20d2 <__divsf3_pse+0x2c>
    20e0:	2b d0       	rcall	.+86     	; 0x2138 <__divsf3_pse+0x92>
    20e2:	fe 2f       	mov	r31, r30
    20e4:	29 d0       	rcall	.+82     	; 0x2138 <__divsf3_pse+0x92>
    20e6:	66 0f       	add	r22, r22
    20e8:	77 1f       	adc	r23, r23
    20ea:	88 1f       	adc	r24, r24
    20ec:	bb 1f       	adc	r27, r27
    20ee:	26 17       	cp	r18, r22
    20f0:	37 07       	cpc	r19, r23
    20f2:	48 07       	cpc	r20, r24
    20f4:	ab 07       	cpc	r26, r27
    20f6:	b0 e8       	ldi	r27, 0x80	; 128
    20f8:	09 f0       	breq	.+2      	; 0x20fc <__divsf3_pse+0x56>
    20fa:	bb 0b       	sbc	r27, r27
    20fc:	80 2d       	mov	r24, r0
    20fe:	bf 01       	movw	r22, r30
    2100:	ff 27       	eor	r31, r31
    2102:	93 58       	subi	r25, 0x83	; 131
    2104:	5f 4f       	sbci	r21, 0xFF	; 255
    2106:	3a f0       	brmi	.+14     	; 0x2116 <__divsf3_pse+0x70>
    2108:	9e 3f       	cpi	r25, 0xFE	; 254
    210a:	51 05       	cpc	r21, r1
    210c:	78 f0       	brcs	.+30     	; 0x212c <__divsf3_pse+0x86>
    210e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__fp_inf>
    2112:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__fp_szero>
    2116:	5f 3f       	cpi	r21, 0xFF	; 255
    2118:	e4 f3       	brlt	.-8      	; 0x2112 <__divsf3_pse+0x6c>
    211a:	98 3e       	cpi	r25, 0xE8	; 232
    211c:	d4 f3       	brlt	.-12     	; 0x2112 <__divsf3_pse+0x6c>
    211e:	86 95       	lsr	r24
    2120:	77 95       	ror	r23
    2122:	67 95       	ror	r22
    2124:	b7 95       	ror	r27
    2126:	f7 95       	ror	r31
    2128:	9f 5f       	subi	r25, 0xFF	; 255
    212a:	c9 f7       	brne	.-14     	; 0x211e <__divsf3_pse+0x78>
    212c:	88 0f       	add	r24, r24
    212e:	91 1d       	adc	r25, r1
    2130:	96 95       	lsr	r25
    2132:	87 95       	ror	r24
    2134:	97 f9       	bld	r25, 7
    2136:	08 95       	ret
    2138:	e1 e0       	ldi	r30, 0x01	; 1
    213a:	66 0f       	add	r22, r22
    213c:	77 1f       	adc	r23, r23
    213e:	88 1f       	adc	r24, r24
    2140:	bb 1f       	adc	r27, r27
    2142:	62 17       	cp	r22, r18
    2144:	73 07       	cpc	r23, r19
    2146:	84 07       	cpc	r24, r20
    2148:	ba 07       	cpc	r27, r26
    214a:	20 f0       	brcs	.+8      	; 0x2154 <__divsf3_pse+0xae>
    214c:	62 1b       	sub	r22, r18
    214e:	73 0b       	sbc	r23, r19
    2150:	84 0b       	sbc	r24, r20
    2152:	ba 0b       	sbc	r27, r26
    2154:	ee 1f       	adc	r30, r30
    2156:	88 f7       	brcc	.-30     	; 0x213a <__divsf3_pse+0x94>
    2158:	e0 95       	com	r30
    215a:	08 95       	ret

0000215c <__fixsfsi>:
    215c:	0e 94 b5 10 	call	0x216a	; 0x216a <__fixunssfsi>
    2160:	68 94       	set
    2162:	b1 11       	cpse	r27, r1
    2164:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__fp_szero>
    2168:	08 95       	ret

0000216a <__fixunssfsi>:
    216a:	0e 94 9c 11 	call	0x2338	; 0x2338 <__fp_splitA>
    216e:	88 f0       	brcs	.+34     	; 0x2192 <__fixunssfsi+0x28>
    2170:	9f 57       	subi	r25, 0x7F	; 127
    2172:	98 f0       	brcs	.+38     	; 0x219a <__fixunssfsi+0x30>
    2174:	b9 2f       	mov	r27, r25
    2176:	99 27       	eor	r25, r25
    2178:	b7 51       	subi	r27, 0x17	; 23
    217a:	b0 f0       	brcs	.+44     	; 0x21a8 <__fixunssfsi+0x3e>
    217c:	e1 f0       	breq	.+56     	; 0x21b6 <__fixunssfsi+0x4c>
    217e:	66 0f       	add	r22, r22
    2180:	77 1f       	adc	r23, r23
    2182:	88 1f       	adc	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	1a f0       	brmi	.+6      	; 0x218e <__fixunssfsi+0x24>
    2188:	ba 95       	dec	r27
    218a:	c9 f7       	brne	.-14     	; 0x217e <__fixunssfsi+0x14>
    218c:	14 c0       	rjmp	.+40     	; 0x21b6 <__fixunssfsi+0x4c>
    218e:	b1 30       	cpi	r27, 0x01	; 1
    2190:	91 f0       	breq	.+36     	; 0x21b6 <__fixunssfsi+0x4c>
    2192:	0e 94 b6 11 	call	0x236c	; 0x236c <__fp_zero>
    2196:	b1 e0       	ldi	r27, 0x01	; 1
    2198:	08 95       	ret
    219a:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__fp_zero>
    219e:	67 2f       	mov	r22, r23
    21a0:	78 2f       	mov	r23, r24
    21a2:	88 27       	eor	r24, r24
    21a4:	b8 5f       	subi	r27, 0xF8	; 248
    21a6:	39 f0       	breq	.+14     	; 0x21b6 <__fixunssfsi+0x4c>
    21a8:	b9 3f       	cpi	r27, 0xF9	; 249
    21aa:	cc f3       	brlt	.-14     	; 0x219e <__fixunssfsi+0x34>
    21ac:	86 95       	lsr	r24
    21ae:	77 95       	ror	r23
    21b0:	67 95       	ror	r22
    21b2:	b3 95       	inc	r27
    21b4:	d9 f7       	brne	.-10     	; 0x21ac <__fixunssfsi+0x42>
    21b6:	3e f4       	brtc	.+14     	; 0x21c6 <__fixunssfsi+0x5c>
    21b8:	90 95       	com	r25
    21ba:	80 95       	com	r24
    21bc:	70 95       	com	r23
    21be:	61 95       	neg	r22
    21c0:	7f 4f       	sbci	r23, 0xFF	; 255
    21c2:	8f 4f       	sbci	r24, 0xFF	; 255
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	08 95       	ret

000021c8 <__floatunsisf>:
    21c8:	e8 94       	clt
    21ca:	09 c0       	rjmp	.+18     	; 0x21de <__floatsisf+0x12>

000021cc <__floatsisf>:
    21cc:	97 fb       	bst	r25, 7
    21ce:	3e f4       	brtc	.+14     	; 0x21de <__floatsisf+0x12>
    21d0:	90 95       	com	r25
    21d2:	80 95       	com	r24
    21d4:	70 95       	com	r23
    21d6:	61 95       	neg	r22
    21d8:	7f 4f       	sbci	r23, 0xFF	; 255
    21da:	8f 4f       	sbci	r24, 0xFF	; 255
    21dc:	9f 4f       	sbci	r25, 0xFF	; 255
    21de:	99 23       	and	r25, r25
    21e0:	a9 f0       	breq	.+42     	; 0x220c <__floatsisf+0x40>
    21e2:	f9 2f       	mov	r31, r25
    21e4:	96 e9       	ldi	r25, 0x96	; 150
    21e6:	bb 27       	eor	r27, r27
    21e8:	93 95       	inc	r25
    21ea:	f6 95       	lsr	r31
    21ec:	87 95       	ror	r24
    21ee:	77 95       	ror	r23
    21f0:	67 95       	ror	r22
    21f2:	b7 95       	ror	r27
    21f4:	f1 11       	cpse	r31, r1
    21f6:	f8 cf       	rjmp	.-16     	; 0x21e8 <__floatsisf+0x1c>
    21f8:	fa f4       	brpl	.+62     	; 0x2238 <__floatsisf+0x6c>
    21fa:	bb 0f       	add	r27, r27
    21fc:	11 f4       	brne	.+4      	; 0x2202 <__floatsisf+0x36>
    21fe:	60 ff       	sbrs	r22, 0
    2200:	1b c0       	rjmp	.+54     	; 0x2238 <__floatsisf+0x6c>
    2202:	6f 5f       	subi	r22, 0xFF	; 255
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	8f 4f       	sbci	r24, 0xFF	; 255
    2208:	9f 4f       	sbci	r25, 0xFF	; 255
    220a:	16 c0       	rjmp	.+44     	; 0x2238 <__floatsisf+0x6c>
    220c:	88 23       	and	r24, r24
    220e:	11 f0       	breq	.+4      	; 0x2214 <__floatsisf+0x48>
    2210:	96 e9       	ldi	r25, 0x96	; 150
    2212:	11 c0       	rjmp	.+34     	; 0x2236 <__floatsisf+0x6a>
    2214:	77 23       	and	r23, r23
    2216:	21 f0       	breq	.+8      	; 0x2220 <__floatsisf+0x54>
    2218:	9e e8       	ldi	r25, 0x8E	; 142
    221a:	87 2f       	mov	r24, r23
    221c:	76 2f       	mov	r23, r22
    221e:	05 c0       	rjmp	.+10     	; 0x222a <__floatsisf+0x5e>
    2220:	66 23       	and	r22, r22
    2222:	71 f0       	breq	.+28     	; 0x2240 <__floatsisf+0x74>
    2224:	96 e8       	ldi	r25, 0x86	; 134
    2226:	86 2f       	mov	r24, r22
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	60 e0       	ldi	r22, 0x00	; 0
    222c:	2a f0       	brmi	.+10     	; 0x2238 <__floatsisf+0x6c>
    222e:	9a 95       	dec	r25
    2230:	66 0f       	add	r22, r22
    2232:	77 1f       	adc	r23, r23
    2234:	88 1f       	adc	r24, r24
    2236:	da f7       	brpl	.-10     	; 0x222e <__floatsisf+0x62>
    2238:	88 0f       	add	r24, r24
    223a:	96 95       	lsr	r25
    223c:	87 95       	ror	r24
    223e:	97 f9       	bld	r25, 7
    2240:	08 95       	ret

00002242 <__fp_cmp>:
    2242:	99 0f       	add	r25, r25
    2244:	00 08       	sbc	r0, r0
    2246:	55 0f       	add	r21, r21
    2248:	aa 0b       	sbc	r26, r26
    224a:	e0 e8       	ldi	r30, 0x80	; 128
    224c:	fe ef       	ldi	r31, 0xFE	; 254
    224e:	16 16       	cp	r1, r22
    2250:	17 06       	cpc	r1, r23
    2252:	e8 07       	cpc	r30, r24
    2254:	f9 07       	cpc	r31, r25
    2256:	c0 f0       	brcs	.+48     	; 0x2288 <__fp_cmp+0x46>
    2258:	12 16       	cp	r1, r18
    225a:	13 06       	cpc	r1, r19
    225c:	e4 07       	cpc	r30, r20
    225e:	f5 07       	cpc	r31, r21
    2260:	98 f0       	brcs	.+38     	; 0x2288 <__fp_cmp+0x46>
    2262:	62 1b       	sub	r22, r18
    2264:	73 0b       	sbc	r23, r19
    2266:	84 0b       	sbc	r24, r20
    2268:	95 0b       	sbc	r25, r21
    226a:	39 f4       	brne	.+14     	; 0x227a <__fp_cmp+0x38>
    226c:	0a 26       	eor	r0, r26
    226e:	61 f0       	breq	.+24     	; 0x2288 <__fp_cmp+0x46>
    2270:	23 2b       	or	r18, r19
    2272:	24 2b       	or	r18, r20
    2274:	25 2b       	or	r18, r21
    2276:	21 f4       	brne	.+8      	; 0x2280 <__fp_cmp+0x3e>
    2278:	08 95       	ret
    227a:	0a 26       	eor	r0, r26
    227c:	09 f4       	brne	.+2      	; 0x2280 <__fp_cmp+0x3e>
    227e:	a1 40       	sbci	r26, 0x01	; 1
    2280:	a6 95       	lsr	r26
    2282:	8f ef       	ldi	r24, 0xFF	; 255
    2284:	81 1d       	adc	r24, r1
    2286:	81 1d       	adc	r24, r1
    2288:	08 95       	ret

0000228a <__fp_inf>:
    228a:	97 f9       	bld	r25, 7
    228c:	9f 67       	ori	r25, 0x7F	; 127
    228e:	80 e8       	ldi	r24, 0x80	; 128
    2290:	70 e0       	ldi	r23, 0x00	; 0
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	08 95       	ret

00002296 <__fp_nan>:
    2296:	9f ef       	ldi	r25, 0xFF	; 255
    2298:	80 ec       	ldi	r24, 0xC0	; 192
    229a:	08 95       	ret

0000229c <__fp_powser>:
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	1f 93       	push	r17
    22a2:	0f 93       	push	r16
    22a4:	ff 92       	push	r15
    22a6:	ef 92       	push	r14
    22a8:	df 92       	push	r13
    22aa:	7b 01       	movw	r14, r22
    22ac:	8c 01       	movw	r16, r24
    22ae:	68 94       	set
    22b0:	06 c0       	rjmp	.+12     	; 0x22be <__fp_powser+0x22>
    22b2:	da 2e       	mov	r13, r26
    22b4:	ef 01       	movw	r28, r30
    22b6:	0e 94 10 12 	call	0x2420	; 0x2420 <__mulsf3x>
    22ba:	fe 01       	movw	r30, r28
    22bc:	e8 94       	clt
    22be:	a5 91       	lpm	r26, Z+
    22c0:	25 91       	lpm	r18, Z+
    22c2:	35 91       	lpm	r19, Z+
    22c4:	45 91       	lpm	r20, Z+
    22c6:	55 91       	lpm	r21, Z+
    22c8:	a6 f3       	brts	.-24     	; 0x22b2 <__fp_powser+0x16>
    22ca:	ef 01       	movw	r28, r30
    22cc:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__addsf3x>
    22d0:	fe 01       	movw	r30, r28
    22d2:	97 01       	movw	r18, r14
    22d4:	a8 01       	movw	r20, r16
    22d6:	da 94       	dec	r13
    22d8:	69 f7       	brne	.-38     	; 0x22b4 <__fp_powser+0x18>
    22da:	df 90       	pop	r13
    22dc:	ef 90       	pop	r14
    22de:	ff 90       	pop	r15
    22e0:	0f 91       	pop	r16
    22e2:	1f 91       	pop	r17
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <__fp_pscA>:
    22ea:	00 24       	eor	r0, r0
    22ec:	0a 94       	dec	r0
    22ee:	16 16       	cp	r1, r22
    22f0:	17 06       	cpc	r1, r23
    22f2:	18 06       	cpc	r1, r24
    22f4:	09 06       	cpc	r0, r25
    22f6:	08 95       	ret

000022f8 <__fp_pscB>:
    22f8:	00 24       	eor	r0, r0
    22fa:	0a 94       	dec	r0
    22fc:	12 16       	cp	r1, r18
    22fe:	13 06       	cpc	r1, r19
    2300:	14 06       	cpc	r1, r20
    2302:	05 06       	cpc	r0, r21
    2304:	08 95       	ret

00002306 <__fp_round>:
    2306:	09 2e       	mov	r0, r25
    2308:	03 94       	inc	r0
    230a:	00 0c       	add	r0, r0
    230c:	11 f4       	brne	.+4      	; 0x2312 <__fp_round+0xc>
    230e:	88 23       	and	r24, r24
    2310:	52 f0       	brmi	.+20     	; 0x2326 <__fp_round+0x20>
    2312:	bb 0f       	add	r27, r27
    2314:	40 f4       	brcc	.+16     	; 0x2326 <__fp_round+0x20>
    2316:	bf 2b       	or	r27, r31
    2318:	11 f4       	brne	.+4      	; 0x231e <__fp_round+0x18>
    231a:	60 ff       	sbrs	r22, 0
    231c:	04 c0       	rjmp	.+8      	; 0x2326 <__fp_round+0x20>
    231e:	6f 5f       	subi	r22, 0xFF	; 255
    2320:	7f 4f       	sbci	r23, 0xFF	; 255
    2322:	8f 4f       	sbci	r24, 0xFF	; 255
    2324:	9f 4f       	sbci	r25, 0xFF	; 255
    2326:	08 95       	ret

00002328 <__fp_split3>:
    2328:	57 fd       	sbrc	r21, 7
    232a:	90 58       	subi	r25, 0x80	; 128
    232c:	44 0f       	add	r20, r20
    232e:	55 1f       	adc	r21, r21
    2330:	59 f0       	breq	.+22     	; 0x2348 <__fp_splitA+0x10>
    2332:	5f 3f       	cpi	r21, 0xFF	; 255
    2334:	71 f0       	breq	.+28     	; 0x2352 <__fp_splitA+0x1a>
    2336:	47 95       	ror	r20

00002338 <__fp_splitA>:
    2338:	88 0f       	add	r24, r24
    233a:	97 fb       	bst	r25, 7
    233c:	99 1f       	adc	r25, r25
    233e:	61 f0       	breq	.+24     	; 0x2358 <__fp_splitA+0x20>
    2340:	9f 3f       	cpi	r25, 0xFF	; 255
    2342:	79 f0       	breq	.+30     	; 0x2362 <__fp_splitA+0x2a>
    2344:	87 95       	ror	r24
    2346:	08 95       	ret
    2348:	12 16       	cp	r1, r18
    234a:	13 06       	cpc	r1, r19
    234c:	14 06       	cpc	r1, r20
    234e:	55 1f       	adc	r21, r21
    2350:	f2 cf       	rjmp	.-28     	; 0x2336 <__fp_split3+0xe>
    2352:	46 95       	lsr	r20
    2354:	f1 df       	rcall	.-30     	; 0x2338 <__fp_splitA>
    2356:	08 c0       	rjmp	.+16     	; 0x2368 <__fp_splitA+0x30>
    2358:	16 16       	cp	r1, r22
    235a:	17 06       	cpc	r1, r23
    235c:	18 06       	cpc	r1, r24
    235e:	99 1f       	adc	r25, r25
    2360:	f1 cf       	rjmp	.-30     	; 0x2344 <__fp_splitA+0xc>
    2362:	86 95       	lsr	r24
    2364:	71 05       	cpc	r23, r1
    2366:	61 05       	cpc	r22, r1
    2368:	08 94       	sec
    236a:	08 95       	ret

0000236c <__fp_zero>:
    236c:	e8 94       	clt

0000236e <__fp_szero>:
    236e:	bb 27       	eor	r27, r27
    2370:	66 27       	eor	r22, r22
    2372:	77 27       	eor	r23, r23
    2374:	cb 01       	movw	r24, r22
    2376:	97 f9       	bld	r25, 7
    2378:	08 95       	ret

0000237a <__gesf2>:
    237a:	0e 94 21 11 	call	0x2242	; 0x2242 <__fp_cmp>
    237e:	08 f4       	brcc	.+2      	; 0x2382 <__gesf2+0x8>
    2380:	8f ef       	ldi	r24, 0xFF	; 255
    2382:	08 95       	ret

00002384 <inverse>:
    2384:	9b 01       	movw	r18, r22
    2386:	ac 01       	movw	r20, r24
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	70 e0       	ldi	r23, 0x00	; 0
    238c:	80 e8       	ldi	r24, 0x80	; 128
    238e:	9f e3       	ldi	r25, 0x3F	; 63
    2390:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__divsf3>

00002394 <lround>:
    2394:	0e 94 9c 11 	call	0x2338	; 0x2338 <__fp_splitA>
    2398:	58 f1       	brcs	.+86     	; 0x23f0 <lround+0x5c>
    239a:	9e 57       	subi	r25, 0x7E	; 126
    239c:	60 f1       	brcs	.+88     	; 0x23f6 <lround+0x62>
    239e:	98 51       	subi	r25, 0x18	; 24
    23a0:	a0 f0       	brcs	.+40     	; 0x23ca <lround+0x36>
    23a2:	e9 f0       	breq	.+58     	; 0x23de <lround+0x4a>
    23a4:	98 30       	cpi	r25, 0x08	; 8
    23a6:	20 f5       	brcc	.+72     	; 0x23f0 <lround+0x5c>
    23a8:	09 2e       	mov	r0, r25
    23aa:	99 27       	eor	r25, r25
    23ac:	66 0f       	add	r22, r22
    23ae:	77 1f       	adc	r23, r23
    23b0:	88 1f       	adc	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	0a 94       	dec	r0
    23b6:	d1 f7       	brne	.-12     	; 0x23ac <lround+0x18>
    23b8:	12 c0       	rjmp	.+36     	; 0x23de <lround+0x4a>
    23ba:	06 2e       	mov	r0, r22
    23bc:	67 2f       	mov	r22, r23
    23be:	78 2f       	mov	r23, r24
    23c0:	88 27       	eor	r24, r24
    23c2:	98 5f       	subi	r25, 0xF8	; 248
    23c4:	11 f4       	brne	.+4      	; 0x23ca <lround+0x36>
    23c6:	00 0c       	add	r0, r0
    23c8:	07 c0       	rjmp	.+14     	; 0x23d8 <lround+0x44>
    23ca:	99 3f       	cpi	r25, 0xF9	; 249
    23cc:	b4 f3       	brlt	.-20     	; 0x23ba <lround+0x26>
    23ce:	86 95       	lsr	r24
    23d0:	77 95       	ror	r23
    23d2:	67 95       	ror	r22
    23d4:	93 95       	inc	r25
    23d6:	d9 f7       	brne	.-10     	; 0x23ce <lround+0x3a>
    23d8:	61 1d       	adc	r22, r1
    23da:	71 1d       	adc	r23, r1
    23dc:	81 1d       	adc	r24, r1
    23de:	3e f4       	brtc	.+14     	; 0x23ee <lround+0x5a>
    23e0:	90 95       	com	r25
    23e2:	80 95       	com	r24
    23e4:	70 95       	com	r23
    23e6:	61 95       	neg	r22
    23e8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ea:	8f 4f       	sbci	r24, 0xFF	; 255
    23ec:	9f 4f       	sbci	r25, 0xFF	; 255
    23ee:	08 95       	ret
    23f0:	68 94       	set
    23f2:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__fp_szero>
    23f6:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__fp_zero>

000023fa <__mulsf3>:
    23fa:	0e 94 10 12 	call	0x2420	; 0x2420 <__mulsf3x>
    23fe:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_round>
    2402:	0e 94 75 11 	call	0x22ea	; 0x22ea <__fp_pscA>
    2406:	38 f0       	brcs	.+14     	; 0x2416 <__mulsf3+0x1c>
    2408:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__fp_pscB>
    240c:	20 f0       	brcs	.+8      	; 0x2416 <__mulsf3+0x1c>
    240e:	95 23       	and	r25, r21
    2410:	11 f0       	breq	.+4      	; 0x2416 <__mulsf3+0x1c>
    2412:	0c 94 45 11 	jmp	0x228a	; 0x228a <__fp_inf>
    2416:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__fp_nan>
    241a:	11 24       	eor	r1, r1
    241c:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__fp_szero>

00002420 <__mulsf3x>:
    2420:	0e 94 94 11 	call	0x2328	; 0x2328 <__fp_split3>
    2424:	70 f3       	brcs	.-36     	; 0x2402 <__mulsf3+0x8>

00002426 <__mulsf3_pse>:
    2426:	95 9f       	mul	r25, r21
    2428:	c1 f3       	breq	.-16     	; 0x241a <__mulsf3+0x20>
    242a:	95 0f       	add	r25, r21
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	55 1f       	adc	r21, r21
    2430:	62 9f       	mul	r22, r18
    2432:	f0 01       	movw	r30, r0
    2434:	72 9f       	mul	r23, r18
    2436:	bb 27       	eor	r27, r27
    2438:	f0 0d       	add	r31, r0
    243a:	b1 1d       	adc	r27, r1
    243c:	63 9f       	mul	r22, r19
    243e:	aa 27       	eor	r26, r26
    2440:	f0 0d       	add	r31, r0
    2442:	b1 1d       	adc	r27, r1
    2444:	aa 1f       	adc	r26, r26
    2446:	64 9f       	mul	r22, r20
    2448:	66 27       	eor	r22, r22
    244a:	b0 0d       	add	r27, r0
    244c:	a1 1d       	adc	r26, r1
    244e:	66 1f       	adc	r22, r22
    2450:	82 9f       	mul	r24, r18
    2452:	22 27       	eor	r18, r18
    2454:	b0 0d       	add	r27, r0
    2456:	a1 1d       	adc	r26, r1
    2458:	62 1f       	adc	r22, r18
    245a:	73 9f       	mul	r23, r19
    245c:	b0 0d       	add	r27, r0
    245e:	a1 1d       	adc	r26, r1
    2460:	62 1f       	adc	r22, r18
    2462:	83 9f       	mul	r24, r19
    2464:	a0 0d       	add	r26, r0
    2466:	61 1d       	adc	r22, r1
    2468:	22 1f       	adc	r18, r18
    246a:	74 9f       	mul	r23, r20
    246c:	33 27       	eor	r19, r19
    246e:	a0 0d       	add	r26, r0
    2470:	61 1d       	adc	r22, r1
    2472:	23 1f       	adc	r18, r19
    2474:	84 9f       	mul	r24, r20
    2476:	60 0d       	add	r22, r0
    2478:	21 1d       	adc	r18, r1
    247a:	82 2f       	mov	r24, r18
    247c:	76 2f       	mov	r23, r22
    247e:	6a 2f       	mov	r22, r26
    2480:	11 24       	eor	r1, r1
    2482:	9f 57       	subi	r25, 0x7F	; 127
    2484:	50 40       	sbci	r21, 0x00	; 0
    2486:	9a f0       	brmi	.+38     	; 0x24ae <__mulsf3_pse+0x88>
    2488:	f1 f0       	breq	.+60     	; 0x24c6 <__mulsf3_pse+0xa0>
    248a:	88 23       	and	r24, r24
    248c:	4a f0       	brmi	.+18     	; 0x24a0 <__mulsf3_pse+0x7a>
    248e:	ee 0f       	add	r30, r30
    2490:	ff 1f       	adc	r31, r31
    2492:	bb 1f       	adc	r27, r27
    2494:	66 1f       	adc	r22, r22
    2496:	77 1f       	adc	r23, r23
    2498:	88 1f       	adc	r24, r24
    249a:	91 50       	subi	r25, 0x01	; 1
    249c:	50 40       	sbci	r21, 0x00	; 0
    249e:	a9 f7       	brne	.-22     	; 0x248a <__mulsf3_pse+0x64>
    24a0:	9e 3f       	cpi	r25, 0xFE	; 254
    24a2:	51 05       	cpc	r21, r1
    24a4:	80 f0       	brcs	.+32     	; 0x24c6 <__mulsf3_pse+0xa0>
    24a6:	0c 94 45 11 	jmp	0x228a	; 0x228a <__fp_inf>
    24aa:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__fp_szero>
    24ae:	5f 3f       	cpi	r21, 0xFF	; 255
    24b0:	e4 f3       	brlt	.-8      	; 0x24aa <__mulsf3_pse+0x84>
    24b2:	98 3e       	cpi	r25, 0xE8	; 232
    24b4:	d4 f3       	brlt	.-12     	; 0x24aa <__mulsf3_pse+0x84>
    24b6:	86 95       	lsr	r24
    24b8:	77 95       	ror	r23
    24ba:	67 95       	ror	r22
    24bc:	b7 95       	ror	r27
    24be:	f7 95       	ror	r31
    24c0:	e7 95       	ror	r30
    24c2:	9f 5f       	subi	r25, 0xFF	; 255
    24c4:	c1 f7       	brne	.-16     	; 0x24b6 <__mulsf3_pse+0x90>
    24c6:	fe 2b       	or	r31, r30
    24c8:	88 0f       	add	r24, r24
    24ca:	91 1d       	adc	r25, r1
    24cc:	96 95       	lsr	r25
    24ce:	87 95       	ror	r24
    24d0:	97 f9       	bld	r25, 7
    24d2:	08 95       	ret

000024d4 <square>:
    24d4:	9b 01       	movw	r18, r22
    24d6:	ac 01       	movw	r20, r24
    24d8:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__mulsf3>

000024dc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    24dc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    24de:	91 8d       	ldd	r25, Z+25	; 0x19
    24e0:	22 8d       	ldd	r18, Z+26	; 0x1a
    24e2:	89 2f       	mov	r24, r25
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	80 5c       	subi	r24, 0xC0	; 192
    24e8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ea:	82 1b       	sub	r24, r18
    24ec:	91 09       	sbc	r25, r1
}
    24ee:	8f 73       	andi	r24, 0x3F	; 63
    24f0:	99 27       	eor	r25, r25
    24f2:	08 95       	ret

000024f4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    24f4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    24f6:	91 8d       	ldd	r25, Z+25	; 0x19
    24f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    24fa:	98 17       	cp	r25, r24
    24fc:	31 f0       	breq	.+12     	; 0x250a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    24fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2500:	e8 0f       	add	r30, r24
    2502:	f1 1d       	adc	r31, r1
    2504:	85 8d       	ldd	r24, Z+29	; 0x1d
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    250a:	8f ef       	ldi	r24, 0xFF	; 255
    250c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    250e:	08 95       	ret

00002510 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2510:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2512:	91 8d       	ldd	r25, Z+25	; 0x19
    2514:	82 8d       	ldd	r24, Z+26	; 0x1a
    2516:	98 17       	cp	r25, r24
    2518:	61 f0       	breq	.+24     	; 0x2532 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    251a:	82 8d       	ldd	r24, Z+26	; 0x1a
    251c:	df 01       	movw	r26, r30
    251e:	a8 0f       	add	r26, r24
    2520:	b1 1d       	adc	r27, r1
    2522:	5d 96       	adiw	r26, 0x1d	; 29
    2524:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2526:	92 8d       	ldd	r25, Z+26	; 0x1a
    2528:	9f 5f       	subi	r25, 0xFF	; 255
    252a:	9f 73       	andi	r25, 0x3F	; 63
    252c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2532:	8f ef       	ldi	r24, 0xFF	; 255
    2534:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2536:	08 95       	ret

00002538 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2538:	81 ef       	ldi	r24, 0xF1	; 241
    253a:	93 e1       	ldi	r25, 0x13	; 19
    253c:	89 2b       	or	r24, r25
    253e:	49 f0       	breq	.+18     	; 0x2552 <_Z14serialEventRunv+0x1a>
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	89 2b       	or	r24, r25
    2546:	29 f0       	breq	.+10     	; 0x2552 <_Z14serialEventRunv+0x1a>
    2548:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_Z17Serial0_availablev>
    254c:	81 11       	cpse	r24, r1
    254e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2552:	08 95       	ret

00002554 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2554:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2556:	84 8d       	ldd	r24, Z+28	; 0x1c
    2558:	df 01       	movw	r26, r30
    255a:	a8 0f       	add	r26, r24
    255c:	b1 1d       	adc	r27, r1
    255e:	a3 5a       	subi	r26, 0xA3	; 163
    2560:	bf 4f       	sbci	r27, 0xFF	; 255
    2562:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2564:	84 8d       	ldd	r24, Z+28	; 0x1c
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	01 96       	adiw	r24, 0x01	; 1
    256a:	8f 73       	andi	r24, 0x3F	; 63
    256c:	99 27       	eor	r25, r25
    256e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2570:	a6 89       	ldd	r26, Z+22	; 0x16
    2572:	b7 89       	ldd	r27, Z+23	; 0x17
    2574:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2576:	a0 89       	ldd	r26, Z+16	; 0x10
    2578:	b1 89       	ldd	r27, Z+17	; 0x11
    257a:	8c 91       	ld	r24, X
    257c:	80 64       	ori	r24, 0x40	; 64
    257e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2580:	93 8d       	ldd	r25, Z+27	; 0x1b
    2582:	84 8d       	ldd	r24, Z+28	; 0x1c
    2584:	98 13       	cpse	r25, r24
    2586:	06 c0       	rjmp	.+12     	; 0x2594 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2588:	02 88       	ldd	r0, Z+18	; 0x12
    258a:	f3 89       	ldd	r31, Z+19	; 0x13
    258c:	e0 2d       	mov	r30, r0
    258e:	80 81       	ld	r24, Z
    2590:	8f 7d       	andi	r24, 0xDF	; 223
    2592:	80 83       	st	Z, r24
    2594:	08 95       	ret

00002596 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	ec 01       	movw	r28, r24
  _written = true;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    25a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    25aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25ac:	98 13       	cpse	r25, r24
    25ae:	05 c0       	rjmp	.+10     	; 0x25ba <_ZN14HardwareSerial5writeEh+0x24>
    25b0:	e8 89       	ldd	r30, Y+16	; 0x10
    25b2:	f9 89       	ldd	r31, Y+17	; 0x11
    25b4:	80 81       	ld	r24, Z
    25b6:	85 fd       	sbrc	r24, 5
    25b8:	24 c0       	rjmp	.+72     	; 0x2602 <_ZN14HardwareSerial5writeEh+0x6c>
    25ba:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    25bc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    25be:	10 e0       	ldi	r17, 0x00	; 0
    25c0:	0f 5f       	subi	r16, 0xFF	; 255
    25c2:	1f 4f       	sbci	r17, 0xFF	; 255
    25c4:	0f 73       	andi	r16, 0x3F	; 63
    25c6:	11 27       	eor	r17, r17
    25c8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    25ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25cc:	e8 12       	cpse	r14, r24
    25ce:	0c c0       	rjmp	.+24     	; 0x25e8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	07 fc       	sbrc	r0, 7
    25d4:	fa cf       	rjmp	.-12     	; 0x25ca <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    25d6:	e8 89       	ldd	r30, Y+16	; 0x10
    25d8:	f9 89       	ldd	r31, Y+17	; 0x11
    25da:	80 81       	ld	r24, Z
    25dc:	85 ff       	sbrs	r24, 5
    25de:	f5 cf       	rjmp	.-22     	; 0x25ca <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    25e0:	ce 01       	movw	r24, r28
    25e2:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    25e6:	f1 cf       	rjmp	.-30     	; 0x25ca <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    25e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ea:	fe 01       	movw	r30, r28
    25ec:	e8 0f       	add	r30, r24
    25ee:	f1 1d       	adc	r31, r1
    25f0:	e3 5a       	subi	r30, 0xA3	; 163
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    25f6:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    25f8:	ea 89       	ldd	r30, Y+18	; 0x12
    25fa:	fb 89       	ldd	r31, Y+19	; 0x13
    25fc:	80 81       	ld	r24, Z
    25fe:	80 62       	ori	r24, 0x20	; 32
    2600:	07 c0       	rjmp	.+14     	; 0x2610 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2602:	ee 89       	ldd	r30, Y+22	; 0x16
    2604:	ff 89       	ldd	r31, Y+23	; 0x17
    2606:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2608:	e8 89       	ldd	r30, Y+16	; 0x10
    260a:	f9 89       	ldd	r31, Y+17	; 0x11
    260c:	80 81       	ld	r24, Z
    260e:	80 64       	ori	r24, 0x40	; 64
    2610:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	ff 90       	pop	r15
    2620:	ef 90       	pop	r14
    2622:	08 95       	ret

00002624 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    262a:	88 8d       	ldd	r24, Y+24	; 0x18
    262c:	88 23       	and	r24, r24
    262e:	c9 f0       	breq	.+50     	; 0x2662 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2630:	ea 89       	ldd	r30, Y+18	; 0x12
    2632:	fb 89       	ldd	r31, Y+19	; 0x13
    2634:	80 81       	ld	r24, Z
    2636:	85 fd       	sbrc	r24, 5
    2638:	05 c0       	rjmp	.+10     	; 0x2644 <_ZN14HardwareSerial5flushEv+0x20>
    263a:	a8 89       	ldd	r26, Y+16	; 0x10
    263c:	b9 89       	ldd	r27, Y+17	; 0x11
    263e:	8c 91       	ld	r24, X
    2640:	86 fd       	sbrc	r24, 6
    2642:	0f c0       	rjmp	.+30     	; 0x2662 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	07 fc       	sbrc	r0, 7
    2648:	f5 cf       	rjmp	.-22     	; 0x2634 <_ZN14HardwareSerial5flushEv+0x10>
    264a:	80 81       	ld	r24, Z
    264c:	85 ff       	sbrs	r24, 5
    264e:	f2 cf       	rjmp	.-28     	; 0x2634 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2650:	a8 89       	ldd	r26, Y+16	; 0x10
    2652:	b9 89       	ldd	r27, Y+17	; 0x11
    2654:	8c 91       	ld	r24, X
    2656:	85 ff       	sbrs	r24, 5
    2658:	ed cf       	rjmp	.-38     	; 0x2634 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    265a:	ce 01       	movw	r24, r28
    265c:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2660:	e7 cf       	rjmp	.-50     	; 0x2630 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	08 95       	ret

00002668 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2668:	cf 92       	push	r12
    266a:	df 92       	push	r13
    266c:	ef 92       	push	r14
    266e:	ff 92       	push	r15
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	ec 01       	movw	r28, r24
    2678:	6a 01       	movw	r12, r20
    267a:	7b 01       	movw	r14, r22
    267c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    267e:	e8 89       	ldd	r30, Y+16	; 0x10
    2680:	f9 89       	ldd	r31, Y+17	; 0x11
    2682:	82 e0       	ldi	r24, 0x02	; 2
    2684:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2686:	41 15       	cp	r20, r1
    2688:	51 4e       	sbci	r21, 0xE1	; 225
    268a:	61 05       	cpc	r22, r1
    268c:	71 05       	cpc	r23, r1
    268e:	b1 f0       	breq	.+44     	; 0x26bc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	79 e0       	ldi	r23, 0x09	; 9
    2694:	8d e3       	ldi	r24, 0x3D	; 61
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	a7 01       	movw	r20, r14
    269a:	96 01       	movw	r18, r12
    269c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__udivmodsi4>
    26a0:	da 01       	movw	r26, r20
    26a2:	c9 01       	movw	r24, r18
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	a1 09       	sbc	r26, r1
    26a8:	b1 09       	sbc	r27, r1
    26aa:	b6 95       	lsr	r27
    26ac:	a7 95       	ror	r26
    26ae:	97 95       	ror	r25
    26b0:	87 95       	ror	r24
    26b2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    26b4:	21 15       	cp	r18, r1
    26b6:	80 e1       	ldi	r24, 0x10	; 16
    26b8:	38 07       	cpc	r19, r24
    26ba:	a8 f0       	brcs	.+42     	; 0x26e6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    26bc:	e8 89       	ldd	r30, Y+16	; 0x10
    26be:	f9 89       	ldd	r31, Y+17	; 0x11
    26c0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    26c2:	60 e8       	ldi	r22, 0x80	; 128
    26c4:	74 e8       	ldi	r23, 0x84	; 132
    26c6:	8e e1       	ldi	r24, 0x1E	; 30
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a7 01       	movw	r20, r14
    26cc:	96 01       	movw	r18, r12
    26ce:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__udivmodsi4>
    26d2:	da 01       	movw	r26, r20
    26d4:	c9 01       	movw	r24, r18
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	a1 09       	sbc	r26, r1
    26da:	b1 09       	sbc	r27, r1
    26dc:	b6 95       	lsr	r27
    26de:	a7 95       	ror	r26
    26e0:	97 95       	ror	r25
    26e2:	87 95       	ror	r24
    26e4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    26e6:	ec 85       	ldd	r30, Y+12	; 0x0c
    26e8:	fd 85       	ldd	r31, Y+13	; 0x0d
    26ea:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    26ec:	ee 85       	ldd	r30, Y+14	; 0x0e
    26ee:	ff 85       	ldd	r31, Y+15	; 0x0f
    26f0:	20 83       	st	Z, r18

  _written = false;
    26f2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    26f4:	ec 89       	ldd	r30, Y+20	; 0x14
    26f6:	fd 89       	ldd	r31, Y+21	; 0x15
    26f8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    26fa:	ea 89       	ldd	r30, Y+18	; 0x12
    26fc:	fb 89       	ldd	r31, Y+19	; 0x13
    26fe:	80 81       	ld	r24, Z
    2700:	80 61       	ori	r24, 0x10	; 16
    2702:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2704:	ea 89       	ldd	r30, Y+18	; 0x12
    2706:	fb 89       	ldd	r31, Y+19	; 0x13
    2708:	80 81       	ld	r24, Z
    270a:	88 60       	ori	r24, 0x08	; 8
    270c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    270e:	ea 89       	ldd	r30, Y+18	; 0x12
    2710:	fb 89       	ldd	r31, Y+19	; 0x13
    2712:	80 81       	ld	r24, Z
    2714:	80 68       	ori	r24, 0x80	; 128
    2716:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2718:	ea 89       	ldd	r30, Y+18	; 0x12
    271a:	fb 89       	ldd	r31, Y+19	; 0x13
    271c:	80 81       	ld	r24, Z
    271e:	8f 7d       	andi	r24, 0xDF	; 223
    2720:	80 83       	st	Z, r24
}
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	1f 91       	pop	r17
    2728:	ff 90       	pop	r15
    272a:	ef 90       	pop	r14
    272c:	df 90       	pop	r13
    272e:	cf 90       	pop	r12
    2730:	08 95       	ret

00002732 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2732:	1f 92       	push	r1
    2734:	0f 92       	push	r0
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	0f 92       	push	r0
    273a:	11 24       	eor	r1, r1
    273c:	2f 93       	push	r18
    273e:	8f 93       	push	r24
    2740:	9f 93       	push	r25
    2742:	ef 93       	push	r30
    2744:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2746:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <Serial+0x10>
    274a:	f0 91 c5 02 	lds	r31, 0x02C5	; 0x8002c5 <Serial+0x11>
    274e:	80 81       	ld	r24, Z
    2750:	e0 91 ca 02 	lds	r30, 0x02CA	; 0x8002ca <Serial+0x16>
    2754:	f0 91 cb 02 	lds	r31, 0x02CB	; 0x8002cb <Serial+0x17>
    2758:	82 fd       	sbrc	r24, 2
    275a:	12 c0       	rjmp	.+36     	; 0x2780 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    275c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    275e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <Serial+0x19>
    2762:	8f 5f       	subi	r24, 0xFF	; 255
    2764:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2766:	20 91 ce 02 	lds	r18, 0x02CE	; 0x8002ce <Serial+0x1a>
    276a:	82 17       	cp	r24, r18
    276c:	51 f0       	breq	.+20     	; 0x2782 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    276e:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <Serial+0x19>
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	ec 54       	subi	r30, 0x4C	; 76
    2776:	fd 4f       	sbci	r31, 0xFD	; 253
    2778:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    277a:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <Serial+0x19>
    277e:	01 c0       	rjmp	.+2      	; 0x2782 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2780:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2782:	ff 91       	pop	r31
    2784:	ef 91       	pop	r30
    2786:	9f 91       	pop	r25
    2788:	8f 91       	pop	r24
    278a:	2f 91       	pop	r18
    278c:	0f 90       	pop	r0
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	0f 90       	pop	r0
    2792:	1f 90       	pop	r1
    2794:	18 95       	reti

00002796 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2796:	1f 92       	push	r1
    2798:	0f 92       	push	r0
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	0f 92       	push	r0
    279e:	11 24       	eor	r1, r1
    27a0:	2f 93       	push	r18
    27a2:	3f 93       	push	r19
    27a4:	4f 93       	push	r20
    27a6:	5f 93       	push	r21
    27a8:	6f 93       	push	r22
    27aa:	7f 93       	push	r23
    27ac:	8f 93       	push	r24
    27ae:	9f 93       	push	r25
    27b0:	af 93       	push	r26
    27b2:	bf 93       	push	r27
    27b4:	ef 93       	push	r30
    27b6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    27b8:	84 eb       	ldi	r24, 0xB4	; 180
    27ba:	92 e0       	ldi	r25, 0x02	; 2
    27bc:	0e 94 aa 12 	call	0x2554	; 0x2554 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    27c0:	ff 91       	pop	r31
    27c2:	ef 91       	pop	r30
    27c4:	bf 91       	pop	r27
    27c6:	af 91       	pop	r26
    27c8:	9f 91       	pop	r25
    27ca:	8f 91       	pop	r24
    27cc:	7f 91       	pop	r23
    27ce:	6f 91       	pop	r22
    27d0:	5f 91       	pop	r21
    27d2:	4f 91       	pop	r20
    27d4:	3f 91       	pop	r19
    27d6:	2f 91       	pop	r18
    27d8:	0f 90       	pop	r0
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	0f 90       	pop	r0
    27de:	1f 90       	pop	r1
    27e0:	18 95       	reti

000027e2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    27e2:	84 eb       	ldi	r24, 0xB4	; 180
    27e4:	92 e0       	ldi	r25, 0x02	; 2
    27e6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN14HardwareSerial9availableEv>
    27ea:	21 e0       	ldi	r18, 0x01	; 1
    27ec:	89 2b       	or	r24, r25
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <_Z17Serial0_availablev+0x10>
    27f0:	20 e0       	ldi	r18, 0x00	; 0
}
    27f2:	82 2f       	mov	r24, r18
    27f4:	08 95       	ret

000027f6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    27f6:	e4 eb       	ldi	r30, 0xB4	; 180
    27f8:	f2 e0       	ldi	r31, 0x02	; 2
    27fa:	13 82       	std	Z+3, r1	; 0x03
    27fc:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    27fe:	88 ee       	ldi	r24, 0xE8	; 232
    2800:	93 e0       	ldi	r25, 0x03	; 3
    2802:	a0 e0       	ldi	r26, 0x00	; 0
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	84 83       	std	Z+4, r24	; 0x04
    2808:	95 83       	std	Z+5, r25	; 0x05
    280a:	a6 83       	std	Z+6, r26	; 0x06
    280c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    280e:	8f ee       	ldi	r24, 0xEF	; 239
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	80 83       	st	Z, r24
    2816:	85 ec       	ldi	r24, 0xC5	; 197
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	95 87       	std	Z+13, r25	; 0x0d
    281c:	84 87       	std	Z+12, r24	; 0x0c
    281e:	84 ec       	ldi	r24, 0xC4	; 196
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	97 87       	std	Z+15, r25	; 0x0f
    2824:	86 87       	std	Z+14, r24	; 0x0e
    2826:	80 ec       	ldi	r24, 0xC0	; 192
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	91 8b       	std	Z+17, r25	; 0x11
    282c:	80 8b       	std	Z+16, r24	; 0x10
    282e:	81 ec       	ldi	r24, 0xC1	; 193
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	93 8b       	std	Z+19, r25	; 0x13
    2834:	82 8b       	std	Z+18, r24	; 0x12
    2836:	82 ec       	ldi	r24, 0xC2	; 194
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	95 8b       	std	Z+21, r25	; 0x15
    283c:	84 8b       	std	Z+20, r24	; 0x14
    283e:	86 ec       	ldi	r24, 0xC6	; 198
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	97 8b       	std	Z+23, r25	; 0x17
    2844:	86 8b       	std	Z+22, r24	; 0x16
    2846:	11 8e       	std	Z+25, r1	; 0x19
    2848:	12 8e       	std	Z+26, r1	; 0x1a
    284a:	13 8e       	std	Z+27, r1	; 0x1b
    284c:	14 8e       	std	Z+28, r1	; 0x1c
    284e:	08 95       	ret

00002850 <initVariant>:
    2850:	08 95       	ret

00002852 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2852:	0e 94 77 16 	call	0x2cee	; 0x2cee <init>

	initVariant();
    2856:	0e 94 28 14 	call	0x2850	; 0x2850 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    285a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    285e:	cc e9       	ldi	r28, 0x9C	; 156
    2860:	d2 e1       	ldi	r29, 0x12	; 18
#endif
	
	setup();
    
	for (;;) {
		loop();
    2862:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <loop>
		if (serialEventRun) serialEventRun();
    2866:	20 97       	sbiw	r28, 0x00	; 0
    2868:	e1 f3       	breq	.-8      	; 0x2862 <main+0x10>
    286a:	0e 94 9c 12 	call	0x2538	; 0x2538 <_Z14serialEventRunv>
    286e:	f9 cf       	rjmp	.-14     	; 0x2862 <main+0x10>

00002870 <_Znwj>:
    2870:	0c 94 37 1a 	jmp	0x346e	; 0x346e <malloc>

00002874 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    2874:	0c 94 37 1a 	jmp	0x346e	; 0x346e <malloc>

00002878 <_ZdlPv>:
    2878:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <free>

0000287c <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    287c:	cf 92       	push	r12
    287e:	df 92       	push	r13
    2880:	ef 92       	push	r14
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	6c 01       	movw	r12, r24
    288e:	7a 01       	movw	r14, r20
    2890:	8b 01       	movw	r16, r22
    2892:	c0 e0       	ldi	r28, 0x00	; 0
    2894:	d0 e0       	ldi	r29, 0x00	; 0
    2896:	ce 15       	cp	r28, r14
    2898:	df 05       	cpc	r29, r15
    289a:	81 f0       	breq	.+32     	; 0x28bc <_ZN5Print5writeEPKhj+0x40>
    289c:	d8 01       	movw	r26, r16
    289e:	6d 91       	ld	r22, X+
    28a0:	8d 01       	movw	r16, r26
    28a2:	d6 01       	movw	r26, r12
    28a4:	ed 91       	ld	r30, X+
    28a6:	fc 91       	ld	r31, X
    28a8:	01 90       	ld	r0, Z+
    28aa:	f0 81       	ld	r31, Z
    28ac:	e0 2d       	mov	r30, r0
    28ae:	c6 01       	movw	r24, r12
    28b0:	09 95       	icall
    28b2:	89 2b       	or	r24, r25
    28b4:	11 f0       	breq	.+4      	; 0x28ba <_ZN5Print5writeEPKhj+0x3e>
    28b6:	21 96       	adiw	r28, 0x01	; 1
    28b8:	ee cf       	rjmp	.-36     	; 0x2896 <_ZN5Print5writeEPKhj+0x1a>
    28ba:	7e 01       	movw	r14, r28
    28bc:	c7 01       	movw	r24, r14
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	ff 90       	pop	r15
    28c8:	ef 90       	pop	r14
    28ca:	df 90       	pop	r13
    28cc:	cf 90       	pop	r12
    28ce:	08 95       	ret

000028d0 <_ZN5Print5writeEPKc>:
    28d0:	61 15       	cp	r22, r1
    28d2:	71 05       	cpc	r23, r1
    28d4:	79 f0       	breq	.+30     	; 0x28f4 <_ZN5Print5writeEPKc+0x24>
    28d6:	fb 01       	movw	r30, r22
    28d8:	01 90       	ld	r0, Z+
    28da:	00 20       	and	r0, r0
    28dc:	e9 f7       	brne	.-6      	; 0x28d8 <_ZN5Print5writeEPKc+0x8>
    28de:	31 97       	sbiw	r30, 0x01	; 1
    28e0:	af 01       	movw	r20, r30
    28e2:	46 1b       	sub	r20, r22
    28e4:	57 0b       	sbc	r21, r23
    28e6:	dc 01       	movw	r26, r24
    28e8:	ed 91       	ld	r30, X+
    28ea:	fc 91       	ld	r31, X
    28ec:	02 80       	ldd	r0, Z+2	; 0x02
    28ee:	f3 81       	ldd	r31, Z+3	; 0x03
    28f0:	e0 2d       	mov	r30, r0
    28f2:	09 94       	ijmp
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	08 95       	ret

000028fa <_ZN5Print7printlnEv>:
    28fa:	6b ef       	ldi	r22, 0xFB	; 251
    28fc:	71 e0       	ldi	r23, 0x01	; 1
    28fe:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <_ZN5Print5writeEPKc>

00002902 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    290c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <_ZN5Print5writeEPKc>
    2910:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    2912:	ce 01       	movw	r24, r28
    2914:	0e 94 7d 14 	call	0x28fa	; 0x28fa <_ZN5Print7printlnEv>
  return n;
}
    2918:	80 0f       	add	r24, r16
    291a:	91 1f       	adc	r25, r17
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	08 95       	ret

00002926 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2926:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <_ZN7TwoWire14rxBufferLengthE>
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	20 91 82 03 	lds	r18, 0x0382	; 0x800382 <_ZN7TwoWire13rxBufferIndexE>
    2930:	82 1b       	sub	r24, r18
    2932:	91 09       	sbc	r25, r1
    2934:	08 95       	ret

00002936 <_ZN7TwoWire4readEv>:
    2936:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <_ZN7TwoWire13rxBufferIndexE>
    293a:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <_ZN7TwoWire14rxBufferLengthE>
    293e:	98 17       	cp	r25, r24
    2940:	50 f4       	brcc	.+20     	; 0x2956 <_ZN7TwoWire4readEv+0x20>
    2942:	e9 2f       	mov	r30, r25
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	ed 57       	subi	r30, 0x7D	; 125
    2948:	fc 4f       	sbci	r31, 0xFC	; 252
    294a:	20 81       	ld	r18, Z
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	9f 5f       	subi	r25, 0xFF	; 255
    2950:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <_ZN7TwoWire13rxBufferIndexE>
    2954:	02 c0       	rjmp	.+4      	; 0x295a <_ZN7TwoWire4readEv+0x24>
    2956:	2f ef       	ldi	r18, 0xFF	; 255
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	c9 01       	movw	r24, r18
    295c:	08 95       	ret

0000295e <_ZN7TwoWire4peekEv>:
    295e:	e0 91 82 03 	lds	r30, 0x0382	; 0x800382 <_ZN7TwoWire13rxBufferIndexE>
    2962:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <_ZN7TwoWire14rxBufferLengthE>
    2966:	e8 17       	cp	r30, r24
    2968:	30 f4       	brcc	.+12     	; 0x2976 <_ZN7TwoWire4peekEv+0x18>
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	ed 57       	subi	r30, 0x7D	; 125
    296e:	fc 4f       	sbci	r31, 0xFC	; 252
    2970:	80 81       	ld	r24, Z
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	08 95       	ret
    2976:	8f ef       	ldi	r24, 0xFF	; 255
    2978:	9f ef       	ldi	r25, 0xFF	; 255
    297a:	08 95       	ret

0000297c <_ZN7TwoWire5flushEv>:
    297c:	08 95       	ret

0000297e <_ZN7TwoWire5writeEPKhj>:
    297e:	cf 92       	push	r12
    2980:	df 92       	push	r13
    2982:	ef 92       	push	r14
    2984:	ff 92       	push	r15
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	7c 01       	movw	r14, r24
    2990:	cb 01       	movw	r24, r22
    2992:	8a 01       	movw	r16, r20
    2994:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <_ZN7TwoWire12transmittingE>
    2998:	22 23       	and	r18, r18
    299a:	89 f0       	breq	.+34     	; 0x29be <_ZN7TwoWire5writeEPKhj+0x40>
    299c:	eb 01       	movw	r28, r22
    299e:	6b 01       	movw	r12, r22
    29a0:	c4 0e       	add	r12, r20
    29a2:	d5 1e       	adc	r13, r21
    29a4:	cc 15       	cp	r28, r12
    29a6:	dd 05       	cpc	r29, r13
    29a8:	69 f0       	breq	.+26     	; 0x29c4 <_ZN7TwoWire5writeEPKhj+0x46>
    29aa:	69 91       	ld	r22, Y+
    29ac:	d7 01       	movw	r26, r14
    29ae:	ed 91       	ld	r30, X+
    29b0:	fc 91       	ld	r31, X
    29b2:	01 90       	ld	r0, Z+
    29b4:	f0 81       	ld	r31, Z
    29b6:	e0 2d       	mov	r30, r0
    29b8:	c7 01       	movw	r24, r14
    29ba:	09 95       	icall
    29bc:	f3 cf       	rjmp	.-26     	; 0x29a4 <_ZN7TwoWire5writeEPKhj+0x26>
    29be:	64 2f       	mov	r22, r20
    29c0:	0e 94 62 18 	call	0x30c4	; 0x30c4 <twi_transmit>
    29c4:	c8 01       	movw	r24, r16
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	1f 91       	pop	r17
    29cc:	0f 91       	pop	r16
    29ce:	ff 90       	pop	r15
    29d0:	ef 90       	pop	r14
    29d2:	df 90       	pop	r13
    29d4:	cf 90       	pop	r12
    29d6:	08 95       	ret

000029d8 <_ZN7TwoWire5writeEh>:
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	1f 92       	push	r1
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	69 83       	std	Y+1, r22	; 0x01
    29e4:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <_ZN7TwoWire12transmittingE>
    29e8:	22 23       	and	r18, r18
    29ea:	d1 f0       	breq	.+52     	; 0x2a20 <_ZN7TwoWire5writeEh+0x48>
    29ec:	20 91 5e 03 	lds	r18, 0x035E	; 0x80035e <_ZN7TwoWire14txBufferLengthE>
    29f0:	20 32       	cpi	r18, 0x20	; 32
    29f2:	40 f0       	brcs	.+16     	; 0x2a04 <_ZN7TwoWire5writeEh+0x2c>
    29f4:	21 e0       	ldi	r18, 0x01	; 1
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	fc 01       	movw	r30, r24
    29fa:	33 83       	std	Z+3, r19	; 0x03
    29fc:	22 83       	std	Z+2, r18	; 0x02
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	15 c0       	rjmp	.+42     	; 0x2a2e <_ZN7TwoWire5writeEh+0x56>
    2a04:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <_ZN7TwoWire13txBufferIndexE>
    2a08:	e8 2f       	mov	r30, r24
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	e0 5a       	subi	r30, 0xA0	; 160
    2a0e:	fc 4f       	sbci	r31, 0xFC	; 252
    2a10:	99 81       	ldd	r25, Y+1	; 0x01
    2a12:	90 83       	st	Z, r25
    2a14:	8f 5f       	subi	r24, 0xFF	; 255
    2a16:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <_ZN7TwoWire13txBufferIndexE>
    2a1a:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <_ZN7TwoWire14txBufferLengthE>
    2a1e:	05 c0       	rjmp	.+10     	; 0x2a2a <_ZN7TwoWire5writeEh+0x52>
    2a20:	61 e0       	ldi	r22, 0x01	; 1
    2a22:	ce 01       	movw	r24, r28
    2a24:	01 96       	adiw	r24, 0x01	; 1
    2a26:	0e 94 62 18 	call	0x30c4	; 0x30c4 <twi_transmit>
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	0f 90       	pop	r0
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	08 95       	ret

00002a36 <_ZN7TwoWireC1Ev>:
    2a36:	fc 01       	movw	r30, r24
    2a38:	13 82       	std	Z+3, r1	; 0x03
    2a3a:	12 82       	std	Z+2, r1	; 0x02
    2a3c:	88 ee       	ldi	r24, 0xE8	; 232
    2a3e:	93 e0       	ldi	r25, 0x03	; 3
    2a40:	a0 e0       	ldi	r26, 0x00	; 0
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	84 83       	std	Z+4, r24	; 0x04
    2a46:	95 83       	std	Z+5, r25	; 0x05
    2a48:	a6 83       	std	Z+6, r26	; 0x06
    2a4a:	b7 83       	std	Z+7, r27	; 0x07
    2a4c:	8e e0       	ldi	r24, 0x0E	; 14
    2a4e:	92 e0       	ldi	r25, 0x02	; 2
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	80 83       	st	Z, r24
    2a54:	08 95       	ret

00002a56 <_ZN7TwoWire5beginEv>:
    2a56:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <_ZN7TwoWire13rxBufferIndexE>
    2a5a:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <_ZN7TwoWire14rxBufferLengthE>
    2a5e:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <_ZN7TwoWire13txBufferIndexE>
    2a62:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <_ZN7TwoWire14txBufferLengthE>
    2a66:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <twi_init>

00002a6a <_ZN7TwoWire17beginTransmissionEh>:
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <_ZN7TwoWire12transmittingE>
    2a70:	60 93 80 03 	sts	0x0380, r22	; 0x800380 <_ZN7TwoWire9txAddressE>
    2a74:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <_ZN7TwoWire13txBufferIndexE>
    2a78:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <_ZN7TwoWire14txBufferLengthE>
    2a7c:	08 95       	ret

00002a7e <_ZN7TwoWire15endTransmissionEh>:
    2a7e:	0f 93       	push	r16
    2a80:	06 2f       	mov	r16, r22
    2a82:	21 e0       	ldi	r18, 0x01	; 1
    2a84:	40 91 5e 03 	lds	r20, 0x035E	; 0x80035e <_ZN7TwoWire14txBufferLengthE>
    2a88:	60 e6       	ldi	r22, 0x60	; 96
    2a8a:	73 e0       	ldi	r23, 0x03	; 3
    2a8c:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <_ZN7TwoWire9txAddressE>
    2a90:	0e 94 0c 18 	call	0x3018	; 0x3018 <twi_writeTo>
    2a94:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <_ZN7TwoWire13txBufferIndexE>
    2a98:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <_ZN7TwoWire14txBufferLengthE>
    2a9c:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <_ZN7TwoWire12transmittingE>
    2aa0:	0f 91       	pop	r16
    2aa2:	08 95       	ret

00002aa4 <_ZN7TwoWire11requestFromEhhmhh>:
    2aa4:	4f 92       	push	r4
    2aa6:	5f 92       	push	r5
    2aa8:	6f 92       	push	r6
    2aaa:	7f 92       	push	r7
    2aac:	af 92       	push	r10
    2aae:	bf 92       	push	r11
    2ab0:	cf 92       	push	r12
    2ab2:	ef 92       	push	r14
    2ab4:	ff 92       	push	r15
    2ab6:	0f 93       	push	r16
    2ab8:	1f 93       	push	r17
    2aba:	cf 93       	push	r28
    2abc:	df 93       	push	r29
    2abe:	5c 01       	movw	r10, r24
    2ac0:	f6 2e       	mov	r15, r22
    2ac2:	d4 2f       	mov	r29, r20
    2ac4:	28 01       	movw	r4, r16
    2ac6:	39 01       	movw	r6, r18
    2ac8:	ee 20       	and	r14, r14
    2aca:	21 f1       	breq	.+72     	; 0x2b14 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    2acc:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <_ZN7TwoWire17beginTransmissionEh>
    2ad0:	ce 2d       	mov	r28, r14
    2ad2:	c4 30       	cpi	r28, 0x04	; 4
    2ad4:	08 f0       	brcs	.+2      	; 0x2ad8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2ad6:	c3 e0       	ldi	r28, 0x03	; 3
    2ad8:	c1 50       	subi	r28, 0x01	; 1
    2ada:	c0 f0       	brcs	.+48     	; 0x2b0c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    2adc:	28 e0       	ldi	r18, 0x08	; 8
    2ade:	c2 9f       	mul	r28, r18
    2ae0:	c0 01       	movw	r24, r0
    2ae2:	11 24       	eor	r1, r1
    2ae4:	a3 01       	movw	r20, r6
    2ae6:	92 01       	movw	r18, r4
    2ae8:	04 c0       	rjmp	.+8      	; 0x2af2 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    2aea:	56 95       	lsr	r21
    2aec:	47 95       	ror	r20
    2aee:	37 95       	ror	r19
    2af0:	27 95       	ror	r18
    2af2:	8a 95       	dec	r24
    2af4:	d2 f7       	brpl	.-12     	; 0x2aea <_ZN7TwoWire11requestFromEhhmhh+0x46>
    2af6:	ca 01       	movw	r24, r20
    2af8:	b9 01       	movw	r22, r18
    2afa:	d5 01       	movw	r26, r10
    2afc:	ed 91       	ld	r30, X+
    2afe:	fc 91       	ld	r31, X
    2b00:	01 90       	ld	r0, Z+
    2b02:	f0 81       	ld	r31, Z
    2b04:	e0 2d       	mov	r30, r0
    2b06:	c5 01       	movw	r24, r10
    2b08:	09 95       	icall
    2b0a:	e6 cf       	rjmp	.-52     	; 0x2ad8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    2b0c:	60 e0       	ldi	r22, 0x00	; 0
    2b0e:	c5 01       	movw	r24, r10
    2b10:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <_ZN7TwoWire15endTransmissionEh>
    2b14:	4d 2f       	mov	r20, r29
    2b16:	d1 32       	cpi	r29, 0x21	; 33
    2b18:	08 f0       	brcs	.+2      	; 0x2b1c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    2b1a:	40 e2       	ldi	r20, 0x20	; 32
    2b1c:	2c 2d       	mov	r18, r12
    2b1e:	63 e8       	ldi	r22, 0x83	; 131
    2b20:	73 e0       	ldi	r23, 0x03	; 3
    2b22:	8f 2d       	mov	r24, r15
    2b24:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <twi_readFrom>
    2b28:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <_ZN7TwoWire13rxBufferIndexE>
    2b2c:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <_ZN7TwoWire14rxBufferLengthE>
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	1f 91       	pop	r17
    2b36:	0f 91       	pop	r16
    2b38:	ff 90       	pop	r15
    2b3a:	ef 90       	pop	r14
    2b3c:	cf 90       	pop	r12
    2b3e:	bf 90       	pop	r11
    2b40:	af 90       	pop	r10
    2b42:	7f 90       	pop	r7
    2b44:	6f 90       	pop	r6
    2b46:	5f 90       	pop	r5
    2b48:	4f 90       	pop	r4
    2b4a:	08 95       	ret

00002b4c <_ZN7TwoWire11requestFromEhhh>:
    2b4c:	cf 92       	push	r12
    2b4e:	ef 92       	push	r14
    2b50:	0f 93       	push	r16
    2b52:	1f 93       	push	r17
    2b54:	c2 2e       	mov	r12, r18
    2b56:	e1 2c       	mov	r14, r1
    2b58:	00 e0       	ldi	r16, 0x00	; 0
    2b5a:	10 e0       	ldi	r17, 0x00	; 0
    2b5c:	98 01       	movw	r18, r16
    2b5e:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <_ZN7TwoWire11requestFromEhhmhh>
    2b62:	1f 91       	pop	r17
    2b64:	0f 91       	pop	r16
    2b66:	ef 90       	pop	r14
    2b68:	cf 90       	pop	r12
    2b6a:	08 95       	ret

00002b6c <_ZN7TwoWire11requestFromEhh>:
    2b6c:	21 e0       	ldi	r18, 0x01	; 1
    2b6e:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <_ZN7TwoWire11requestFromEhhh>

00002b72 <_ZN7TwoWire15endTransmissionEv>:
    2b72:	61 e0       	ldi	r22, 0x01	; 1
    2b74:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <_ZN7TwoWire15endTransmissionEh>

00002b78 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2b78:	81 e5       	ldi	r24, 0x51	; 81
    2b7a:	93 e0       	ldi	r25, 0x03	; 3
    2b7c:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <_ZN7TwoWireC1Ev>

00002b80 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2b80:	1f 92       	push	r1
    2b82:	0f 92       	push	r0
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	0f 92       	push	r0
    2b88:	11 24       	eor	r1, r1
    2b8a:	2f 93       	push	r18
    2b8c:	3f 93       	push	r19
    2b8e:	8f 93       	push	r24
    2b90:	9f 93       	push	r25
    2b92:	af 93       	push	r26
    2b94:	bf 93       	push	r27
    2b96:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <timer0_millis>
    2b9a:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <timer0_millis+0x1>
    2b9e:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <timer0_millis+0x2>
    2ba2:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <timer0_millis+0x3>
    2ba6:	30 91 a3 03 	lds	r19, 0x03A3	; 0x8003a3 <timer0_fract>
    2baa:	23 e0       	ldi	r18, 0x03	; 3
    2bac:	23 0f       	add	r18, r19
    2bae:	2d 37       	cpi	r18, 0x7D	; 125
    2bb0:	20 f4       	brcc	.+8      	; 0x2bba <__vector_16+0x3a>
    2bb2:	01 96       	adiw	r24, 0x01	; 1
    2bb4:	a1 1d       	adc	r26, r1
    2bb6:	b1 1d       	adc	r27, r1
    2bb8:	05 c0       	rjmp	.+10     	; 0x2bc4 <__vector_16+0x44>
    2bba:	26 e8       	ldi	r18, 0x86	; 134
    2bbc:	23 0f       	add	r18, r19
    2bbe:	02 96       	adiw	r24, 0x02	; 2
    2bc0:	a1 1d       	adc	r26, r1
    2bc2:	b1 1d       	adc	r27, r1
    2bc4:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <timer0_fract>
    2bc8:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <timer0_millis>
    2bcc:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <timer0_millis+0x1>
    2bd0:	a0 93 a6 03 	sts	0x03A6, r26	; 0x8003a6 <timer0_millis+0x2>
    2bd4:	b0 93 a7 03 	sts	0x03A7, r27	; 0x8003a7 <timer0_millis+0x3>
    2bd8:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <timer0_overflow_count>
    2bdc:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <timer0_overflow_count+0x1>
    2be0:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <timer0_overflow_count+0x2>
    2be4:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <timer0_overflow_count+0x3>
    2be8:	01 96       	adiw	r24, 0x01	; 1
    2bea:	a1 1d       	adc	r26, r1
    2bec:	b1 1d       	adc	r27, r1
    2bee:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <timer0_overflow_count>
    2bf2:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <timer0_overflow_count+0x1>
    2bf6:	a0 93 aa 03 	sts	0x03AA, r26	; 0x8003aa <timer0_overflow_count+0x2>
    2bfa:	b0 93 ab 03 	sts	0x03AB, r27	; 0x8003ab <timer0_overflow_count+0x3>
    2bfe:	bf 91       	pop	r27
    2c00:	af 91       	pop	r26
    2c02:	9f 91       	pop	r25
    2c04:	8f 91       	pop	r24
    2c06:	3f 91       	pop	r19
    2c08:	2f 91       	pop	r18
    2c0a:	0f 90       	pop	r0
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	0f 90       	pop	r0
    2c10:	1f 90       	pop	r1
    2c12:	18 95       	reti

00002c14 <millis>:
    2c14:	2f b7       	in	r18, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <timer0_millis>
    2c1c:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <timer0_millis+0x1>
    2c20:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer0_millis+0x2>
    2c24:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer0_millis+0x3>
    2c28:	2f bf       	out	0x3f, r18	; 63
    2c2a:	08 95       	ret

00002c2c <micros>:
    2c2c:	3f b7       	in	r19, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <timer0_overflow_count>
    2c34:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <timer0_overflow_count+0x1>
    2c38:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <timer0_overflow_count+0x2>
    2c3c:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <timer0_overflow_count+0x3>
    2c40:	26 b5       	in	r18, 0x26	; 38
    2c42:	a8 9b       	sbis	0x15, 0	; 21
    2c44:	05 c0       	rjmp	.+10     	; 0x2c50 <micros+0x24>
    2c46:	2f 3f       	cpi	r18, 0xFF	; 255
    2c48:	19 f0       	breq	.+6      	; 0x2c50 <micros+0x24>
    2c4a:	01 96       	adiw	r24, 0x01	; 1
    2c4c:	a1 1d       	adc	r26, r1
    2c4e:	b1 1d       	adc	r27, r1
    2c50:	3f bf       	out	0x3f, r19	; 63
    2c52:	ba 2f       	mov	r27, r26
    2c54:	a9 2f       	mov	r26, r25
    2c56:	98 2f       	mov	r25, r24
    2c58:	88 27       	eor	r24, r24
    2c5a:	82 0f       	add	r24, r18
    2c5c:	91 1d       	adc	r25, r1
    2c5e:	a1 1d       	adc	r26, r1
    2c60:	b1 1d       	adc	r27, r1
    2c62:	bc 01       	movw	r22, r24
    2c64:	cd 01       	movw	r24, r26
    2c66:	42 e0       	ldi	r20, 0x02	; 2
    2c68:	66 0f       	add	r22, r22
    2c6a:	77 1f       	adc	r23, r23
    2c6c:	88 1f       	adc	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	4a 95       	dec	r20
    2c72:	d1 f7       	brne	.-12     	; 0x2c68 <micros+0x3c>
    2c74:	08 95       	ret

00002c76 <delay>:
    2c76:	8f 92       	push	r8
    2c78:	9f 92       	push	r9
    2c7a:	af 92       	push	r10
    2c7c:	bf 92       	push	r11
    2c7e:	cf 92       	push	r12
    2c80:	df 92       	push	r13
    2c82:	ef 92       	push	r14
    2c84:	ff 92       	push	r15
    2c86:	6b 01       	movw	r12, r22
    2c88:	7c 01       	movw	r14, r24
    2c8a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <micros>
    2c8e:	4b 01       	movw	r8, r22
    2c90:	5c 01       	movw	r10, r24
    2c92:	c1 14       	cp	r12, r1
    2c94:	d1 04       	cpc	r13, r1
    2c96:	e1 04       	cpc	r14, r1
    2c98:	f1 04       	cpc	r15, r1
    2c9a:	01 f1       	breq	.+64     	; 0x2cdc <delay+0x66>
    2c9c:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <yield>
    2ca0:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <micros>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	88 19       	sub	r24, r8
    2caa:	99 09       	sbc	r25, r9
    2cac:	aa 09       	sbc	r26, r10
    2cae:	bb 09       	sbc	r27, r11
    2cb0:	88 3e       	cpi	r24, 0xE8	; 232
    2cb2:	93 40       	sbci	r25, 0x03	; 3
    2cb4:	a1 05       	cpc	r26, r1
    2cb6:	b1 05       	cpc	r27, r1
    2cb8:	60 f3       	brcs	.-40     	; 0x2c92 <delay+0x1c>
    2cba:	21 e0       	ldi	r18, 0x01	; 1
    2cbc:	c2 1a       	sub	r12, r18
    2cbe:	d1 08       	sbc	r13, r1
    2cc0:	e1 08       	sbc	r14, r1
    2cc2:	f1 08       	sbc	r15, r1
    2cc4:	88 ee       	ldi	r24, 0xE8	; 232
    2cc6:	88 0e       	add	r8, r24
    2cc8:	83 e0       	ldi	r24, 0x03	; 3
    2cca:	98 1e       	adc	r9, r24
    2ccc:	a1 1c       	adc	r10, r1
    2cce:	b1 1c       	adc	r11, r1
    2cd0:	c1 14       	cp	r12, r1
    2cd2:	d1 04       	cpc	r13, r1
    2cd4:	e1 04       	cpc	r14, r1
    2cd6:	f1 04       	cpc	r15, r1
    2cd8:	19 f7       	brne	.-58     	; 0x2ca0 <delay+0x2a>
    2cda:	db cf       	rjmp	.-74     	; 0x2c92 <delay+0x1c>
    2cdc:	ff 90       	pop	r15
    2cde:	ef 90       	pop	r14
    2ce0:	df 90       	pop	r13
    2ce2:	cf 90       	pop	r12
    2ce4:	bf 90       	pop	r11
    2ce6:	af 90       	pop	r10
    2ce8:	9f 90       	pop	r9
    2cea:	8f 90       	pop	r8
    2cec:	08 95       	ret

00002cee <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2cee:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2cf0:	84 b5       	in	r24, 0x24	; 36
    2cf2:	82 60       	ori	r24, 0x02	; 2
    2cf4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2cf6:	84 b5       	in	r24, 0x24	; 36
    2cf8:	81 60       	ori	r24, 0x01	; 1
    2cfa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2cfc:	85 b5       	in	r24, 0x25	; 37
    2cfe:	82 60       	ori	r24, 0x02	; 2
    2d00:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2d02:	85 b5       	in	r24, 0x25	; 37
    2d04:	81 60       	ori	r24, 0x01	; 1
    2d06:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2d08:	ee e6       	ldi	r30, 0x6E	; 110
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	81 60       	ori	r24, 0x01	; 1
    2d10:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2d12:	e1 e8       	ldi	r30, 0x81	; 129
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2d18:	80 81       	ld	r24, Z
    2d1a:	82 60       	ori	r24, 0x02	; 2
    2d1c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2d1e:	80 81       	ld	r24, Z
    2d20:	81 60       	ori	r24, 0x01	; 1
    2d22:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2d24:	e0 e8       	ldi	r30, 0x80	; 128
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	81 60       	ori	r24, 0x01	; 1
    2d2c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2d2e:	e1 eb       	ldi	r30, 0xB1	; 177
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	84 60       	ori	r24, 0x04	; 4
    2d36:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2d38:	e0 eb       	ldi	r30, 0xB0	; 176
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	81 60       	ori	r24, 0x01	; 1
    2d40:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2d42:	ea e7       	ldi	r30, 0x7A	; 122
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	84 60       	ori	r24, 0x04	; 4
    2d4a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2d4c:	80 81       	ld	r24, Z
    2d4e:	82 60       	ori	r24, 0x02	; 2
    2d50:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2d52:	80 81       	ld	r24, Z
    2d54:	81 60       	ori	r24, 0x01	; 1
    2d56:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2d58:	80 81       	ld	r24, Z
    2d5a:	80 68       	ori	r24, 0x80	; 128
    2d5c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2d5e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2d62:	08 95       	ret

00002d64 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2d64:	1f 93       	push	r17
    2d66:	cf 93       	push	r28
    2d68:	df 93       	push	r29
    2d6a:	18 2f       	mov	r17, r24
    2d6c:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2d6e:	61 e0       	ldi	r22, 0x01	; 1
    2d70:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <pinMode>
	if (val == 0)
    2d74:	20 97       	sbiw	r28, 0x00	; 0
    2d76:	11 f4       	brne	.+4      	; 0x2d7c <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    2d78:	60 e0       	ldi	r22, 0x00	; 0
    2d7a:	04 c0       	rjmp	.+8      	; 0x2d84 <analogWrite+0x20>
	}
	else if (val == 255)
    2d7c:	cf 3f       	cpi	r28, 0xFF	; 255
    2d7e:	d1 05       	cpc	r29, r1
    2d80:	39 f4       	brne	.+14     	; 0x2d90 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    2d82:	61 e0       	ldi	r22, 0x01	; 1
    2d84:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2d86:	df 91       	pop	r29
    2d88:	cf 91       	pop	r28
    2d8a:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    2d8c:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2d90:	e1 2f       	mov	r30, r17
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	ed 5d       	subi	r30, 0xDD	; 221
    2d96:	fd 4f       	sbci	r31, 0xFD	; 253
    2d98:	e4 91       	lpm	r30, Z
    2d9a:	e3 30       	cpi	r30, 0x03	; 3
    2d9c:	f9 f0       	breq	.+62     	; 0x2ddc <analogWrite+0x78>
    2d9e:	48 f4       	brcc	.+18     	; 0x2db2 <analogWrite+0x4e>
    2da0:	e1 30       	cpi	r30, 0x01	; 1
    2da2:	b9 f0       	breq	.+46     	; 0x2dd2 <analogWrite+0x6e>
    2da4:	e2 30       	cpi	r30, 0x02	; 2
    2da6:	a1 f5       	brne	.+104    	; 0x2e10 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2da8:	84 b5       	in	r24, 0x24	; 36
    2daa:	80 62       	ori	r24, 0x20	; 32
    2dac:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2dae:	c8 bd       	out	0x28, r28	; 40
				break;
    2db0:	34 c0       	rjmp	.+104    	; 0x2e1a <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2db2:	e7 30       	cpi	r30, 0x07	; 7
    2db4:	e9 f0       	breq	.+58     	; 0x2df0 <analogWrite+0x8c>
    2db6:	e8 30       	cpi	r30, 0x08	; 8
    2db8:	19 f1       	breq	.+70     	; 0x2e00 <analogWrite+0x9c>
    2dba:	e4 30       	cpi	r30, 0x04	; 4
    2dbc:	49 f5       	brne	.+82     	; 0x2e10 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2dbe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2dc2:	80 62       	ori	r24, 0x20	; 32
    2dc4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    2dc8:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    2dcc:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    2dd0:	24 c0       	rjmp	.+72     	; 0x2e1a <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2dd2:	84 b5       	in	r24, 0x24	; 36
    2dd4:	80 68       	ori	r24, 0x80	; 128
    2dd6:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2dd8:	c7 bd       	out	0x27, r28	; 39
				break;
    2dda:	1f c0       	rjmp	.+62     	; 0x2e1a <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2ddc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2de0:	80 68       	ori	r24, 0x80	; 128
    2de2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    2de6:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2dea:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    2dee:	15 c0       	rjmp	.+42     	; 0x2e1a <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2df0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2df4:	80 68       	ori	r24, 0x80	; 128
    2df6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    2dfa:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    2dfe:	0d c0       	rjmp	.+26     	; 0x2e1a <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2e00:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2e04:	80 62       	ori	r24, 0x20	; 32
    2e06:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    2e0a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    2e0e:	05 c0       	rjmp	.+10     	; 0x2e1a <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2e10:	c0 38       	cpi	r28, 0x80	; 128
    2e12:	d1 05       	cpc	r29, r1
    2e14:	0c f0       	brlt	.+2      	; 0x2e18 <analogWrite+0xb4>
    2e16:	b5 cf       	rjmp	.-150    	; 0x2d82 <analogWrite+0x1e>
    2e18:	af cf       	rjmp	.-162    	; 0x2d78 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	1f 91       	pop	r17
    2e20:	08 95       	ret

00002e22 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2e22:	83 30       	cpi	r24, 0x03	; 3
    2e24:	81 f0       	breq	.+32     	; 0x2e46 <turnOffPWM+0x24>
    2e26:	28 f4       	brcc	.+10     	; 0x2e32 <turnOffPWM+0x10>
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	99 f0       	breq	.+38     	; 0x2e52 <turnOffPWM+0x30>
    2e2c:	82 30       	cpi	r24, 0x02	; 2
    2e2e:	a1 f0       	breq	.+40     	; 0x2e58 <turnOffPWM+0x36>
    2e30:	08 95       	ret
    2e32:	87 30       	cpi	r24, 0x07	; 7
    2e34:	a9 f0       	breq	.+42     	; 0x2e60 <turnOffPWM+0x3e>
    2e36:	88 30       	cpi	r24, 0x08	; 8
    2e38:	b9 f0       	breq	.+46     	; 0x2e68 <turnOffPWM+0x46>
    2e3a:	84 30       	cpi	r24, 0x04	; 4
    2e3c:	d1 f4       	brne	.+52     	; 0x2e72 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2e3e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2e42:	8f 7d       	andi	r24, 0xDF	; 223
    2e44:	03 c0       	rjmp	.+6      	; 0x2e4c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2e46:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2e4a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2e4c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2e50:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2e52:	84 b5       	in	r24, 0x24	; 36
    2e54:	8f 77       	andi	r24, 0x7F	; 127
    2e56:	02 c0       	rjmp	.+4      	; 0x2e5c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2e58:	84 b5       	in	r24, 0x24	; 36
    2e5a:	8f 7d       	andi	r24, 0xDF	; 223
    2e5c:	84 bd       	out	0x24, r24	; 36
    2e5e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2e60:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2e64:	8f 77       	andi	r24, 0x7F	; 127
    2e66:	03 c0       	rjmp	.+6      	; 0x2e6e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2e68:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2e6c:	8f 7d       	andi	r24, 0xDF	; 223
    2e6e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2e72:	08 95       	ret

00002e74 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	e9 5c       	subi	r30, 0xC9	; 201
    2e7e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e80:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2e82:	fc 01       	movw	r30, r24
    2e84:	e5 5b       	subi	r30, 0xB5	; 181
    2e86:	fd 4f       	sbci	r31, 0xFD	; 253
    2e88:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2e8a:	88 23       	and	r24, r24
    2e8c:	61 f1       	breq	.+88     	; 0x2ee6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	fc 01       	movw	r30, r24
    2e96:	ed 58       	subi	r30, 0x8D	; 141
    2e98:	fd 4f       	sbci	r31, 0xFD	; 253
    2e9a:	c5 91       	lpm	r28, Z+
    2e9c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	e7 59       	subi	r30, 0x97	; 151
    2ea2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ea4:	a5 91       	lpm	r26, Z+
    2ea6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2ea8:	61 11       	cpse	r22, r1
    2eaa:	09 c0       	rjmp	.+18     	; 0x2ebe <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2eac:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2eae:	f8 94       	cli
		*reg &= ~bit;
    2eb0:	88 81       	ld	r24, Y
    2eb2:	20 95       	com	r18
    2eb4:	82 23       	and	r24, r18
    2eb6:	88 83       	st	Y, r24
		*out &= ~bit;
    2eb8:	ec 91       	ld	r30, X
    2eba:	2e 23       	and	r18, r30
    2ebc:	0b c0       	rjmp	.+22     	; 0x2ed4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2ebe:	62 30       	cpi	r22, 0x02	; 2
    2ec0:	61 f4       	brne	.+24     	; 0x2eda <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2ec2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2ec4:	f8 94       	cli
		*reg &= ~bit;
    2ec6:	88 81       	ld	r24, Y
    2ec8:	32 2f       	mov	r19, r18
    2eca:	30 95       	com	r19
    2ecc:	83 23       	and	r24, r19
    2ece:	88 83       	st	Y, r24
		*out |= bit;
    2ed0:	ec 91       	ld	r30, X
    2ed2:	2e 2b       	or	r18, r30
    2ed4:	2c 93       	st	X, r18
		SREG = oldSREG;
    2ed6:	9f bf       	out	0x3f, r25	; 63
    2ed8:	06 c0       	rjmp	.+12     	; 0x2ee6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2eda:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2edc:	f8 94       	cli
		*reg |= bit;
    2ede:	e8 81       	ld	r30, Y
    2ee0:	2e 2b       	or	r18, r30
    2ee2:	28 83       	st	Y, r18
		SREG = oldSREG;
    2ee4:	8f bf       	out	0x3f, r24	; 63
	}
}
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	08 95       	ret

00002eec <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2eec:	1f 93       	push	r17
    2eee:	cf 93       	push	r28
    2ef0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	f9 01       	movw	r30, r18
    2ef8:	ed 5d       	subi	r30, 0xDD	; 221
    2efa:	fd 4f       	sbci	r31, 0xFD	; 253
    2efc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2efe:	f9 01       	movw	r30, r18
    2f00:	e9 5c       	subi	r30, 0xC9	; 201
    2f02:	fd 4f       	sbci	r31, 0xFD	; 253
    2f04:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2f06:	f9 01       	movw	r30, r18
    2f08:	e5 5b       	subi	r30, 0xB5	; 181
    2f0a:	fd 4f       	sbci	r31, 0xFD	; 253
    2f0c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2f0e:	cc 23       	and	r28, r28
    2f10:	c1 f0       	breq	.+48     	; 0x2f42 <digitalWrite+0x56>
    2f12:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2f14:	81 11       	cpse	r24, r1
    2f16:	0e 94 11 17 	call	0x2e22	; 0x2e22 <turnOffPWM>

	out = portOutputRegister(port);
    2f1a:	ec 2f       	mov	r30, r28
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	ee 0f       	add	r30, r30
    2f20:	ff 1f       	adc	r31, r31
    2f22:	e7 59       	subi	r30, 0x97	; 151
    2f24:	fd 4f       	sbci	r31, 0xFD	; 253
    2f26:	a5 91       	lpm	r26, Z+
    2f28:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2f2a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2f2c:	f8 94       	cli

	if (val == LOW) {
    2f2e:	11 11       	cpse	r17, r1
    2f30:	04 c0       	rjmp	.+8      	; 0x2f3a <digitalWrite+0x4e>
		*out &= ~bit;
    2f32:	8c 91       	ld	r24, X
    2f34:	d0 95       	com	r29
    2f36:	d8 23       	and	r29, r24
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <digitalWrite+0x52>
	} else {
		*out |= bit;
    2f3a:	ec 91       	ld	r30, X
    2f3c:	de 2b       	or	r29, r30
    2f3e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2f40:	9f bf       	out	0x3f, r25	; 63
}
    2f42:	df 91       	pop	r29
    2f44:	cf 91       	pop	r28
    2f46:	1f 91       	pop	r17
    2f48:	08 95       	ret

00002f4a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2f4a:	08 95       	ret

00002f4c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2f4c:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <twi_state>
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <twi_sendStop>
    2f56:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <twi_inRepStart>
    2f5a:	61 e0       	ldi	r22, 0x01	; 1
    2f5c:	82 e1       	ldi	r24, 0x12	; 18
    2f5e:	0e 94 76 17 	call	0x2eec	; 0x2eec <digitalWrite>
    2f62:	61 e0       	ldi	r22, 0x01	; 1
    2f64:	83 e1       	ldi	r24, 0x13	; 19
    2f66:	0e 94 76 17 	call	0x2eec	; 0x2eec <digitalWrite>
    2f6a:	e9 eb       	ldi	r30, 0xB9	; 185
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	8e 7f       	andi	r24, 0xFE	; 254
    2f72:	80 83       	st	Z, r24
    2f74:	80 81       	ld	r24, Z
    2f76:	8d 7f       	andi	r24, 0xFD	; 253
    2f78:	80 83       	st	Z, r24
    2f7a:	88 e4       	ldi	r24, 0x48	; 72
    2f7c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2f80:	85 e4       	ldi	r24, 0x45	; 69
    2f82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f86:	08 95       	ret

00002f88 <twi_readFrom>:
    2f88:	41 32       	cpi	r20, 0x21	; 33
    2f8a:	08 f0       	brcs	.+2      	; 0x2f8e <twi_readFrom+0x6>
    2f8c:	43 c0       	rjmp	.+134    	; 0x3014 <twi_readFrom+0x8c>
    2f8e:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <twi_state>
    2f92:	91 11       	cpse	r25, r1
    2f94:	fc cf       	rjmp	.-8      	; 0x2f8e <twi_readFrom+0x6>
    2f96:	91 e0       	ldi	r25, 0x01	; 1
    2f98:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <twi_state>
    2f9c:	20 93 17 04 	sts	0x0417, r18	; 0x800417 <twi_sendStop>
    2fa0:	2f ef       	ldi	r18, 0xFF	; 255
    2fa2:	20 93 ac 03 	sts	0x03AC, r18	; 0x8003ac <twi_error>
    2fa6:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <twi_masterBufferIndex>
    2faa:	24 0f       	add	r18, r20
    2fac:	20 93 f0 03 	sts	0x03F0, r18	; 0x8003f0 <twi_masterBufferLength>
    2fb0:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <twi_slarw>
    2fb4:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <twi_slarw>
    2fb8:	88 0f       	add	r24, r24
    2fba:	89 2b       	or	r24, r25
    2fbc:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <twi_slarw>
    2fc0:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <twi_inRepStart>
    2fc4:	81 30       	cpi	r24, 0x01	; 1
    2fc6:	61 f4       	brne	.+24     	; 0x2fe0 <twi_readFrom+0x58>
    2fc8:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <twi_inRepStart>
    2fcc:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <twi_slarw>
    2fd0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2fd4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2fd8:	83 fd       	sbrc	r24, 3
    2fda:	f8 cf       	rjmp	.-16     	; 0x2fcc <twi_readFrom+0x44>
    2fdc:	85 ec       	ldi	r24, 0xC5	; 197
    2fde:	01 c0       	rjmp	.+2      	; 0x2fe2 <twi_readFrom+0x5a>
    2fe0:	85 ee       	ldi	r24, 0xE5	; 229
    2fe2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2fe6:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <twi_state>
    2fea:	81 30       	cpi	r24, 0x01	; 1
    2fec:	e1 f3       	breq	.-8      	; 0x2fe6 <twi_readFrom+0x5e>
    2fee:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <twi_masterBufferIndex>
    2ff2:	84 17       	cp	r24, r20
    2ff4:	10 f4       	brcc	.+4      	; 0x2ffa <twi_readFrom+0x72>
    2ff6:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <twi_masterBufferIndex>
    2ffa:	a2 ef       	ldi	r26, 0xF2	; 242
    2ffc:	b3 e0       	ldi	r27, 0x03	; 3
    2ffe:	96 2f       	mov	r25, r22
    3000:	fb 01       	movw	r30, r22
    3002:	8e 2f       	mov	r24, r30
    3004:	89 1b       	sub	r24, r25
    3006:	84 17       	cp	r24, r20
    3008:	18 f4       	brcc	.+6      	; 0x3010 <twi_readFrom+0x88>
    300a:	8d 91       	ld	r24, X+
    300c:	81 93       	st	Z+, r24
    300e:	f9 cf       	rjmp	.-14     	; 0x3002 <twi_readFrom+0x7a>
    3010:	84 2f       	mov	r24, r20
    3012:	08 95       	ret
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	08 95       	ret

00003018 <twi_writeTo>:
    3018:	0f 93       	push	r16
    301a:	41 32       	cpi	r20, 0x21	; 33
    301c:	08 f0       	brcs	.+2      	; 0x3020 <twi_writeTo+0x8>
    301e:	4a c0       	rjmp	.+148    	; 0x30b4 <twi_writeTo+0x9c>
    3020:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <twi_state>
    3024:	91 11       	cpse	r25, r1
    3026:	fc cf       	rjmp	.-8      	; 0x3020 <twi_writeTo+0x8>
    3028:	32 e0       	ldi	r19, 0x02	; 2
    302a:	30 93 19 04 	sts	0x0419, r19	; 0x800419 <twi_state>
    302e:	00 93 17 04 	sts	0x0417, r16	; 0x800417 <twi_sendStop>
    3032:	3f ef       	ldi	r19, 0xFF	; 255
    3034:	30 93 ac 03 	sts	0x03AC, r19	; 0x8003ac <twi_error>
    3038:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <twi_masterBufferIndex>
    303c:	40 93 f0 03 	sts	0x03F0, r20	; 0x8003f0 <twi_masterBufferLength>
    3040:	56 2f       	mov	r21, r22
    3042:	a2 ef       	ldi	r26, 0xF2	; 242
    3044:	b3 e0       	ldi	r27, 0x03	; 3
    3046:	fb 01       	movw	r30, r22
    3048:	3e 2f       	mov	r19, r30
    304a:	35 1b       	sub	r19, r21
    304c:	34 17       	cp	r19, r20
    304e:	18 f4       	brcc	.+6      	; 0x3056 <twi_writeTo+0x3e>
    3050:	31 91       	ld	r19, Z+
    3052:	3d 93       	st	X+, r19
    3054:	f9 cf       	rjmp	.-14     	; 0x3048 <twi_writeTo+0x30>
    3056:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <twi_slarw>
    305a:	30 91 18 04 	lds	r19, 0x0418	; 0x800418 <twi_slarw>
    305e:	88 0f       	add	r24, r24
    3060:	83 2b       	or	r24, r19
    3062:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <twi_slarw>
    3066:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <twi_inRepStart>
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	61 f4       	brne	.+24     	; 0x3086 <twi_writeTo+0x6e>
    306e:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <twi_inRepStart>
    3072:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <twi_slarw>
    3076:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    307a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    307e:	83 fd       	sbrc	r24, 3
    3080:	f8 cf       	rjmp	.-16     	; 0x3072 <twi_writeTo+0x5a>
    3082:	85 ec       	ldi	r24, 0xC5	; 197
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <twi_writeTo+0x70>
    3086:	85 ee       	ldi	r24, 0xE5	; 229
    3088:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    308c:	22 23       	and	r18, r18
    308e:	21 f0       	breq	.+8      	; 0x3098 <twi_writeTo+0x80>
    3090:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <twi_state>
    3094:	82 30       	cpi	r24, 0x02	; 2
    3096:	d1 f3       	breq	.-12     	; 0x308c <twi_writeTo+0x74>
    3098:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <twi_error>
    309c:	8f 3f       	cpi	r24, 0xFF	; 255
    309e:	79 f0       	breq	.+30     	; 0x30be <twi_writeTo+0xa6>
    30a0:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <twi_error>
    30a4:	80 32       	cpi	r24, 0x20	; 32
    30a6:	41 f0       	breq	.+16     	; 0x30b8 <twi_writeTo+0xa0>
    30a8:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <twi_error>
    30ac:	80 33       	cpi	r24, 0x30	; 48
    30ae:	31 f0       	breq	.+12     	; 0x30bc <twi_writeTo+0xa4>
    30b0:	94 e0       	ldi	r25, 0x04	; 4
    30b2:	05 c0       	rjmp	.+10     	; 0x30be <twi_writeTo+0xa6>
    30b4:	91 e0       	ldi	r25, 0x01	; 1
    30b6:	03 c0       	rjmp	.+6      	; 0x30be <twi_writeTo+0xa6>
    30b8:	92 e0       	ldi	r25, 0x02	; 2
    30ba:	01 c0       	rjmp	.+2      	; 0x30be <twi_writeTo+0xa6>
    30bc:	93 e0       	ldi	r25, 0x03	; 3
    30be:	89 2f       	mov	r24, r25
    30c0:	0f 91       	pop	r16
    30c2:	08 95       	ret

000030c4 <twi_transmit>:
    30c4:	40 91 ce 03 	lds	r20, 0x03CE	; 0x8003ce <twi_txBufferLength>
    30c8:	26 2f       	mov	r18, r22
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	24 0f       	add	r18, r20
    30ce:	31 1d       	adc	r19, r1
    30d0:	21 32       	cpi	r18, 0x21	; 33
    30d2:	31 05       	cpc	r19, r1
    30d4:	dc f4       	brge	.+54     	; 0x310c <twi_transmit+0x48>
    30d6:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <twi_state>
    30da:	24 30       	cpi	r18, 0x04	; 4
    30dc:	c9 f4       	brne	.+50     	; 0x3110 <twi_transmit+0x4c>
    30de:	fc 01       	movw	r30, r24
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	86 17       	cp	r24, r22
    30e6:	58 f4       	brcc	.+22     	; 0x30fe <twi_transmit+0x3a>
    30e8:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <twi_txBufferLength>
    30ec:	21 91       	ld	r18, Z+
    30ee:	dc 01       	movw	r26, r24
    30f0:	a0 53       	subi	r26, 0x30	; 48
    30f2:	bc 4f       	sbci	r27, 0xFC	; 252
    30f4:	a3 0f       	add	r26, r19
    30f6:	b1 1d       	adc	r27, r1
    30f8:	2c 93       	st	X, r18
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	f3 cf       	rjmp	.-26     	; 0x30e4 <twi_transmit+0x20>
    30fe:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <twi_txBufferLength>
    3102:	68 0f       	add	r22, r24
    3104:	60 93 ce 03 	sts	0x03CE, r22	; 0x8003ce <twi_txBufferLength>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	08 95       	ret
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	08 95       	ret
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	08 95       	ret

00003114 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3114:	85 ed       	ldi	r24, 0xD5	; 213
    3116:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    311a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    311e:	84 fd       	sbrc	r24, 4
    3120:	fc cf       	rjmp	.-8      	; 0x311a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3122:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <twi_state>
    3126:	08 95       	ret

00003128 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3128:	85 ec       	ldi	r24, 0xC5	; 197
    312a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    312e:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <twi_state>
    3132:	08 95       	ret

00003134 <__vector_24>:
}

ISR(TWI_vect)
{
    3134:	1f 92       	push	r1
    3136:	0f 92       	push	r0
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	0f 92       	push	r0
    313c:	11 24       	eor	r1, r1
    313e:	2f 93       	push	r18
    3140:	3f 93       	push	r19
    3142:	4f 93       	push	r20
    3144:	5f 93       	push	r21
    3146:	6f 93       	push	r22
    3148:	7f 93       	push	r23
    314a:	8f 93       	push	r24
    314c:	9f 93       	push	r25
    314e:	af 93       	push	r26
    3150:	bf 93       	push	r27
    3152:	ef 93       	push	r30
    3154:	ff 93       	push	r31
  switch(TW_STATUS){
    3156:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    315a:	88 7f       	andi	r24, 0xF8	; 248
    315c:	80 36       	cpi	r24, 0x60	; 96
    315e:	09 f4       	brne	.+2      	; 0x3162 <__vector_24+0x2e>
    3160:	9e c0       	rjmp	.+316    	; 0x329e <__vector_24+0x16a>
    3162:	78 f5       	brcc	.+94     	; 0x31c2 <__vector_24+0x8e>
    3164:	88 32       	cpi	r24, 0x28	; 40
    3166:	09 f4       	brne	.+2      	; 0x316a <__vector_24+0x36>
    3168:	5d c0       	rjmp	.+186    	; 0x3224 <__vector_24+0xf0>
    316a:	90 f4       	brcc	.+36     	; 0x3190 <__vector_24+0x5c>
    316c:	80 31       	cpi	r24, 0x10	; 16
    316e:	09 f4       	brne	.+2      	; 0x3172 <__vector_24+0x3e>
    3170:	56 c0       	rjmp	.+172    	; 0x321e <__vector_24+0xea>
    3172:	38 f4       	brcc	.+14     	; 0x3182 <__vector_24+0x4e>
    3174:	88 23       	and	r24, r24
    3176:	09 f4       	brne	.+2      	; 0x317a <__vector_24+0x46>
    3178:	f5 c0       	rjmp	.+490    	; 0x3364 <__vector_24+0x230>
    317a:	88 30       	cpi	r24, 0x08	; 8
    317c:	09 f4       	brne	.+2      	; 0x3180 <__vector_24+0x4c>
    317e:	4f c0       	rjmp	.+158    	; 0x321e <__vector_24+0xea>
    3180:	f5 c0       	rjmp	.+490    	; 0x336c <__vector_24+0x238>
    3182:	88 31       	cpi	r24, 0x18	; 24
    3184:	09 f4       	brne	.+2      	; 0x3188 <__vector_24+0x54>
    3186:	4e c0       	rjmp	.+156    	; 0x3224 <__vector_24+0xf0>
    3188:	80 32       	cpi	r24, 0x20	; 32
    318a:	09 f4       	brne	.+2      	; 0x318e <__vector_24+0x5a>
    318c:	5f c0       	rjmp	.+190    	; 0x324c <__vector_24+0x118>
    318e:	ee c0       	rjmp	.+476    	; 0x336c <__vector_24+0x238>
    3190:	80 34       	cpi	r24, 0x40	; 64
    3192:	09 f4       	brne	.+2      	; 0x3196 <__vector_24+0x62>
    3194:	6a c0       	rjmp	.+212    	; 0x326a <__vector_24+0x136>
    3196:	58 f4       	brcc	.+22     	; 0x31ae <__vector_24+0x7a>
    3198:	80 33       	cpi	r24, 0x30	; 48
    319a:	09 f4       	brne	.+2      	; 0x319e <__vector_24+0x6a>
    319c:	57 c0       	rjmp	.+174    	; 0x324c <__vector_24+0x118>
    319e:	88 33       	cpi	r24, 0x38	; 56
    31a0:	09 f0       	breq	.+2      	; 0x31a4 <__vector_24+0x70>
    31a2:	e4 c0       	rjmp	.+456    	; 0x336c <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    31a4:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <twi_error>
      twi_releaseBus();
    31a8:	0e 94 94 18 	call	0x3128	; 0x3128 <twi_releaseBus>
      break;
    31ac:	df c0       	rjmp	.+446    	; 0x336c <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    31ae:	80 35       	cpi	r24, 0x50	; 80
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <__vector_24+0x80>
    31b2:	4f c0       	rjmp	.+158    	; 0x3252 <__vector_24+0x11e>
    31b4:	88 35       	cpi	r24, 0x58	; 88
    31b6:	09 f4       	brne	.+2      	; 0x31ba <__vector_24+0x86>
    31b8:	5d c0       	rjmp	.+186    	; 0x3274 <__vector_24+0x140>
    31ba:	88 34       	cpi	r24, 0x48	; 72
    31bc:	09 f0       	breq	.+2      	; 0x31c0 <__vector_24+0x8c>
    31be:	d6 c0       	rjmp	.+428    	; 0x336c <__vector_24+0x238>
    31c0:	d3 c0       	rjmp	.+422    	; 0x3368 <__vector_24+0x234>
    31c2:	88 39       	cpi	r24, 0x98	; 152
    31c4:	09 f4       	brne	.+2      	; 0x31c8 <__vector_24+0x94>
    31c6:	c4 c0       	rjmp	.+392    	; 0x3350 <__vector_24+0x21c>
    31c8:	a8 f4       	brcc	.+42     	; 0x31f4 <__vector_24+0xc0>
    31ca:	88 37       	cpi	r24, 0x78	; 120
    31cc:	09 f4       	brne	.+2      	; 0x31d0 <__vector_24+0x9c>
    31ce:	67 c0       	rjmp	.+206    	; 0x329e <__vector_24+0x16a>
    31d0:	38 f4       	brcc	.+14     	; 0x31e0 <__vector_24+0xac>
    31d2:	88 36       	cpi	r24, 0x68	; 104
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <__vector_24+0xa4>
    31d6:	63 c0       	rjmp	.+198    	; 0x329e <__vector_24+0x16a>
    31d8:	80 37       	cpi	r24, 0x70	; 112
    31da:	09 f4       	brne	.+2      	; 0x31de <__vector_24+0xaa>
    31dc:	60 c0       	rjmp	.+192    	; 0x329e <__vector_24+0x16a>
    31de:	c6 c0       	rjmp	.+396    	; 0x336c <__vector_24+0x238>
    31e0:	88 38       	cpi	r24, 0x88	; 136
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <__vector_24+0xb2>
    31e4:	b5 c0       	rjmp	.+362    	; 0x3350 <__vector_24+0x21c>
    31e6:	80 39       	cpi	r24, 0x90	; 144
    31e8:	09 f4       	brne	.+2      	; 0x31ec <__vector_24+0xb8>
    31ea:	5f c0       	rjmp	.+190    	; 0x32aa <__vector_24+0x176>
    31ec:	80 38       	cpi	r24, 0x80	; 128
    31ee:	09 f0       	breq	.+2      	; 0x31f2 <__vector_24+0xbe>
    31f0:	bd c0       	rjmp	.+378    	; 0x336c <__vector_24+0x238>
    31f2:	5b c0       	rjmp	.+182    	; 0x32aa <__vector_24+0x176>
    31f4:	80 3b       	cpi	r24, 0xB0	; 176
    31f6:	09 f4       	brne	.+2      	; 0x31fa <__vector_24+0xc6>
    31f8:	83 c0       	rjmp	.+262    	; 0x3300 <__vector_24+0x1cc>
    31fa:	38 f4       	brcc	.+14     	; 0x320a <__vector_24+0xd6>
    31fc:	80 3a       	cpi	r24, 0xA0	; 160
    31fe:	09 f4       	brne	.+2      	; 0x3202 <__vector_24+0xce>
    3200:	66 c0       	rjmp	.+204    	; 0x32ce <__vector_24+0x19a>
    3202:	88 3a       	cpi	r24, 0xA8	; 168
    3204:	09 f4       	brne	.+2      	; 0x3208 <__vector_24+0xd4>
    3206:	7c c0       	rjmp	.+248    	; 0x3300 <__vector_24+0x1cc>
    3208:	b1 c0       	rjmp	.+354    	; 0x336c <__vector_24+0x238>
    320a:	80 3c       	cpi	r24, 0xC0	; 192
    320c:	09 f4       	brne	.+2      	; 0x3210 <__vector_24+0xdc>
    320e:	a4 c0       	rjmp	.+328    	; 0x3358 <__vector_24+0x224>
    3210:	88 3c       	cpi	r24, 0xC8	; 200
    3212:	09 f4       	brne	.+2      	; 0x3216 <__vector_24+0xe2>
    3214:	a1 c0       	rjmp	.+322    	; 0x3358 <__vector_24+0x224>
    3216:	88 3b       	cpi	r24, 0xB8	; 184
    3218:	09 f4       	brne	.+2      	; 0x321c <__vector_24+0xe8>
    321a:	87 c0       	rjmp	.+270    	; 0x332a <__vector_24+0x1f6>
    321c:	a7 c0       	rjmp	.+334    	; 0x336c <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    321e:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <twi_slarw>
    3222:	10 c0       	rjmp	.+32     	; 0x3244 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3224:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <twi_masterBufferIndex>
    3228:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <twi_masterBufferLength>
    322c:	98 17       	cp	r25, r24
    322e:	70 f5       	brcc	.+92     	; 0x328c <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3230:	e0 91 f1 03 	lds	r30, 0x03F1	; 0x8003f1 <twi_masterBufferIndex>
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	8e 0f       	add	r24, r30
    3238:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <twi_masterBufferIndex>
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	ee 50       	subi	r30, 0x0E	; 14
    3240:	fc 4f       	sbci	r31, 0xFC	; 252
    3242:	80 81       	ld	r24, Z
    3244:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3248:	85 ec       	ldi	r24, 0xC5	; 197
    324a:	83 c0       	rjmp	.+262    	; 0x3352 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    324c:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <twi_error>
    3250:	8b c0       	rjmp	.+278    	; 0x3368 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3252:	e0 91 f1 03 	lds	r30, 0x03F1	; 0x8003f1 <twi_masterBufferIndex>
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	8e 0f       	add	r24, r30
    325a:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <twi_masterBufferIndex>
    325e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	ee 50       	subi	r30, 0x0E	; 14
    3266:	fc 4f       	sbci	r31, 0xFC	; 252
    3268:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    326a:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <twi_masterBufferIndex>
    326e:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <twi_masterBufferLength>
    3272:	6b c0       	rjmp	.+214    	; 0x334a <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3274:	e0 91 f1 03 	lds	r30, 0x03F1	; 0x8003f1 <twi_masterBufferIndex>
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	8e 0f       	add	r24, r30
    327c:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <twi_masterBufferIndex>
    3280:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	ee 50       	subi	r30, 0x0E	; 14
    3288:	fc 4f       	sbci	r31, 0xFC	; 252
    328a:	80 83       	st	Z, r24
	if (twi_sendStop)
    328c:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <twi_sendStop>
    3290:	81 11       	cpse	r24, r1
    3292:	6a c0       	rjmp	.+212    	; 0x3368 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    329a:	84 ea       	ldi	r24, 0xA4	; 164
    329c:	5e c0       	rjmp	.+188    	; 0x335a <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    329e:	83 e0       	ldi	r24, 0x03	; 3
    32a0:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    32a4:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <twi_rxBufferIndex>
    32a8:	cf cf       	rjmp	.-98     	; 0x3248 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    32aa:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <twi_rxBufferIndex>
    32ae:	80 32       	cpi	r24, 0x20	; 32
    32b0:	08 f0       	brcs	.+2      	; 0x32b4 <__vector_24+0x180>
    32b2:	4e c0       	rjmp	.+156    	; 0x3350 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    32b4:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <twi_rxBufferIndex>
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	8e 0f       	add	r24, r30
    32bc:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <twi_rxBufferIndex>
    32c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	e2 55       	subi	r30, 0x52	; 82
    32c8:	fc 4f       	sbci	r31, 0xFC	; 252
    32ca:	80 83       	st	Z, r24
    32cc:	bd cf       	rjmp	.-134    	; 0x3248 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    32ce:	0e 94 94 18 	call	0x3128	; 0x3128 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    32d2:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <twi_rxBufferIndex>
    32d6:	80 32       	cpi	r24, 0x20	; 32
    32d8:	30 f4       	brcc	.+12     	; 0x32e6 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    32da:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <twi_rxBufferIndex>
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	e2 55       	subi	r30, 0x52	; 82
    32e2:	fc 4f       	sbci	r31, 0xFC	; 252
    32e4:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    32e6:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <twi_rxBufferIndex>
    32ea:	70 e0       	ldi	r23, 0x00	; 0
    32ec:	e0 91 12 04 	lds	r30, 0x0412	; 0x800412 <twi_onSlaveReceive>
    32f0:	f0 91 13 04 	lds	r31, 0x0413	; 0x800413 <twi_onSlaveReceive+0x1>
    32f4:	8e ea       	ldi	r24, 0xAE	; 174
    32f6:	93 e0       	ldi	r25, 0x03	; 3
    32f8:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    32fa:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <twi_rxBufferIndex>
      break;
    32fe:	36 c0       	rjmp	.+108    	; 0x336c <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3300:	84 e0       	ldi	r24, 0x04	; 4
    3302:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3306:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    330a:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    330e:	e0 91 14 04 	lds	r30, 0x0414	; 0x800414 <twi_onSlaveTransmit>
    3312:	f0 91 15 04 	lds	r31, 0x0415	; 0x800415 <twi_onSlaveTransmit+0x1>
    3316:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3318:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <twi_txBufferLength>
    331c:	81 11       	cpse	r24, r1
    331e:	05 c0       	rjmp	.+10     	; 0x332a <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3326:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    332a:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <twi_txBufferIndex>
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	8e 0f       	add	r24, r30
    3332:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <twi_txBufferIndex>
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	e0 53       	subi	r30, 0x30	; 48
    333a:	fc 4f       	sbci	r31, 0xFC	; 252
    333c:	80 81       	ld	r24, Z
    333e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3342:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <twi_txBufferIndex>
    3346:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <twi_txBufferLength>
    334a:	98 17       	cp	r25, r24
    334c:	08 f4       	brcc	.+2      	; 0x3350 <__vector_24+0x21c>
    334e:	7c cf       	rjmp	.-264    	; 0x3248 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3350:	85 e8       	ldi	r24, 0x85	; 133
    3352:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3356:	0a c0       	rjmp	.+20     	; 0x336c <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3358:	85 ec       	ldi	r24, 0xC5	; 197
    335a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    335e:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <twi_state>
      break;
    3362:	04 c0       	rjmp	.+8      	; 0x336c <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3364:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <twi_error>
      twi_stop();
    3368:	0e 94 8a 18 	call	0x3114	; 0x3114 <twi_stop>
      break;
  }
}
    336c:	ff 91       	pop	r31
    336e:	ef 91       	pop	r30
    3370:	bf 91       	pop	r27
    3372:	af 91       	pop	r26
    3374:	9f 91       	pop	r25
    3376:	8f 91       	pop	r24
    3378:	7f 91       	pop	r23
    337a:	6f 91       	pop	r22
    337c:	5f 91       	pop	r21
    337e:	4f 91       	pop	r20
    3380:	3f 91       	pop	r19
    3382:	2f 91       	pop	r18
    3384:	0f 90       	pop	r0
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	0f 90       	pop	r0
    338a:	1f 90       	pop	r1
    338c:	18 95       	reti

0000338e <__divmodhi4>:
    338e:	97 fb       	bst	r25, 7
    3390:	07 2e       	mov	r0, r23
    3392:	16 f4       	brtc	.+4      	; 0x3398 <__divmodhi4+0xa>
    3394:	00 94       	com	r0
    3396:	07 d0       	rcall	.+14     	; 0x33a6 <__divmodhi4_neg1>
    3398:	77 fd       	sbrc	r23, 7
    339a:	09 d0       	rcall	.+18     	; 0x33ae <__divmodhi4_neg2>
    339c:	0e 94 03 1a 	call	0x3406	; 0x3406 <__udivmodhi4>
    33a0:	07 fc       	sbrc	r0, 7
    33a2:	05 d0       	rcall	.+10     	; 0x33ae <__divmodhi4_neg2>
    33a4:	3e f4       	brtc	.+14     	; 0x33b4 <__divmodhi4_exit>

000033a6 <__divmodhi4_neg1>:
    33a6:	90 95       	com	r25
    33a8:	81 95       	neg	r24
    33aa:	9f 4f       	sbci	r25, 0xFF	; 255
    33ac:	08 95       	ret

000033ae <__divmodhi4_neg2>:
    33ae:	70 95       	com	r23
    33b0:	61 95       	neg	r22
    33b2:	7f 4f       	sbci	r23, 0xFF	; 255

000033b4 <__divmodhi4_exit>:
    33b4:	08 95       	ret

000033b6 <__udivmodsi4>:
    33b6:	a1 e2       	ldi	r26, 0x21	; 33
    33b8:	1a 2e       	mov	r1, r26
    33ba:	aa 1b       	sub	r26, r26
    33bc:	bb 1b       	sub	r27, r27
    33be:	fd 01       	movw	r30, r26
    33c0:	0d c0       	rjmp	.+26     	; 0x33dc <__udivmodsi4_ep>

000033c2 <__udivmodsi4_loop>:
    33c2:	aa 1f       	adc	r26, r26
    33c4:	bb 1f       	adc	r27, r27
    33c6:	ee 1f       	adc	r30, r30
    33c8:	ff 1f       	adc	r31, r31
    33ca:	a2 17       	cp	r26, r18
    33cc:	b3 07       	cpc	r27, r19
    33ce:	e4 07       	cpc	r30, r20
    33d0:	f5 07       	cpc	r31, r21
    33d2:	20 f0       	brcs	.+8      	; 0x33dc <__udivmodsi4_ep>
    33d4:	a2 1b       	sub	r26, r18
    33d6:	b3 0b       	sbc	r27, r19
    33d8:	e4 0b       	sbc	r30, r20
    33da:	f5 0b       	sbc	r31, r21

000033dc <__udivmodsi4_ep>:
    33dc:	66 1f       	adc	r22, r22
    33de:	77 1f       	adc	r23, r23
    33e0:	88 1f       	adc	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	1a 94       	dec	r1
    33e6:	69 f7       	brne	.-38     	; 0x33c2 <__udivmodsi4_loop>
    33e8:	60 95       	com	r22
    33ea:	70 95       	com	r23
    33ec:	80 95       	com	r24
    33ee:	90 95       	com	r25
    33f0:	9b 01       	movw	r18, r22
    33f2:	ac 01       	movw	r20, r24
    33f4:	bd 01       	movw	r22, r26
    33f6:	cf 01       	movw	r24, r30
    33f8:	08 95       	ret

000033fa <__tablejump2__>:
    33fa:	ee 0f       	add	r30, r30
    33fc:	ff 1f       	adc	r31, r31
    33fe:	05 90       	lpm	r0, Z+
    3400:	f4 91       	lpm	r31, Z
    3402:	e0 2d       	mov	r30, r0
    3404:	09 94       	ijmp

00003406 <__udivmodhi4>:
    3406:	aa 1b       	sub	r26, r26
    3408:	bb 1b       	sub	r27, r27
    340a:	51 e1       	ldi	r21, 0x11	; 17
    340c:	07 c0       	rjmp	.+14     	; 0x341c <__udivmodhi4_ep>

0000340e <__udivmodhi4_loop>:
    340e:	aa 1f       	adc	r26, r26
    3410:	bb 1f       	adc	r27, r27
    3412:	a6 17       	cp	r26, r22
    3414:	b7 07       	cpc	r27, r23
    3416:	10 f0       	brcs	.+4      	; 0x341c <__udivmodhi4_ep>
    3418:	a6 1b       	sub	r26, r22
    341a:	b7 0b       	sbc	r27, r23

0000341c <__udivmodhi4_ep>:
    341c:	88 1f       	adc	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	5a 95       	dec	r21
    3422:	a9 f7       	brne	.-22     	; 0x340e <__udivmodhi4_loop>
    3424:	80 95       	com	r24
    3426:	90 95       	com	r25
    3428:	bc 01       	movw	r22, r24
    342a:	cd 01       	movw	r24, r26
    342c:	08 95       	ret

0000342e <dtostrf>:
    342e:	ef 92       	push	r14
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	e8 01       	movw	r28, r16
    343a:	47 fd       	sbrc	r20, 7
    343c:	02 c0       	rjmp	.+4      	; 0x3442 <dtostrf+0x14>
    343e:	34 e0       	ldi	r19, 0x04	; 4
    3440:	01 c0       	rjmp	.+2      	; 0x3444 <dtostrf+0x16>
    3442:	34 e1       	ldi	r19, 0x14	; 20
    3444:	04 2e       	mov	r0, r20
    3446:	00 0c       	add	r0, r0
    3448:	55 0b       	sbc	r21, r21
    344a:	57 ff       	sbrs	r21, 7
    344c:	03 c0       	rjmp	.+6      	; 0x3454 <dtostrf+0x26>
    344e:	51 95       	neg	r21
    3450:	41 95       	neg	r20
    3452:	51 09       	sbc	r21, r1
    3454:	e3 2e       	mov	r14, r19
    3456:	02 2f       	mov	r16, r18
    3458:	24 2f       	mov	r18, r20
    345a:	ae 01       	movw	r20, r28
    345c:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <dtoa_prf>
    3460:	ce 01       	movw	r24, r28
    3462:	df 91       	pop	r29
    3464:	cf 91       	pop	r28
    3466:	1f 91       	pop	r17
    3468:	0f 91       	pop	r16
    346a:	ef 90       	pop	r14
    346c:	08 95       	ret

0000346e <malloc>:
    346e:	0f 93       	push	r16
    3470:	1f 93       	push	r17
    3472:	cf 93       	push	r28
    3474:	df 93       	push	r29
    3476:	82 30       	cpi	r24, 0x02	; 2
    3478:	91 05       	cpc	r25, r1
    347a:	10 f4       	brcc	.+4      	; 0x3480 <malloc+0x12>
    347c:	82 e0       	ldi	r24, 0x02	; 2
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	e0 91 1c 04 	lds	r30, 0x041C	; 0x80041c <__flp>
    3484:	f0 91 1d 04 	lds	r31, 0x041D	; 0x80041d <__flp+0x1>
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	a0 e0       	ldi	r26, 0x00	; 0
    348e:	b0 e0       	ldi	r27, 0x00	; 0
    3490:	30 97       	sbiw	r30, 0x00	; 0
    3492:	19 f1       	breq	.+70     	; 0x34da <malloc+0x6c>
    3494:	40 81       	ld	r20, Z
    3496:	51 81       	ldd	r21, Z+1	; 0x01
    3498:	02 81       	ldd	r16, Z+2	; 0x02
    349a:	13 81       	ldd	r17, Z+3	; 0x03
    349c:	48 17       	cp	r20, r24
    349e:	59 07       	cpc	r21, r25
    34a0:	c8 f0       	brcs	.+50     	; 0x34d4 <malloc+0x66>
    34a2:	84 17       	cp	r24, r20
    34a4:	95 07       	cpc	r25, r21
    34a6:	69 f4       	brne	.+26     	; 0x34c2 <malloc+0x54>
    34a8:	10 97       	sbiw	r26, 0x00	; 0
    34aa:	31 f0       	breq	.+12     	; 0x34b8 <malloc+0x4a>
    34ac:	12 96       	adiw	r26, 0x02	; 2
    34ae:	0c 93       	st	X, r16
    34b0:	12 97       	sbiw	r26, 0x02	; 2
    34b2:	13 96       	adiw	r26, 0x03	; 3
    34b4:	1c 93       	st	X, r17
    34b6:	27 c0       	rjmp	.+78     	; 0x3506 <malloc+0x98>
    34b8:	00 93 1c 04 	sts	0x041C, r16	; 0x80041c <__flp>
    34bc:	10 93 1d 04 	sts	0x041D, r17	; 0x80041d <__flp+0x1>
    34c0:	22 c0       	rjmp	.+68     	; 0x3506 <malloc+0x98>
    34c2:	21 15       	cp	r18, r1
    34c4:	31 05       	cpc	r19, r1
    34c6:	19 f0       	breq	.+6      	; 0x34ce <malloc+0x60>
    34c8:	42 17       	cp	r20, r18
    34ca:	53 07       	cpc	r21, r19
    34cc:	18 f4       	brcc	.+6      	; 0x34d4 <malloc+0x66>
    34ce:	9a 01       	movw	r18, r20
    34d0:	bd 01       	movw	r22, r26
    34d2:	ef 01       	movw	r28, r30
    34d4:	df 01       	movw	r26, r30
    34d6:	f8 01       	movw	r30, r16
    34d8:	db cf       	rjmp	.-74     	; 0x3490 <malloc+0x22>
    34da:	21 15       	cp	r18, r1
    34dc:	31 05       	cpc	r19, r1
    34de:	f9 f0       	breq	.+62     	; 0x351e <malloc+0xb0>
    34e0:	28 1b       	sub	r18, r24
    34e2:	39 0b       	sbc	r19, r25
    34e4:	24 30       	cpi	r18, 0x04	; 4
    34e6:	31 05       	cpc	r19, r1
    34e8:	80 f4       	brcc	.+32     	; 0x350a <malloc+0x9c>
    34ea:	8a 81       	ldd	r24, Y+2	; 0x02
    34ec:	9b 81       	ldd	r25, Y+3	; 0x03
    34ee:	61 15       	cp	r22, r1
    34f0:	71 05       	cpc	r23, r1
    34f2:	21 f0       	breq	.+8      	; 0x34fc <malloc+0x8e>
    34f4:	fb 01       	movw	r30, r22
    34f6:	93 83       	std	Z+3, r25	; 0x03
    34f8:	82 83       	std	Z+2, r24	; 0x02
    34fa:	04 c0       	rjmp	.+8      	; 0x3504 <malloc+0x96>
    34fc:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <__flp+0x1>
    3500:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <__flp>
    3504:	fe 01       	movw	r30, r28
    3506:	32 96       	adiw	r30, 0x02	; 2
    3508:	44 c0       	rjmp	.+136    	; 0x3592 <malloc+0x124>
    350a:	fe 01       	movw	r30, r28
    350c:	e2 0f       	add	r30, r18
    350e:	f3 1f       	adc	r31, r19
    3510:	81 93       	st	Z+, r24
    3512:	91 93       	st	Z+, r25
    3514:	22 50       	subi	r18, 0x02	; 2
    3516:	31 09       	sbc	r19, r1
    3518:	39 83       	std	Y+1, r19	; 0x01
    351a:	28 83       	st	Y, r18
    351c:	3a c0       	rjmp	.+116    	; 0x3592 <malloc+0x124>
    351e:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <__brkval>
    3522:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <__brkval+0x1>
    3526:	23 2b       	or	r18, r19
    3528:	41 f4       	brne	.+16     	; 0x353a <malloc+0xcc>
    352a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    352e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3532:	30 93 1b 04 	sts	0x041B, r19	; 0x80041b <__brkval+0x1>
    3536:	20 93 1a 04 	sts	0x041A, r18	; 0x80041a <__brkval>
    353a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    353e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3542:	21 15       	cp	r18, r1
    3544:	31 05       	cpc	r19, r1
    3546:	41 f4       	brne	.+16     	; 0x3558 <malloc+0xea>
    3548:	2d b7       	in	r18, 0x3d	; 61
    354a:	3e b7       	in	r19, 0x3e	; 62
    354c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3550:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3554:	24 1b       	sub	r18, r20
    3556:	35 0b       	sbc	r19, r21
    3558:	e0 91 1a 04 	lds	r30, 0x041A	; 0x80041a <__brkval>
    355c:	f0 91 1b 04 	lds	r31, 0x041B	; 0x80041b <__brkval+0x1>
    3560:	e2 17       	cp	r30, r18
    3562:	f3 07       	cpc	r31, r19
    3564:	a0 f4       	brcc	.+40     	; 0x358e <malloc+0x120>
    3566:	2e 1b       	sub	r18, r30
    3568:	3f 0b       	sbc	r19, r31
    356a:	28 17       	cp	r18, r24
    356c:	39 07       	cpc	r19, r25
    356e:	78 f0       	brcs	.+30     	; 0x358e <malloc+0x120>
    3570:	ac 01       	movw	r20, r24
    3572:	4e 5f       	subi	r20, 0xFE	; 254
    3574:	5f 4f       	sbci	r21, 0xFF	; 255
    3576:	24 17       	cp	r18, r20
    3578:	35 07       	cpc	r19, r21
    357a:	48 f0       	brcs	.+18     	; 0x358e <malloc+0x120>
    357c:	4e 0f       	add	r20, r30
    357e:	5f 1f       	adc	r21, r31
    3580:	50 93 1b 04 	sts	0x041B, r21	; 0x80041b <__brkval+0x1>
    3584:	40 93 1a 04 	sts	0x041A, r20	; 0x80041a <__brkval>
    3588:	81 93       	st	Z+, r24
    358a:	91 93       	st	Z+, r25
    358c:	02 c0       	rjmp	.+4      	; 0x3592 <malloc+0x124>
    358e:	e0 e0       	ldi	r30, 0x00	; 0
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	cf 01       	movw	r24, r30
    3594:	df 91       	pop	r29
    3596:	cf 91       	pop	r28
    3598:	1f 91       	pop	r17
    359a:	0f 91       	pop	r16
    359c:	08 95       	ret

0000359e <free>:
    359e:	cf 93       	push	r28
    35a0:	df 93       	push	r29
    35a2:	00 97       	sbiw	r24, 0x00	; 0
    35a4:	09 f4       	brne	.+2      	; 0x35a8 <free+0xa>
    35a6:	81 c0       	rjmp	.+258    	; 0x36aa <free+0x10c>
    35a8:	fc 01       	movw	r30, r24
    35aa:	32 97       	sbiw	r30, 0x02	; 2
    35ac:	13 82       	std	Z+3, r1	; 0x03
    35ae:	12 82       	std	Z+2, r1	; 0x02
    35b0:	a0 91 1c 04 	lds	r26, 0x041C	; 0x80041c <__flp>
    35b4:	b0 91 1d 04 	lds	r27, 0x041D	; 0x80041d <__flp+0x1>
    35b8:	10 97       	sbiw	r26, 0x00	; 0
    35ba:	81 f4       	brne	.+32     	; 0x35dc <free+0x3e>
    35bc:	20 81       	ld	r18, Z
    35be:	31 81       	ldd	r19, Z+1	; 0x01
    35c0:	82 0f       	add	r24, r18
    35c2:	93 1f       	adc	r25, r19
    35c4:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <__brkval>
    35c8:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <__brkval+0x1>
    35cc:	28 17       	cp	r18, r24
    35ce:	39 07       	cpc	r19, r25
    35d0:	51 f5       	brne	.+84     	; 0x3626 <free+0x88>
    35d2:	f0 93 1b 04 	sts	0x041B, r31	; 0x80041b <__brkval+0x1>
    35d6:	e0 93 1a 04 	sts	0x041A, r30	; 0x80041a <__brkval>
    35da:	67 c0       	rjmp	.+206    	; 0x36aa <free+0x10c>
    35dc:	ed 01       	movw	r28, r26
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	ce 17       	cp	r28, r30
    35e4:	df 07       	cpc	r29, r31
    35e6:	40 f4       	brcc	.+16     	; 0x35f8 <free+0x5a>
    35e8:	4a 81       	ldd	r20, Y+2	; 0x02
    35ea:	5b 81       	ldd	r21, Y+3	; 0x03
    35ec:	9e 01       	movw	r18, r28
    35ee:	41 15       	cp	r20, r1
    35f0:	51 05       	cpc	r21, r1
    35f2:	f1 f0       	breq	.+60     	; 0x3630 <free+0x92>
    35f4:	ea 01       	movw	r28, r20
    35f6:	f5 cf       	rjmp	.-22     	; 0x35e2 <free+0x44>
    35f8:	d3 83       	std	Z+3, r29	; 0x03
    35fa:	c2 83       	std	Z+2, r28	; 0x02
    35fc:	40 81       	ld	r20, Z
    35fe:	51 81       	ldd	r21, Z+1	; 0x01
    3600:	84 0f       	add	r24, r20
    3602:	95 1f       	adc	r25, r21
    3604:	c8 17       	cp	r28, r24
    3606:	d9 07       	cpc	r29, r25
    3608:	59 f4       	brne	.+22     	; 0x3620 <free+0x82>
    360a:	88 81       	ld	r24, Y
    360c:	99 81       	ldd	r25, Y+1	; 0x01
    360e:	84 0f       	add	r24, r20
    3610:	95 1f       	adc	r25, r21
    3612:	02 96       	adiw	r24, 0x02	; 2
    3614:	91 83       	std	Z+1, r25	; 0x01
    3616:	80 83       	st	Z, r24
    3618:	8a 81       	ldd	r24, Y+2	; 0x02
    361a:	9b 81       	ldd	r25, Y+3	; 0x03
    361c:	93 83       	std	Z+3, r25	; 0x03
    361e:	82 83       	std	Z+2, r24	; 0x02
    3620:	21 15       	cp	r18, r1
    3622:	31 05       	cpc	r19, r1
    3624:	29 f4       	brne	.+10     	; 0x3630 <free+0x92>
    3626:	f0 93 1d 04 	sts	0x041D, r31	; 0x80041d <__flp+0x1>
    362a:	e0 93 1c 04 	sts	0x041C, r30	; 0x80041c <__flp>
    362e:	3d c0       	rjmp	.+122    	; 0x36aa <free+0x10c>
    3630:	e9 01       	movw	r28, r18
    3632:	fb 83       	std	Y+3, r31	; 0x03
    3634:	ea 83       	std	Y+2, r30	; 0x02
    3636:	49 91       	ld	r20, Y+
    3638:	59 91       	ld	r21, Y+
    363a:	c4 0f       	add	r28, r20
    363c:	d5 1f       	adc	r29, r21
    363e:	ec 17       	cp	r30, r28
    3640:	fd 07       	cpc	r31, r29
    3642:	61 f4       	brne	.+24     	; 0x365c <free+0xbe>
    3644:	80 81       	ld	r24, Z
    3646:	91 81       	ldd	r25, Z+1	; 0x01
    3648:	84 0f       	add	r24, r20
    364a:	95 1f       	adc	r25, r21
    364c:	02 96       	adiw	r24, 0x02	; 2
    364e:	e9 01       	movw	r28, r18
    3650:	99 83       	std	Y+1, r25	; 0x01
    3652:	88 83       	st	Y, r24
    3654:	82 81       	ldd	r24, Z+2	; 0x02
    3656:	93 81       	ldd	r25, Z+3	; 0x03
    3658:	9b 83       	std	Y+3, r25	; 0x03
    365a:	8a 83       	std	Y+2, r24	; 0x02
    365c:	e0 e0       	ldi	r30, 0x00	; 0
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	12 96       	adiw	r26, 0x02	; 2
    3662:	8d 91       	ld	r24, X+
    3664:	9c 91       	ld	r25, X
    3666:	13 97       	sbiw	r26, 0x03	; 3
    3668:	00 97       	sbiw	r24, 0x00	; 0
    366a:	19 f0       	breq	.+6      	; 0x3672 <free+0xd4>
    366c:	fd 01       	movw	r30, r26
    366e:	dc 01       	movw	r26, r24
    3670:	f7 cf       	rjmp	.-18     	; 0x3660 <free+0xc2>
    3672:	8d 91       	ld	r24, X+
    3674:	9c 91       	ld	r25, X
    3676:	11 97       	sbiw	r26, 0x01	; 1
    3678:	9d 01       	movw	r18, r26
    367a:	2e 5f       	subi	r18, 0xFE	; 254
    367c:	3f 4f       	sbci	r19, 0xFF	; 255
    367e:	82 0f       	add	r24, r18
    3680:	93 1f       	adc	r25, r19
    3682:	20 91 1a 04 	lds	r18, 0x041A	; 0x80041a <__brkval>
    3686:	30 91 1b 04 	lds	r19, 0x041B	; 0x80041b <__brkval+0x1>
    368a:	28 17       	cp	r18, r24
    368c:	39 07       	cpc	r19, r25
    368e:	69 f4       	brne	.+26     	; 0x36aa <free+0x10c>
    3690:	30 97       	sbiw	r30, 0x00	; 0
    3692:	29 f4       	brne	.+10     	; 0x369e <free+0x100>
    3694:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <__flp+0x1>
    3698:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <__flp>
    369c:	02 c0       	rjmp	.+4      	; 0x36a2 <free+0x104>
    369e:	13 82       	std	Z+3, r1	; 0x03
    36a0:	12 82       	std	Z+2, r1	; 0x02
    36a2:	b0 93 1b 04 	sts	0x041B, r27	; 0x80041b <__brkval+0x1>
    36a6:	a0 93 1a 04 	sts	0x041A, r26	; 0x80041a <__brkval>
    36aa:	df 91       	pop	r29
    36ac:	cf 91       	pop	r28
    36ae:	08 95       	ret

000036b0 <strcpy_P>:
    36b0:	fb 01       	movw	r30, r22
    36b2:	dc 01       	movw	r26, r24
    36b4:	05 90       	lpm	r0, Z+
    36b6:	0d 92       	st	X+, r0
    36b8:	00 20       	and	r0, r0
    36ba:	e1 f7       	brne	.-8      	; 0x36b4 <strcpy_P+0x4>
    36bc:	08 95       	ret

000036be <memcpy>:
    36be:	fb 01       	movw	r30, r22
    36c0:	dc 01       	movw	r26, r24
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <memcpy+0xa>
    36c4:	01 90       	ld	r0, Z+
    36c6:	0d 92       	st	X+, r0
    36c8:	41 50       	subi	r20, 0x01	; 1
    36ca:	50 40       	sbci	r21, 0x00	; 0
    36cc:	d8 f7       	brcc	.-10     	; 0x36c4 <memcpy+0x6>
    36ce:	08 95       	ret

000036d0 <memset>:
    36d0:	dc 01       	movw	r26, r24
    36d2:	01 c0       	rjmp	.+2      	; 0x36d6 <memset+0x6>
    36d4:	6d 93       	st	X+, r22
    36d6:	41 50       	subi	r20, 0x01	; 1
    36d8:	50 40       	sbci	r21, 0x00	; 0
    36da:	e0 f7       	brcc	.-8      	; 0x36d4 <memset+0x4>
    36dc:	08 95       	ret

000036de <__itoa_ncheck>:
    36de:	bb 27       	eor	r27, r27
    36e0:	4a 30       	cpi	r20, 0x0A	; 10
    36e2:	31 f4       	brne	.+12     	; 0x36f0 <__itoa_ncheck+0x12>
    36e4:	99 23       	and	r25, r25
    36e6:	22 f4       	brpl	.+8      	; 0x36f0 <__itoa_ncheck+0x12>
    36e8:	bd e2       	ldi	r27, 0x2D	; 45
    36ea:	90 95       	com	r25
    36ec:	81 95       	neg	r24
    36ee:	9f 4f       	sbci	r25, 0xFF	; 255
    36f0:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__utoa_common>

000036f4 <__ultoa_ncheck>:
    36f4:	bb 27       	eor	r27, r27

000036f6 <__ultoa_common>:
    36f6:	fa 01       	movw	r30, r20
    36f8:	a6 2f       	mov	r26, r22
    36fa:	62 17       	cp	r22, r18
    36fc:	71 05       	cpc	r23, r1
    36fe:	81 05       	cpc	r24, r1
    3700:	91 05       	cpc	r25, r1
    3702:	33 0b       	sbc	r19, r19
    3704:	30 fb       	bst	r19, 0
    3706:	66 f0       	brts	.+24     	; 0x3720 <__ultoa_common+0x2a>
    3708:	aa 27       	eor	r26, r26
    370a:	66 0f       	add	r22, r22
    370c:	77 1f       	adc	r23, r23
    370e:	88 1f       	adc	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	aa 1f       	adc	r26, r26
    3714:	a2 17       	cp	r26, r18
    3716:	10 f0       	brcs	.+4      	; 0x371c <__ultoa_common+0x26>
    3718:	a2 1b       	sub	r26, r18
    371a:	63 95       	inc	r22
    371c:	38 50       	subi	r19, 0x08	; 8
    371e:	a9 f7       	brne	.-22     	; 0x370a <__ultoa_common+0x14>
    3720:	a0 5d       	subi	r26, 0xD0	; 208
    3722:	aa 33       	cpi	r26, 0x3A	; 58
    3724:	08 f0       	brcs	.+2      	; 0x3728 <__ultoa_common+0x32>
    3726:	a9 5d       	subi	r26, 0xD9	; 217
    3728:	a1 93       	st	Z+, r26
    372a:	36 f7       	brtc	.-52     	; 0x36f8 <__ultoa_common+0x2>
    372c:	b1 11       	cpse	r27, r1
    372e:	b1 93       	st	Z+, r27
    3730:	10 82       	st	Z, r1
    3732:	ca 01       	movw	r24, r20
    3734:	0c 94 01 20 	jmp	0x4002	; 0x4002 <strrev>

00003738 <__utoa_ncheck>:
    3738:	bb 27       	eor	r27, r27

0000373a <__utoa_common>:
    373a:	fb 01       	movw	r30, r22
    373c:	55 27       	eor	r21, r21
    373e:	aa 27       	eor	r26, r26
    3740:	88 0f       	add	r24, r24
    3742:	99 1f       	adc	r25, r25
    3744:	aa 1f       	adc	r26, r26
    3746:	a4 17       	cp	r26, r20
    3748:	10 f0       	brcs	.+4      	; 0x374e <__utoa_common+0x14>
    374a:	a4 1b       	sub	r26, r20
    374c:	83 95       	inc	r24
    374e:	50 51       	subi	r21, 0x10	; 16
    3750:	b9 f7       	brne	.-18     	; 0x3740 <__utoa_common+0x6>
    3752:	a0 5d       	subi	r26, 0xD0	; 208
    3754:	aa 33       	cpi	r26, 0x3A	; 58
    3756:	08 f0       	brcs	.+2      	; 0x375a <__utoa_common+0x20>
    3758:	a9 5d       	subi	r26, 0xD9	; 217
    375a:	a1 93       	st	Z+, r26
    375c:	00 97       	sbiw	r24, 0x00	; 0
    375e:	79 f7       	brne	.-34     	; 0x373e <__utoa_common+0x4>
    3760:	b1 11       	cpse	r27, r1
    3762:	b1 93       	st	Z+, r27
    3764:	11 92       	st	Z+, r1
    3766:	cb 01       	movw	r24, r22
    3768:	0c 94 01 20 	jmp	0x4002	; 0x4002 <strrev>

0000376c <sprintf>:
    376c:	ae e0       	ldi	r26, 0x0E	; 14
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	ec eb       	ldi	r30, 0xBC	; 188
    3772:	fb e1       	ldi	r31, 0x1B	; 27
    3774:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <__prologue_saves__+0x1c>
    3778:	0d 89       	ldd	r16, Y+21	; 0x15
    377a:	1e 89       	ldd	r17, Y+22	; 0x16
    377c:	86 e0       	ldi	r24, 0x06	; 6
    377e:	8c 83       	std	Y+4, r24	; 0x04
    3780:	1a 83       	std	Y+2, r17	; 0x02
    3782:	09 83       	std	Y+1, r16	; 0x01
    3784:	8f ef       	ldi	r24, 0xFF	; 255
    3786:	9f e7       	ldi	r25, 0x7F	; 127
    3788:	9e 83       	std	Y+6, r25	; 0x06
    378a:	8d 83       	std	Y+5, r24	; 0x05
    378c:	ae 01       	movw	r20, r28
    378e:	47 5e       	subi	r20, 0xE7	; 231
    3790:	5f 4f       	sbci	r21, 0xFF	; 255
    3792:	6f 89       	ldd	r22, Y+23	; 0x17
    3794:	78 8d       	ldd	r23, Y+24	; 0x18
    3796:	ce 01       	movw	r24, r28
    3798:	01 96       	adiw	r24, 0x01	; 1
    379a:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <vfprintf>
    379e:	ef 81       	ldd	r30, Y+7	; 0x07
    37a0:	f8 85       	ldd	r31, Y+8	; 0x08
    37a2:	e0 0f       	add	r30, r16
    37a4:	f1 1f       	adc	r31, r17
    37a6:	10 82       	st	Z, r1
    37a8:	2e 96       	adiw	r28, 0x0e	; 14
    37aa:	e4 e0       	ldi	r30, 0x04	; 4
    37ac:	0c 94 d5 20 	jmp	0x41aa	; 0x41aa <__epilogue_restores__+0x1c>

000037b0 <vfprintf>:
    37b0:	ab e0       	ldi	r26, 0x0B	; 11
    37b2:	b0 e0       	ldi	r27, 0x00	; 0
    37b4:	ee ed       	ldi	r30, 0xDE	; 222
    37b6:	fb e1       	ldi	r31, 0x1B	; 27
    37b8:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <__prologue_saves__>
    37bc:	6c 01       	movw	r12, r24
    37be:	7b 01       	movw	r14, r22
    37c0:	8a 01       	movw	r16, r20
    37c2:	fc 01       	movw	r30, r24
    37c4:	17 82       	std	Z+7, r1	; 0x07
    37c6:	16 82       	std	Z+6, r1	; 0x06
    37c8:	83 81       	ldd	r24, Z+3	; 0x03
    37ca:	81 ff       	sbrs	r24, 1
    37cc:	cc c1       	rjmp	.+920    	; 0x3b66 <vfprintf+0x3b6>
    37ce:	ce 01       	movw	r24, r28
    37d0:	01 96       	adiw	r24, 0x01	; 1
    37d2:	3c 01       	movw	r6, r24
    37d4:	f6 01       	movw	r30, r12
    37d6:	93 81       	ldd	r25, Z+3	; 0x03
    37d8:	f7 01       	movw	r30, r14
    37da:	93 fd       	sbrc	r25, 3
    37dc:	85 91       	lpm	r24, Z+
    37de:	93 ff       	sbrs	r25, 3
    37e0:	81 91       	ld	r24, Z+
    37e2:	7f 01       	movw	r14, r30
    37e4:	88 23       	and	r24, r24
    37e6:	09 f4       	brne	.+2      	; 0x37ea <vfprintf+0x3a>
    37e8:	ba c1       	rjmp	.+884    	; 0x3b5e <vfprintf+0x3ae>
    37ea:	85 32       	cpi	r24, 0x25	; 37
    37ec:	39 f4       	brne	.+14     	; 0x37fc <vfprintf+0x4c>
    37ee:	93 fd       	sbrc	r25, 3
    37f0:	85 91       	lpm	r24, Z+
    37f2:	93 ff       	sbrs	r25, 3
    37f4:	81 91       	ld	r24, Z+
    37f6:	7f 01       	movw	r14, r30
    37f8:	85 32       	cpi	r24, 0x25	; 37
    37fa:	29 f4       	brne	.+10     	; 0x3806 <vfprintf+0x56>
    37fc:	b6 01       	movw	r22, r12
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	0e 94 11 20 	call	0x4022	; 0x4022 <fputc>
    3804:	e7 cf       	rjmp	.-50     	; 0x37d4 <vfprintf+0x24>
    3806:	91 2c       	mov	r9, r1
    3808:	21 2c       	mov	r2, r1
    380a:	31 2c       	mov	r3, r1
    380c:	ff e1       	ldi	r31, 0x1F	; 31
    380e:	f3 15       	cp	r31, r3
    3810:	d8 f0       	brcs	.+54     	; 0x3848 <vfprintf+0x98>
    3812:	8b 32       	cpi	r24, 0x2B	; 43
    3814:	79 f0       	breq	.+30     	; 0x3834 <vfprintf+0x84>
    3816:	38 f4       	brcc	.+14     	; 0x3826 <vfprintf+0x76>
    3818:	80 32       	cpi	r24, 0x20	; 32
    381a:	79 f0       	breq	.+30     	; 0x383a <vfprintf+0x8a>
    381c:	83 32       	cpi	r24, 0x23	; 35
    381e:	a1 f4       	brne	.+40     	; 0x3848 <vfprintf+0x98>
    3820:	23 2d       	mov	r18, r3
    3822:	20 61       	ori	r18, 0x10	; 16
    3824:	1d c0       	rjmp	.+58     	; 0x3860 <vfprintf+0xb0>
    3826:	8d 32       	cpi	r24, 0x2D	; 45
    3828:	61 f0       	breq	.+24     	; 0x3842 <vfprintf+0x92>
    382a:	80 33       	cpi	r24, 0x30	; 48
    382c:	69 f4       	brne	.+26     	; 0x3848 <vfprintf+0x98>
    382e:	23 2d       	mov	r18, r3
    3830:	21 60       	ori	r18, 0x01	; 1
    3832:	16 c0       	rjmp	.+44     	; 0x3860 <vfprintf+0xb0>
    3834:	83 2d       	mov	r24, r3
    3836:	82 60       	ori	r24, 0x02	; 2
    3838:	38 2e       	mov	r3, r24
    383a:	e3 2d       	mov	r30, r3
    383c:	e4 60       	ori	r30, 0x04	; 4
    383e:	3e 2e       	mov	r3, r30
    3840:	2a c0       	rjmp	.+84     	; 0x3896 <vfprintf+0xe6>
    3842:	f3 2d       	mov	r31, r3
    3844:	f8 60       	ori	r31, 0x08	; 8
    3846:	1d c0       	rjmp	.+58     	; 0x3882 <vfprintf+0xd2>
    3848:	37 fc       	sbrc	r3, 7
    384a:	2d c0       	rjmp	.+90     	; 0x38a6 <vfprintf+0xf6>
    384c:	20 ed       	ldi	r18, 0xD0	; 208
    384e:	28 0f       	add	r18, r24
    3850:	2a 30       	cpi	r18, 0x0A	; 10
    3852:	40 f0       	brcs	.+16     	; 0x3864 <vfprintf+0xb4>
    3854:	8e 32       	cpi	r24, 0x2E	; 46
    3856:	b9 f4       	brne	.+46     	; 0x3886 <vfprintf+0xd6>
    3858:	36 fc       	sbrc	r3, 6
    385a:	81 c1       	rjmp	.+770    	; 0x3b5e <vfprintf+0x3ae>
    385c:	23 2d       	mov	r18, r3
    385e:	20 64       	ori	r18, 0x40	; 64
    3860:	32 2e       	mov	r3, r18
    3862:	19 c0       	rjmp	.+50     	; 0x3896 <vfprintf+0xe6>
    3864:	36 fe       	sbrs	r3, 6
    3866:	06 c0       	rjmp	.+12     	; 0x3874 <vfprintf+0xc4>
    3868:	8a e0       	ldi	r24, 0x0A	; 10
    386a:	98 9e       	mul	r9, r24
    386c:	20 0d       	add	r18, r0
    386e:	11 24       	eor	r1, r1
    3870:	92 2e       	mov	r9, r18
    3872:	11 c0       	rjmp	.+34     	; 0x3896 <vfprintf+0xe6>
    3874:	ea e0       	ldi	r30, 0x0A	; 10
    3876:	2e 9e       	mul	r2, r30
    3878:	20 0d       	add	r18, r0
    387a:	11 24       	eor	r1, r1
    387c:	22 2e       	mov	r2, r18
    387e:	f3 2d       	mov	r31, r3
    3880:	f0 62       	ori	r31, 0x20	; 32
    3882:	3f 2e       	mov	r3, r31
    3884:	08 c0       	rjmp	.+16     	; 0x3896 <vfprintf+0xe6>
    3886:	8c 36       	cpi	r24, 0x6C	; 108
    3888:	21 f4       	brne	.+8      	; 0x3892 <vfprintf+0xe2>
    388a:	83 2d       	mov	r24, r3
    388c:	80 68       	ori	r24, 0x80	; 128
    388e:	38 2e       	mov	r3, r24
    3890:	02 c0       	rjmp	.+4      	; 0x3896 <vfprintf+0xe6>
    3892:	88 36       	cpi	r24, 0x68	; 104
    3894:	41 f4       	brne	.+16     	; 0x38a6 <vfprintf+0xf6>
    3896:	f7 01       	movw	r30, r14
    3898:	93 fd       	sbrc	r25, 3
    389a:	85 91       	lpm	r24, Z+
    389c:	93 ff       	sbrs	r25, 3
    389e:	81 91       	ld	r24, Z+
    38a0:	7f 01       	movw	r14, r30
    38a2:	81 11       	cpse	r24, r1
    38a4:	b3 cf       	rjmp	.-154    	; 0x380c <vfprintf+0x5c>
    38a6:	98 2f       	mov	r25, r24
    38a8:	9f 7d       	andi	r25, 0xDF	; 223
    38aa:	95 54       	subi	r25, 0x45	; 69
    38ac:	93 30       	cpi	r25, 0x03	; 3
    38ae:	28 f4       	brcc	.+10     	; 0x38ba <vfprintf+0x10a>
    38b0:	0c 5f       	subi	r16, 0xFC	; 252
    38b2:	1f 4f       	sbci	r17, 0xFF	; 255
    38b4:	9f e3       	ldi	r25, 0x3F	; 63
    38b6:	99 83       	std	Y+1, r25	; 0x01
    38b8:	0d c0       	rjmp	.+26     	; 0x38d4 <vfprintf+0x124>
    38ba:	83 36       	cpi	r24, 0x63	; 99
    38bc:	31 f0       	breq	.+12     	; 0x38ca <vfprintf+0x11a>
    38be:	83 37       	cpi	r24, 0x73	; 115
    38c0:	71 f0       	breq	.+28     	; 0x38de <vfprintf+0x12e>
    38c2:	83 35       	cpi	r24, 0x53	; 83
    38c4:	09 f0       	breq	.+2      	; 0x38c8 <vfprintf+0x118>
    38c6:	59 c0       	rjmp	.+178    	; 0x397a <vfprintf+0x1ca>
    38c8:	21 c0       	rjmp	.+66     	; 0x390c <vfprintf+0x15c>
    38ca:	f8 01       	movw	r30, r16
    38cc:	80 81       	ld	r24, Z
    38ce:	89 83       	std	Y+1, r24	; 0x01
    38d0:	0e 5f       	subi	r16, 0xFE	; 254
    38d2:	1f 4f       	sbci	r17, 0xFF	; 255
    38d4:	88 24       	eor	r8, r8
    38d6:	83 94       	inc	r8
    38d8:	91 2c       	mov	r9, r1
    38da:	53 01       	movw	r10, r6
    38dc:	13 c0       	rjmp	.+38     	; 0x3904 <vfprintf+0x154>
    38de:	28 01       	movw	r4, r16
    38e0:	f2 e0       	ldi	r31, 0x02	; 2
    38e2:	4f 0e       	add	r4, r31
    38e4:	51 1c       	adc	r5, r1
    38e6:	f8 01       	movw	r30, r16
    38e8:	a0 80       	ld	r10, Z
    38ea:	b1 80       	ldd	r11, Z+1	; 0x01
    38ec:	36 fe       	sbrs	r3, 6
    38ee:	03 c0       	rjmp	.+6      	; 0x38f6 <vfprintf+0x146>
    38f0:	69 2d       	mov	r22, r9
    38f2:	70 e0       	ldi	r23, 0x00	; 0
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <vfprintf+0x14a>
    38f6:	6f ef       	ldi	r22, 0xFF	; 255
    38f8:	7f ef       	ldi	r23, 0xFF	; 255
    38fa:	c5 01       	movw	r24, r10
    38fc:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <strnlen>
    3900:	4c 01       	movw	r8, r24
    3902:	82 01       	movw	r16, r4
    3904:	f3 2d       	mov	r31, r3
    3906:	ff 77       	andi	r31, 0x7F	; 127
    3908:	3f 2e       	mov	r3, r31
    390a:	16 c0       	rjmp	.+44     	; 0x3938 <vfprintf+0x188>
    390c:	28 01       	movw	r4, r16
    390e:	22 e0       	ldi	r18, 0x02	; 2
    3910:	42 0e       	add	r4, r18
    3912:	51 1c       	adc	r5, r1
    3914:	f8 01       	movw	r30, r16
    3916:	a0 80       	ld	r10, Z
    3918:	b1 80       	ldd	r11, Z+1	; 0x01
    391a:	36 fe       	sbrs	r3, 6
    391c:	03 c0       	rjmp	.+6      	; 0x3924 <vfprintf+0x174>
    391e:	69 2d       	mov	r22, r9
    3920:	70 e0       	ldi	r23, 0x00	; 0
    3922:	02 c0       	rjmp	.+4      	; 0x3928 <vfprintf+0x178>
    3924:	6f ef       	ldi	r22, 0xFF	; 255
    3926:	7f ef       	ldi	r23, 0xFF	; 255
    3928:	c5 01       	movw	r24, r10
    392a:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <strnlen_P>
    392e:	4c 01       	movw	r8, r24
    3930:	f3 2d       	mov	r31, r3
    3932:	f0 68       	ori	r31, 0x80	; 128
    3934:	3f 2e       	mov	r3, r31
    3936:	82 01       	movw	r16, r4
    3938:	33 fc       	sbrc	r3, 3
    393a:	1b c0       	rjmp	.+54     	; 0x3972 <vfprintf+0x1c2>
    393c:	82 2d       	mov	r24, r2
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	88 16       	cp	r8, r24
    3942:	99 06       	cpc	r9, r25
    3944:	b0 f4       	brcc	.+44     	; 0x3972 <vfprintf+0x1c2>
    3946:	b6 01       	movw	r22, r12
    3948:	80 e2       	ldi	r24, 0x20	; 32
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	0e 94 11 20 	call	0x4022	; 0x4022 <fputc>
    3950:	2a 94       	dec	r2
    3952:	f4 cf       	rjmp	.-24     	; 0x393c <vfprintf+0x18c>
    3954:	f5 01       	movw	r30, r10
    3956:	37 fc       	sbrc	r3, 7
    3958:	85 91       	lpm	r24, Z+
    395a:	37 fe       	sbrs	r3, 7
    395c:	81 91       	ld	r24, Z+
    395e:	5f 01       	movw	r10, r30
    3960:	b6 01       	movw	r22, r12
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	0e 94 11 20 	call	0x4022	; 0x4022 <fputc>
    3968:	21 10       	cpse	r2, r1
    396a:	2a 94       	dec	r2
    396c:	21 e0       	ldi	r18, 0x01	; 1
    396e:	82 1a       	sub	r8, r18
    3970:	91 08       	sbc	r9, r1
    3972:	81 14       	cp	r8, r1
    3974:	91 04       	cpc	r9, r1
    3976:	71 f7       	brne	.-36     	; 0x3954 <vfprintf+0x1a4>
    3978:	e8 c0       	rjmp	.+464    	; 0x3b4a <vfprintf+0x39a>
    397a:	84 36       	cpi	r24, 0x64	; 100
    397c:	11 f0       	breq	.+4      	; 0x3982 <vfprintf+0x1d2>
    397e:	89 36       	cpi	r24, 0x69	; 105
    3980:	41 f5       	brne	.+80     	; 0x39d2 <vfprintf+0x222>
    3982:	f8 01       	movw	r30, r16
    3984:	37 fe       	sbrs	r3, 7
    3986:	07 c0       	rjmp	.+14     	; 0x3996 <vfprintf+0x1e6>
    3988:	60 81       	ld	r22, Z
    398a:	71 81       	ldd	r23, Z+1	; 0x01
    398c:	82 81       	ldd	r24, Z+2	; 0x02
    398e:	93 81       	ldd	r25, Z+3	; 0x03
    3990:	0c 5f       	subi	r16, 0xFC	; 252
    3992:	1f 4f       	sbci	r17, 0xFF	; 255
    3994:	08 c0       	rjmp	.+16     	; 0x39a6 <vfprintf+0x1f6>
    3996:	60 81       	ld	r22, Z
    3998:	71 81       	ldd	r23, Z+1	; 0x01
    399a:	07 2e       	mov	r0, r23
    399c:	00 0c       	add	r0, r0
    399e:	88 0b       	sbc	r24, r24
    39a0:	99 0b       	sbc	r25, r25
    39a2:	0e 5f       	subi	r16, 0xFE	; 254
    39a4:	1f 4f       	sbci	r17, 0xFF	; 255
    39a6:	f3 2d       	mov	r31, r3
    39a8:	ff 76       	andi	r31, 0x6F	; 111
    39aa:	3f 2e       	mov	r3, r31
    39ac:	97 ff       	sbrs	r25, 7
    39ae:	09 c0       	rjmp	.+18     	; 0x39c2 <vfprintf+0x212>
    39b0:	90 95       	com	r25
    39b2:	80 95       	com	r24
    39b4:	70 95       	com	r23
    39b6:	61 95       	neg	r22
    39b8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ba:	8f 4f       	sbci	r24, 0xFF	; 255
    39bc:	9f 4f       	sbci	r25, 0xFF	; 255
    39be:	f0 68       	ori	r31, 0x80	; 128
    39c0:	3f 2e       	mov	r3, r31
    39c2:	2a e0       	ldi	r18, 0x0A	; 10
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	a3 01       	movw	r20, r6
    39c8:	0e 94 4d 20 	call	0x409a	; 0x409a <__ultoa_invert>
    39cc:	88 2e       	mov	r8, r24
    39ce:	86 18       	sub	r8, r6
    39d0:	45 c0       	rjmp	.+138    	; 0x3a5c <vfprintf+0x2ac>
    39d2:	85 37       	cpi	r24, 0x75	; 117
    39d4:	31 f4       	brne	.+12     	; 0x39e2 <vfprintf+0x232>
    39d6:	23 2d       	mov	r18, r3
    39d8:	2f 7e       	andi	r18, 0xEF	; 239
    39da:	b2 2e       	mov	r11, r18
    39dc:	2a e0       	ldi	r18, 0x0A	; 10
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	25 c0       	rjmp	.+74     	; 0x3a2c <vfprintf+0x27c>
    39e2:	93 2d       	mov	r25, r3
    39e4:	99 7f       	andi	r25, 0xF9	; 249
    39e6:	b9 2e       	mov	r11, r25
    39e8:	8f 36       	cpi	r24, 0x6F	; 111
    39ea:	c1 f0       	breq	.+48     	; 0x3a1c <vfprintf+0x26c>
    39ec:	18 f4       	brcc	.+6      	; 0x39f4 <vfprintf+0x244>
    39ee:	88 35       	cpi	r24, 0x58	; 88
    39f0:	79 f0       	breq	.+30     	; 0x3a10 <vfprintf+0x260>
    39f2:	b5 c0       	rjmp	.+362    	; 0x3b5e <vfprintf+0x3ae>
    39f4:	80 37       	cpi	r24, 0x70	; 112
    39f6:	19 f0       	breq	.+6      	; 0x39fe <vfprintf+0x24e>
    39f8:	88 37       	cpi	r24, 0x78	; 120
    39fa:	21 f0       	breq	.+8      	; 0x3a04 <vfprintf+0x254>
    39fc:	b0 c0       	rjmp	.+352    	; 0x3b5e <vfprintf+0x3ae>
    39fe:	e9 2f       	mov	r30, r25
    3a00:	e0 61       	ori	r30, 0x10	; 16
    3a02:	be 2e       	mov	r11, r30
    3a04:	b4 fe       	sbrs	r11, 4
    3a06:	0d c0       	rjmp	.+26     	; 0x3a22 <vfprintf+0x272>
    3a08:	fb 2d       	mov	r31, r11
    3a0a:	f4 60       	ori	r31, 0x04	; 4
    3a0c:	bf 2e       	mov	r11, r31
    3a0e:	09 c0       	rjmp	.+18     	; 0x3a22 <vfprintf+0x272>
    3a10:	34 fe       	sbrs	r3, 4
    3a12:	0a c0       	rjmp	.+20     	; 0x3a28 <vfprintf+0x278>
    3a14:	29 2f       	mov	r18, r25
    3a16:	26 60       	ori	r18, 0x06	; 6
    3a18:	b2 2e       	mov	r11, r18
    3a1a:	06 c0       	rjmp	.+12     	; 0x3a28 <vfprintf+0x278>
    3a1c:	28 e0       	ldi	r18, 0x08	; 8
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	05 c0       	rjmp	.+10     	; 0x3a2c <vfprintf+0x27c>
    3a22:	20 e1       	ldi	r18, 0x10	; 16
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	02 c0       	rjmp	.+4      	; 0x3a2c <vfprintf+0x27c>
    3a28:	20 e1       	ldi	r18, 0x10	; 16
    3a2a:	32 e0       	ldi	r19, 0x02	; 2
    3a2c:	f8 01       	movw	r30, r16
    3a2e:	b7 fe       	sbrs	r11, 7
    3a30:	07 c0       	rjmp	.+14     	; 0x3a40 <vfprintf+0x290>
    3a32:	60 81       	ld	r22, Z
    3a34:	71 81       	ldd	r23, Z+1	; 0x01
    3a36:	82 81       	ldd	r24, Z+2	; 0x02
    3a38:	93 81       	ldd	r25, Z+3	; 0x03
    3a3a:	0c 5f       	subi	r16, 0xFC	; 252
    3a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a3e:	06 c0       	rjmp	.+12     	; 0x3a4c <vfprintf+0x29c>
    3a40:	60 81       	ld	r22, Z
    3a42:	71 81       	ldd	r23, Z+1	; 0x01
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	0e 5f       	subi	r16, 0xFE	; 254
    3a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a4c:	a3 01       	movw	r20, r6
    3a4e:	0e 94 4d 20 	call	0x409a	; 0x409a <__ultoa_invert>
    3a52:	88 2e       	mov	r8, r24
    3a54:	86 18       	sub	r8, r6
    3a56:	fb 2d       	mov	r31, r11
    3a58:	ff 77       	andi	r31, 0x7F	; 127
    3a5a:	3f 2e       	mov	r3, r31
    3a5c:	36 fe       	sbrs	r3, 6
    3a5e:	0d c0       	rjmp	.+26     	; 0x3a7a <vfprintf+0x2ca>
    3a60:	23 2d       	mov	r18, r3
    3a62:	2e 7f       	andi	r18, 0xFE	; 254
    3a64:	a2 2e       	mov	r10, r18
    3a66:	89 14       	cp	r8, r9
    3a68:	58 f4       	brcc	.+22     	; 0x3a80 <vfprintf+0x2d0>
    3a6a:	34 fe       	sbrs	r3, 4
    3a6c:	0b c0       	rjmp	.+22     	; 0x3a84 <vfprintf+0x2d4>
    3a6e:	32 fc       	sbrc	r3, 2
    3a70:	09 c0       	rjmp	.+18     	; 0x3a84 <vfprintf+0x2d4>
    3a72:	83 2d       	mov	r24, r3
    3a74:	8e 7e       	andi	r24, 0xEE	; 238
    3a76:	a8 2e       	mov	r10, r24
    3a78:	05 c0       	rjmp	.+10     	; 0x3a84 <vfprintf+0x2d4>
    3a7a:	b8 2c       	mov	r11, r8
    3a7c:	a3 2c       	mov	r10, r3
    3a7e:	03 c0       	rjmp	.+6      	; 0x3a86 <vfprintf+0x2d6>
    3a80:	b8 2c       	mov	r11, r8
    3a82:	01 c0       	rjmp	.+2      	; 0x3a86 <vfprintf+0x2d6>
    3a84:	b9 2c       	mov	r11, r9
    3a86:	a4 fe       	sbrs	r10, 4
    3a88:	0f c0       	rjmp	.+30     	; 0x3aa8 <vfprintf+0x2f8>
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	e8 0d       	add	r30, r8
    3a8e:	f1 1d       	adc	r31, r1
    3a90:	80 81       	ld	r24, Z
    3a92:	80 33       	cpi	r24, 0x30	; 48
    3a94:	21 f4       	brne	.+8      	; 0x3a9e <vfprintf+0x2ee>
    3a96:	9a 2d       	mov	r25, r10
    3a98:	99 7e       	andi	r25, 0xE9	; 233
    3a9a:	a9 2e       	mov	r10, r25
    3a9c:	09 c0       	rjmp	.+18     	; 0x3ab0 <vfprintf+0x300>
    3a9e:	a2 fe       	sbrs	r10, 2
    3aa0:	06 c0       	rjmp	.+12     	; 0x3aae <vfprintf+0x2fe>
    3aa2:	b3 94       	inc	r11
    3aa4:	b3 94       	inc	r11
    3aa6:	04 c0       	rjmp	.+8      	; 0x3ab0 <vfprintf+0x300>
    3aa8:	8a 2d       	mov	r24, r10
    3aaa:	86 78       	andi	r24, 0x86	; 134
    3aac:	09 f0       	breq	.+2      	; 0x3ab0 <vfprintf+0x300>
    3aae:	b3 94       	inc	r11
    3ab0:	a3 fc       	sbrc	r10, 3
    3ab2:	11 c0       	rjmp	.+34     	; 0x3ad6 <vfprintf+0x326>
    3ab4:	a0 fe       	sbrs	r10, 0
    3ab6:	06 c0       	rjmp	.+12     	; 0x3ac4 <vfprintf+0x314>
    3ab8:	b2 14       	cp	r11, r2
    3aba:	88 f4       	brcc	.+34     	; 0x3ade <vfprintf+0x32e>
    3abc:	28 0c       	add	r2, r8
    3abe:	92 2c       	mov	r9, r2
    3ac0:	9b 18       	sub	r9, r11
    3ac2:	0e c0       	rjmp	.+28     	; 0x3ae0 <vfprintf+0x330>
    3ac4:	b2 14       	cp	r11, r2
    3ac6:	60 f4       	brcc	.+24     	; 0x3ae0 <vfprintf+0x330>
    3ac8:	b6 01       	movw	r22, r12
    3aca:	80 e2       	ldi	r24, 0x20	; 32
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	0e 94 11 20 	call	0x4022	; 0x4022 <fputc>
    3ad2:	b3 94       	inc	r11
    3ad4:	f7 cf       	rjmp	.-18     	; 0x3ac4 <vfprintf+0x314>
    3ad6:	b2 14       	cp	r11, r2
    3ad8:	18 f4       	brcc	.+6      	; 0x3ae0 <vfprintf+0x330>
    3ada:	2b 18       	sub	r2, r11
    3adc:	02 c0       	rjmp	.+4      	; 0x3ae2 <vfprintf+0x332>
    3ade:	98 2c       	mov	r9, r8
    3ae0:	21 2c       	mov	r2, r1
    3ae2:	a4 fe       	sbrs	r10, 4
    3ae4:	10 c0       	rjmp	.+32     	; 0x3b06 <vfprintf+0x356>
    3ae6:	b6 01       	movw	r22, r12
    3ae8:	80 e3       	ldi	r24, 0x30	; 48
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	0e 94 11 20 	call	0x4022	; 0x4022 <fputc>
    3af0:	a2 fe       	sbrs	r10, 2
    3af2:	17 c0       	rjmp	.+46     	; 0x3b22 <vfprintf+0x372>
    3af4:	a1 fc       	sbrc	r10, 1
    3af6:	03 c0       	rjmp	.+6      	; 0x3afe <vfprintf+0x34e>
    3af8:	88 e7       	ldi	r24, 0x78	; 120
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	02 c0       	rjmp	.+4      	; 0x3b02 <vfprintf+0x352>
    3afe:	88 e5       	ldi	r24, 0x58	; 88
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	b6 01       	movw	r22, r12
    3b04:	0c c0       	rjmp	.+24     	; 0x3b1e <vfprintf+0x36e>
    3b06:	8a 2d       	mov	r24, r10
    3b08:	86 78       	andi	r24, 0x86	; 134
    3b0a:	59 f0       	breq	.+22     	; 0x3b22 <vfprintf+0x372>
    3b0c:	a1 fe       	sbrs	r10, 1
    3b0e:	02 c0       	rjmp	.+4      	; 0x3b14 <vfprintf+0x364>
    3b10:	8b e2       	ldi	r24, 0x2B	; 43
    3b12:	01 c0       	rjmp	.+2      	; 0x3b16 <vfprintf+0x366>
    3b14:	80 e2       	ldi	r24, 0x20	; 32
    3b16:	a7 fc       	sbrc	r10, 7
    3b18:	8d e2       	ldi	r24, 0x2D	; 45
    3b1a:	b6 01       	movw	r22, r12
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	0e 94 11 20 	call	0x4022	; 0x4022 <fputc>
    3b22:	89 14       	cp	r8, r9
    3b24:	38 f4       	brcc	.+14     	; 0x3b34 <vfprintf+0x384>
    3b26:	b6 01       	movw	r22, r12
    3b28:	80 e3       	ldi	r24, 0x30	; 48
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	0e 94 11 20 	call	0x4022	; 0x4022 <fputc>
    3b30:	9a 94       	dec	r9
    3b32:	f7 cf       	rjmp	.-18     	; 0x3b22 <vfprintf+0x372>
    3b34:	8a 94       	dec	r8
    3b36:	f3 01       	movw	r30, r6
    3b38:	e8 0d       	add	r30, r8
    3b3a:	f1 1d       	adc	r31, r1
    3b3c:	80 81       	ld	r24, Z
    3b3e:	b6 01       	movw	r22, r12
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	0e 94 11 20 	call	0x4022	; 0x4022 <fputc>
    3b46:	81 10       	cpse	r8, r1
    3b48:	f5 cf       	rjmp	.-22     	; 0x3b34 <vfprintf+0x384>
    3b4a:	22 20       	and	r2, r2
    3b4c:	09 f4       	brne	.+2      	; 0x3b50 <vfprintf+0x3a0>
    3b4e:	42 ce       	rjmp	.-892    	; 0x37d4 <vfprintf+0x24>
    3b50:	b6 01       	movw	r22, r12
    3b52:	80 e2       	ldi	r24, 0x20	; 32
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	0e 94 11 20 	call	0x4022	; 0x4022 <fputc>
    3b5a:	2a 94       	dec	r2
    3b5c:	f6 cf       	rjmp	.-20     	; 0x3b4a <vfprintf+0x39a>
    3b5e:	f6 01       	movw	r30, r12
    3b60:	86 81       	ldd	r24, Z+6	; 0x06
    3b62:	97 81       	ldd	r25, Z+7	; 0x07
    3b64:	02 c0       	rjmp	.+4      	; 0x3b6a <vfprintf+0x3ba>
    3b66:	8f ef       	ldi	r24, 0xFF	; 255
    3b68:	9f ef       	ldi	r25, 0xFF	; 255
    3b6a:	2b 96       	adiw	r28, 0x0b	; 11
    3b6c:	e2 e1       	ldi	r30, 0x12	; 18
    3b6e:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__epilogue_restores__>

00003b72 <dtoa_prf>:
    3b72:	a9 e0       	ldi	r26, 0x09	; 9
    3b74:	b0 e0       	ldi	r27, 0x00	; 0
    3b76:	ef eb       	ldi	r30, 0xBF	; 191
    3b78:	fd e1       	ldi	r31, 0x1D	; 29
    3b7a:	0c 94 b1 20 	jmp	0x4162	; 0x4162 <__prologue_saves__+0xc>
    3b7e:	6a 01       	movw	r12, r20
    3b80:	12 2f       	mov	r17, r18
    3b82:	b0 2e       	mov	r11, r16
    3b84:	2b e3       	ldi	r18, 0x3B	; 59
    3b86:	20 17       	cp	r18, r16
    3b88:	20 f0       	brcs	.+8      	; 0x3b92 <dtoa_prf+0x20>
    3b8a:	ff 24       	eor	r15, r15
    3b8c:	f3 94       	inc	r15
    3b8e:	f0 0e       	add	r15, r16
    3b90:	02 c0       	rjmp	.+4      	; 0x3b96 <dtoa_prf+0x24>
    3b92:	2c e3       	ldi	r18, 0x3C	; 60
    3b94:	f2 2e       	mov	r15, r18
    3b96:	0f 2d       	mov	r16, r15
    3b98:	27 e0       	ldi	r18, 0x07	; 7
    3b9a:	ae 01       	movw	r20, r28
    3b9c:	4f 5f       	subi	r20, 0xFF	; 255
    3b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba0:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__ftoa_engine>
    3ba4:	bc 01       	movw	r22, r24
    3ba6:	49 81       	ldd	r20, Y+1	; 0x01
    3ba8:	84 2f       	mov	r24, r20
    3baa:	89 70       	andi	r24, 0x09	; 9
    3bac:	81 30       	cpi	r24, 0x01	; 1
    3bae:	31 f0       	breq	.+12     	; 0x3bbc <dtoa_prf+0x4a>
    3bb0:	e1 fc       	sbrc	r14, 1
    3bb2:	06 c0       	rjmp	.+12     	; 0x3bc0 <dtoa_prf+0x4e>
    3bb4:	e0 fe       	sbrs	r14, 0
    3bb6:	06 c0       	rjmp	.+12     	; 0x3bc4 <dtoa_prf+0x52>
    3bb8:	90 e2       	ldi	r25, 0x20	; 32
    3bba:	05 c0       	rjmp	.+10     	; 0x3bc6 <dtoa_prf+0x54>
    3bbc:	9d e2       	ldi	r25, 0x2D	; 45
    3bbe:	03 c0       	rjmp	.+6      	; 0x3bc6 <dtoa_prf+0x54>
    3bc0:	9b e2       	ldi	r25, 0x2B	; 43
    3bc2:	01 c0       	rjmp	.+2      	; 0x3bc6 <dtoa_prf+0x54>
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	5e 2d       	mov	r21, r14
    3bc8:	50 71       	andi	r21, 0x10	; 16
    3bca:	43 ff       	sbrs	r20, 3
    3bcc:	3c c0       	rjmp	.+120    	; 0x3c46 <dtoa_prf+0xd4>
    3bce:	91 11       	cpse	r25, r1
    3bd0:	02 c0       	rjmp	.+4      	; 0x3bd6 <dtoa_prf+0x64>
    3bd2:	83 e0       	ldi	r24, 0x03	; 3
    3bd4:	01 c0       	rjmp	.+2      	; 0x3bd8 <dtoa_prf+0x66>
    3bd6:	84 e0       	ldi	r24, 0x04	; 4
    3bd8:	81 17       	cp	r24, r17
    3bda:	18 f4       	brcc	.+6      	; 0x3be2 <dtoa_prf+0x70>
    3bdc:	21 2f       	mov	r18, r17
    3bde:	28 1b       	sub	r18, r24
    3be0:	01 c0       	rjmp	.+2      	; 0x3be4 <dtoa_prf+0x72>
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	51 11       	cpse	r21, r1
    3be6:	0b c0       	rjmp	.+22     	; 0x3bfe <dtoa_prf+0x8c>
    3be8:	f6 01       	movw	r30, r12
    3bea:	82 2f       	mov	r24, r18
    3bec:	30 e2       	ldi	r19, 0x20	; 32
    3bee:	88 23       	and	r24, r24
    3bf0:	19 f0       	breq	.+6      	; 0x3bf8 <dtoa_prf+0x86>
    3bf2:	31 93       	st	Z+, r19
    3bf4:	81 50       	subi	r24, 0x01	; 1
    3bf6:	fb cf       	rjmp	.-10     	; 0x3bee <dtoa_prf+0x7c>
    3bf8:	c2 0e       	add	r12, r18
    3bfa:	d1 1c       	adc	r13, r1
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	99 23       	and	r25, r25
    3c00:	29 f0       	breq	.+10     	; 0x3c0c <dtoa_prf+0x9a>
    3c02:	d6 01       	movw	r26, r12
    3c04:	9c 93       	st	X, r25
    3c06:	f6 01       	movw	r30, r12
    3c08:	31 96       	adiw	r30, 0x01	; 1
    3c0a:	6f 01       	movw	r12, r30
    3c0c:	c6 01       	movw	r24, r12
    3c0e:	03 96       	adiw	r24, 0x03	; 3
    3c10:	e2 fe       	sbrs	r14, 2
    3c12:	0a c0       	rjmp	.+20     	; 0x3c28 <dtoa_prf+0xb6>
    3c14:	3e e4       	ldi	r19, 0x4E	; 78
    3c16:	d6 01       	movw	r26, r12
    3c18:	3c 93       	st	X, r19
    3c1a:	41 e4       	ldi	r20, 0x41	; 65
    3c1c:	11 96       	adiw	r26, 0x01	; 1
    3c1e:	4c 93       	st	X, r20
    3c20:	11 97       	sbiw	r26, 0x01	; 1
    3c22:	12 96       	adiw	r26, 0x02	; 2
    3c24:	3c 93       	st	X, r19
    3c26:	06 c0       	rjmp	.+12     	; 0x3c34 <dtoa_prf+0xc2>
    3c28:	3e e6       	ldi	r19, 0x6E	; 110
    3c2a:	f6 01       	movw	r30, r12
    3c2c:	30 83       	st	Z, r19
    3c2e:	41 e6       	ldi	r20, 0x61	; 97
    3c30:	41 83       	std	Z+1, r20	; 0x01
    3c32:	32 83       	std	Z+2, r19	; 0x02
    3c34:	fc 01       	movw	r30, r24
    3c36:	32 2f       	mov	r19, r18
    3c38:	40 e2       	ldi	r20, 0x20	; 32
    3c3a:	33 23       	and	r19, r19
    3c3c:	09 f4       	brne	.+2      	; 0x3c40 <dtoa_prf+0xce>
    3c3e:	42 c0       	rjmp	.+132    	; 0x3cc4 <dtoa_prf+0x152>
    3c40:	41 93       	st	Z+, r20
    3c42:	31 50       	subi	r19, 0x01	; 1
    3c44:	fa cf       	rjmp	.-12     	; 0x3c3a <dtoa_prf+0xc8>
    3c46:	42 ff       	sbrs	r20, 2
    3c48:	44 c0       	rjmp	.+136    	; 0x3cd2 <dtoa_prf+0x160>
    3c4a:	91 11       	cpse	r25, r1
    3c4c:	02 c0       	rjmp	.+4      	; 0x3c52 <dtoa_prf+0xe0>
    3c4e:	83 e0       	ldi	r24, 0x03	; 3
    3c50:	01 c0       	rjmp	.+2      	; 0x3c54 <dtoa_prf+0xe2>
    3c52:	84 e0       	ldi	r24, 0x04	; 4
    3c54:	81 17       	cp	r24, r17
    3c56:	18 f4       	brcc	.+6      	; 0x3c5e <dtoa_prf+0xec>
    3c58:	21 2f       	mov	r18, r17
    3c5a:	28 1b       	sub	r18, r24
    3c5c:	01 c0       	rjmp	.+2      	; 0x3c60 <dtoa_prf+0xee>
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	51 11       	cpse	r21, r1
    3c62:	0b c0       	rjmp	.+22     	; 0x3c7a <dtoa_prf+0x108>
    3c64:	f6 01       	movw	r30, r12
    3c66:	82 2f       	mov	r24, r18
    3c68:	30 e2       	ldi	r19, 0x20	; 32
    3c6a:	88 23       	and	r24, r24
    3c6c:	19 f0       	breq	.+6      	; 0x3c74 <dtoa_prf+0x102>
    3c6e:	31 93       	st	Z+, r19
    3c70:	81 50       	subi	r24, 0x01	; 1
    3c72:	fb cf       	rjmp	.-10     	; 0x3c6a <dtoa_prf+0xf8>
    3c74:	c2 0e       	add	r12, r18
    3c76:	d1 1c       	adc	r13, r1
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	99 23       	and	r25, r25
    3c7c:	29 f0       	breq	.+10     	; 0x3c88 <dtoa_prf+0x116>
    3c7e:	d6 01       	movw	r26, r12
    3c80:	9c 93       	st	X, r25
    3c82:	f6 01       	movw	r30, r12
    3c84:	31 96       	adiw	r30, 0x01	; 1
    3c86:	6f 01       	movw	r12, r30
    3c88:	c6 01       	movw	r24, r12
    3c8a:	03 96       	adiw	r24, 0x03	; 3
    3c8c:	e2 fe       	sbrs	r14, 2
    3c8e:	0b c0       	rjmp	.+22     	; 0x3ca6 <dtoa_prf+0x134>
    3c90:	39 e4       	ldi	r19, 0x49	; 73
    3c92:	d6 01       	movw	r26, r12
    3c94:	3c 93       	st	X, r19
    3c96:	3e e4       	ldi	r19, 0x4E	; 78
    3c98:	11 96       	adiw	r26, 0x01	; 1
    3c9a:	3c 93       	st	X, r19
    3c9c:	11 97       	sbiw	r26, 0x01	; 1
    3c9e:	36 e4       	ldi	r19, 0x46	; 70
    3ca0:	12 96       	adiw	r26, 0x02	; 2
    3ca2:	3c 93       	st	X, r19
    3ca4:	07 c0       	rjmp	.+14     	; 0x3cb4 <dtoa_prf+0x142>
    3ca6:	39 e6       	ldi	r19, 0x69	; 105
    3ca8:	f6 01       	movw	r30, r12
    3caa:	30 83       	st	Z, r19
    3cac:	3e e6       	ldi	r19, 0x6E	; 110
    3cae:	31 83       	std	Z+1, r19	; 0x01
    3cb0:	36 e6       	ldi	r19, 0x66	; 102
    3cb2:	32 83       	std	Z+2, r19	; 0x02
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	32 2f       	mov	r19, r18
    3cb8:	40 e2       	ldi	r20, 0x20	; 32
    3cba:	33 23       	and	r19, r19
    3cbc:	19 f0       	breq	.+6      	; 0x3cc4 <dtoa_prf+0x152>
    3cbe:	41 93       	st	Z+, r20
    3cc0:	31 50       	subi	r19, 0x01	; 1
    3cc2:	fb cf       	rjmp	.-10     	; 0x3cba <dtoa_prf+0x148>
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	e2 0f       	add	r30, r18
    3cc8:	f1 1d       	adc	r31, r1
    3cca:	10 82       	st	Z, r1
    3ccc:	8e ef       	ldi	r24, 0xFE	; 254
    3cce:	9f ef       	ldi	r25, 0xFF	; 255
    3cd0:	a6 c0       	rjmp	.+332    	; 0x3e1e <dtoa_prf+0x2ac>
    3cd2:	21 e0       	ldi	r18, 0x01	; 1
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	91 11       	cpse	r25, r1
    3cd8:	02 c0       	rjmp	.+4      	; 0x3cde <dtoa_prf+0x16c>
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	16 16       	cp	r1, r22
    3ce0:	17 06       	cpc	r1, r23
    3ce2:	1c f4       	brge	.+6      	; 0x3cea <dtoa_prf+0x178>
    3ce4:	fb 01       	movw	r30, r22
    3ce6:	31 96       	adiw	r30, 0x01	; 1
    3ce8:	02 c0       	rjmp	.+4      	; 0x3cee <dtoa_prf+0x17c>
    3cea:	e1 e0       	ldi	r30, 0x01	; 1
    3cec:	f0 e0       	ldi	r31, 0x00	; 0
    3cee:	2e 0f       	add	r18, r30
    3cf0:	3f 1f       	adc	r19, r31
    3cf2:	bb 20       	and	r11, r11
    3cf4:	21 f0       	breq	.+8      	; 0x3cfe <dtoa_prf+0x18c>
    3cf6:	eb 2d       	mov	r30, r11
    3cf8:	f0 e0       	ldi	r31, 0x00	; 0
    3cfa:	31 96       	adiw	r30, 0x01	; 1
    3cfc:	02 c0       	rjmp	.+4      	; 0x3d02 <dtoa_prf+0x190>
    3cfe:	e0 e0       	ldi	r30, 0x00	; 0
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	2e 0f       	add	r18, r30
    3d04:	3f 1f       	adc	r19, r31
    3d06:	e1 2f       	mov	r30, r17
    3d08:	f0 e0       	ldi	r31, 0x00	; 0
    3d0a:	2e 17       	cp	r18, r30
    3d0c:	3f 07       	cpc	r19, r31
    3d0e:	1c f4       	brge	.+6      	; 0x3d16 <dtoa_prf+0x1a4>
    3d10:	12 1b       	sub	r17, r18
    3d12:	21 2f       	mov	r18, r17
    3d14:	01 c0       	rjmp	.+2      	; 0x3d18 <dtoa_prf+0x1a6>
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	8e 2d       	mov	r24, r14
    3d1a:	88 71       	andi	r24, 0x18	; 24
    3d1c:	59 f4       	brne	.+22     	; 0x3d34 <dtoa_prf+0x1c2>
    3d1e:	f6 01       	movw	r30, r12
    3d20:	82 2f       	mov	r24, r18
    3d22:	30 e2       	ldi	r19, 0x20	; 32
    3d24:	88 23       	and	r24, r24
    3d26:	19 f0       	breq	.+6      	; 0x3d2e <dtoa_prf+0x1bc>
    3d28:	31 93       	st	Z+, r19
    3d2a:	81 50       	subi	r24, 0x01	; 1
    3d2c:	fb cf       	rjmp	.-10     	; 0x3d24 <dtoa_prf+0x1b2>
    3d2e:	c2 0e       	add	r12, r18
    3d30:	d1 1c       	adc	r13, r1
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	99 23       	and	r25, r25
    3d36:	29 f0       	breq	.+10     	; 0x3d42 <dtoa_prf+0x1d0>
    3d38:	d6 01       	movw	r26, r12
    3d3a:	9c 93       	st	X, r25
    3d3c:	f6 01       	movw	r30, r12
    3d3e:	31 96       	adiw	r30, 0x01	; 1
    3d40:	6f 01       	movw	r12, r30
    3d42:	51 11       	cpse	r21, r1
    3d44:	0b c0       	rjmp	.+22     	; 0x3d5c <dtoa_prf+0x1ea>
    3d46:	f6 01       	movw	r30, r12
    3d48:	82 2f       	mov	r24, r18
    3d4a:	90 e3       	ldi	r25, 0x30	; 48
    3d4c:	88 23       	and	r24, r24
    3d4e:	19 f0       	breq	.+6      	; 0x3d56 <dtoa_prf+0x1e4>
    3d50:	91 93       	st	Z+, r25
    3d52:	81 50       	subi	r24, 0x01	; 1
    3d54:	fb cf       	rjmp	.-10     	; 0x3d4c <dtoa_prf+0x1da>
    3d56:	c2 0e       	add	r12, r18
    3d58:	d1 1c       	adc	r13, r1
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	0f 2d       	mov	r16, r15
    3d5e:	06 0f       	add	r16, r22
    3d60:	9a 81       	ldd	r25, Y+2	; 0x02
    3d62:	34 2f       	mov	r19, r20
    3d64:	30 71       	andi	r19, 0x10	; 16
    3d66:	44 ff       	sbrs	r20, 4
    3d68:	03 c0       	rjmp	.+6      	; 0x3d70 <dtoa_prf+0x1fe>
    3d6a:	91 33       	cpi	r25, 0x31	; 49
    3d6c:	09 f4       	brne	.+2      	; 0x3d70 <dtoa_prf+0x1fe>
    3d6e:	01 50       	subi	r16, 0x01	; 1
    3d70:	10 16       	cp	r1, r16
    3d72:	24 f4       	brge	.+8      	; 0x3d7c <dtoa_prf+0x20a>
    3d74:	09 30       	cpi	r16, 0x09	; 9
    3d76:	18 f0       	brcs	.+6      	; 0x3d7e <dtoa_prf+0x20c>
    3d78:	08 e0       	ldi	r16, 0x08	; 8
    3d7a:	01 c0       	rjmp	.+2      	; 0x3d7e <dtoa_prf+0x20c>
    3d7c:	01 e0       	ldi	r16, 0x01	; 1
    3d7e:	ab 01       	movw	r20, r22
    3d80:	77 ff       	sbrs	r23, 7
    3d82:	02 c0       	rjmp	.+4      	; 0x3d88 <dtoa_prf+0x216>
    3d84:	40 e0       	ldi	r20, 0x00	; 0
    3d86:	50 e0       	ldi	r21, 0x00	; 0
    3d88:	fb 01       	movw	r30, r22
    3d8a:	e4 1b       	sub	r30, r20
    3d8c:	f5 0b       	sbc	r31, r21
    3d8e:	a1 e0       	ldi	r26, 0x01	; 1
    3d90:	b0 e0       	ldi	r27, 0x00	; 0
    3d92:	ac 0f       	add	r26, r28
    3d94:	bd 1f       	adc	r27, r29
    3d96:	ea 0f       	add	r30, r26
    3d98:	fb 1f       	adc	r31, r27
    3d9a:	8e e2       	ldi	r24, 0x2E	; 46
    3d9c:	a8 2e       	mov	r10, r24
    3d9e:	4b 01       	movw	r8, r22
    3da0:	80 1a       	sub	r8, r16
    3da2:	91 08       	sbc	r9, r1
    3da4:	0b 2d       	mov	r16, r11
    3da6:	10 e0       	ldi	r17, 0x00	; 0
    3da8:	11 95       	neg	r17
    3daa:	01 95       	neg	r16
    3dac:	11 09       	sbc	r17, r1
    3dae:	4f 3f       	cpi	r20, 0xFF	; 255
    3db0:	bf ef       	ldi	r27, 0xFF	; 255
    3db2:	5b 07       	cpc	r21, r27
    3db4:	21 f4       	brne	.+8      	; 0x3dbe <dtoa_prf+0x24c>
    3db6:	d6 01       	movw	r26, r12
    3db8:	ac 92       	st	X, r10
    3dba:	11 96       	adiw	r26, 0x01	; 1
    3dbc:	6d 01       	movw	r12, r26
    3dbe:	64 17       	cp	r22, r20
    3dc0:	75 07       	cpc	r23, r21
    3dc2:	2c f0       	brlt	.+10     	; 0x3dce <dtoa_prf+0x25c>
    3dc4:	84 16       	cp	r8, r20
    3dc6:	95 06       	cpc	r9, r21
    3dc8:	14 f4       	brge	.+4      	; 0x3dce <dtoa_prf+0x25c>
    3dca:	81 81       	ldd	r24, Z+1	; 0x01
    3dcc:	01 c0       	rjmp	.+2      	; 0x3dd0 <dtoa_prf+0x25e>
    3dce:	80 e3       	ldi	r24, 0x30	; 48
    3dd0:	41 50       	subi	r20, 0x01	; 1
    3dd2:	51 09       	sbc	r21, r1
    3dd4:	31 96       	adiw	r30, 0x01	; 1
    3dd6:	d6 01       	movw	r26, r12
    3dd8:	11 96       	adiw	r26, 0x01	; 1
    3dda:	7d 01       	movw	r14, r26
    3ddc:	40 17       	cp	r20, r16
    3dde:	51 07       	cpc	r21, r17
    3de0:	24 f0       	brlt	.+8      	; 0x3dea <dtoa_prf+0x278>
    3de2:	d6 01       	movw	r26, r12
    3de4:	8c 93       	st	X, r24
    3de6:	67 01       	movw	r12, r14
    3de8:	e2 cf       	rjmp	.-60     	; 0x3dae <dtoa_prf+0x23c>
    3dea:	64 17       	cp	r22, r20
    3dec:	75 07       	cpc	r23, r21
    3dee:	39 f4       	brne	.+14     	; 0x3dfe <dtoa_prf+0x28c>
    3df0:	96 33       	cpi	r25, 0x36	; 54
    3df2:	20 f4       	brcc	.+8      	; 0x3dfc <dtoa_prf+0x28a>
    3df4:	95 33       	cpi	r25, 0x35	; 53
    3df6:	19 f4       	brne	.+6      	; 0x3dfe <dtoa_prf+0x28c>
    3df8:	31 11       	cpse	r19, r1
    3dfa:	01 c0       	rjmp	.+2      	; 0x3dfe <dtoa_prf+0x28c>
    3dfc:	81 e3       	ldi	r24, 0x31	; 49
    3dfe:	f6 01       	movw	r30, r12
    3e00:	80 83       	st	Z, r24
    3e02:	f7 01       	movw	r30, r14
    3e04:	82 2f       	mov	r24, r18
    3e06:	90 e2       	ldi	r25, 0x20	; 32
    3e08:	88 23       	and	r24, r24
    3e0a:	19 f0       	breq	.+6      	; 0x3e12 <dtoa_prf+0x2a0>
    3e0c:	91 93       	st	Z+, r25
    3e0e:	81 50       	subi	r24, 0x01	; 1
    3e10:	fb cf       	rjmp	.-10     	; 0x3e08 <dtoa_prf+0x296>
    3e12:	f7 01       	movw	r30, r14
    3e14:	e2 0f       	add	r30, r18
    3e16:	f1 1d       	adc	r31, r1
    3e18:	10 82       	st	Z, r1
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	29 96       	adiw	r28, 0x09	; 9
    3e20:	ec e0       	ldi	r30, 0x0C	; 12
    3e22:	0c 94 cd 20 	jmp	0x419a	; 0x419a <__epilogue_restores__+0xc>

00003e26 <__ftoa_engine>:
    3e26:	28 30       	cpi	r18, 0x08	; 8
    3e28:	08 f0       	brcs	.+2      	; 0x3e2c <__ftoa_engine+0x6>
    3e2a:	27 e0       	ldi	r18, 0x07	; 7
    3e2c:	33 27       	eor	r19, r19
    3e2e:	da 01       	movw	r26, r20
    3e30:	99 0f       	add	r25, r25
    3e32:	31 1d       	adc	r19, r1
    3e34:	87 fd       	sbrc	r24, 7
    3e36:	91 60       	ori	r25, 0x01	; 1
    3e38:	00 96       	adiw	r24, 0x00	; 0
    3e3a:	61 05       	cpc	r22, r1
    3e3c:	71 05       	cpc	r23, r1
    3e3e:	39 f4       	brne	.+14     	; 0x3e4e <__ftoa_engine+0x28>
    3e40:	32 60       	ori	r19, 0x02	; 2
    3e42:	2e 5f       	subi	r18, 0xFE	; 254
    3e44:	3d 93       	st	X+, r19
    3e46:	30 e3       	ldi	r19, 0x30	; 48
    3e48:	2a 95       	dec	r18
    3e4a:	e1 f7       	brne	.-8      	; 0x3e44 <__ftoa_engine+0x1e>
    3e4c:	08 95       	ret
    3e4e:	9f 3f       	cpi	r25, 0xFF	; 255
    3e50:	30 f0       	brcs	.+12     	; 0x3e5e <__ftoa_engine+0x38>
    3e52:	80 38       	cpi	r24, 0x80	; 128
    3e54:	71 05       	cpc	r23, r1
    3e56:	61 05       	cpc	r22, r1
    3e58:	09 f0       	breq	.+2      	; 0x3e5c <__ftoa_engine+0x36>
    3e5a:	3c 5f       	subi	r19, 0xFC	; 252
    3e5c:	3c 5f       	subi	r19, 0xFC	; 252
    3e5e:	3d 93       	st	X+, r19
    3e60:	91 30       	cpi	r25, 0x01	; 1
    3e62:	08 f0       	brcs	.+2      	; 0x3e66 <__ftoa_engine+0x40>
    3e64:	80 68       	ori	r24, 0x80	; 128
    3e66:	91 1d       	adc	r25, r1
    3e68:	df 93       	push	r29
    3e6a:	cf 93       	push	r28
    3e6c:	1f 93       	push	r17
    3e6e:	0f 93       	push	r16
    3e70:	ff 92       	push	r15
    3e72:	ef 92       	push	r14
    3e74:	19 2f       	mov	r17, r25
    3e76:	98 7f       	andi	r25, 0xF8	; 248
    3e78:	96 95       	lsr	r25
    3e7a:	e9 2f       	mov	r30, r25
    3e7c:	96 95       	lsr	r25
    3e7e:	96 95       	lsr	r25
    3e80:	e9 0f       	add	r30, r25
    3e82:	ff 27       	eor	r31, r31
    3e84:	e2 5e       	subi	r30, 0xE2	; 226
    3e86:	fe 4f       	sbci	r31, 0xFE	; 254
    3e88:	99 27       	eor	r25, r25
    3e8a:	33 27       	eor	r19, r19
    3e8c:	ee 24       	eor	r14, r14
    3e8e:	ff 24       	eor	r15, r15
    3e90:	a7 01       	movw	r20, r14
    3e92:	e7 01       	movw	r28, r14
    3e94:	05 90       	lpm	r0, Z+
    3e96:	08 94       	sec
    3e98:	07 94       	ror	r0
    3e9a:	28 f4       	brcc	.+10     	; 0x3ea6 <__ftoa_engine+0x80>
    3e9c:	36 0f       	add	r19, r22
    3e9e:	e7 1e       	adc	r14, r23
    3ea0:	f8 1e       	adc	r15, r24
    3ea2:	49 1f       	adc	r20, r25
    3ea4:	51 1d       	adc	r21, r1
    3ea6:	66 0f       	add	r22, r22
    3ea8:	77 1f       	adc	r23, r23
    3eaa:	88 1f       	adc	r24, r24
    3eac:	99 1f       	adc	r25, r25
    3eae:	06 94       	lsr	r0
    3eb0:	a1 f7       	brne	.-24     	; 0x3e9a <__ftoa_engine+0x74>
    3eb2:	05 90       	lpm	r0, Z+
    3eb4:	07 94       	ror	r0
    3eb6:	28 f4       	brcc	.+10     	; 0x3ec2 <__ftoa_engine+0x9c>
    3eb8:	e7 0e       	add	r14, r23
    3eba:	f8 1e       	adc	r15, r24
    3ebc:	49 1f       	adc	r20, r25
    3ebe:	56 1f       	adc	r21, r22
    3ec0:	c1 1d       	adc	r28, r1
    3ec2:	77 0f       	add	r23, r23
    3ec4:	88 1f       	adc	r24, r24
    3ec6:	99 1f       	adc	r25, r25
    3ec8:	66 1f       	adc	r22, r22
    3eca:	06 94       	lsr	r0
    3ecc:	a1 f7       	brne	.-24     	; 0x3eb6 <__ftoa_engine+0x90>
    3ece:	05 90       	lpm	r0, Z+
    3ed0:	07 94       	ror	r0
    3ed2:	28 f4       	brcc	.+10     	; 0x3ede <__ftoa_engine+0xb8>
    3ed4:	f8 0e       	add	r15, r24
    3ed6:	49 1f       	adc	r20, r25
    3ed8:	56 1f       	adc	r21, r22
    3eda:	c7 1f       	adc	r28, r23
    3edc:	d1 1d       	adc	r29, r1
    3ede:	88 0f       	add	r24, r24
    3ee0:	99 1f       	adc	r25, r25
    3ee2:	66 1f       	adc	r22, r22
    3ee4:	77 1f       	adc	r23, r23
    3ee6:	06 94       	lsr	r0
    3ee8:	a1 f7       	brne	.-24     	; 0x3ed2 <__ftoa_engine+0xac>
    3eea:	05 90       	lpm	r0, Z+
    3eec:	07 94       	ror	r0
    3eee:	20 f4       	brcc	.+8      	; 0x3ef8 <__ftoa_engine+0xd2>
    3ef0:	49 0f       	add	r20, r25
    3ef2:	56 1f       	adc	r21, r22
    3ef4:	c7 1f       	adc	r28, r23
    3ef6:	d8 1f       	adc	r29, r24
    3ef8:	99 0f       	add	r25, r25
    3efa:	66 1f       	adc	r22, r22
    3efc:	77 1f       	adc	r23, r23
    3efe:	88 1f       	adc	r24, r24
    3f00:	06 94       	lsr	r0
    3f02:	a9 f7       	brne	.-22     	; 0x3eee <__ftoa_engine+0xc8>
    3f04:	84 91       	lpm	r24, Z
    3f06:	10 95       	com	r17
    3f08:	17 70       	andi	r17, 0x07	; 7
    3f0a:	41 f0       	breq	.+16     	; 0x3f1c <__ftoa_engine+0xf6>
    3f0c:	d6 95       	lsr	r29
    3f0e:	c7 95       	ror	r28
    3f10:	57 95       	ror	r21
    3f12:	47 95       	ror	r20
    3f14:	f7 94       	ror	r15
    3f16:	e7 94       	ror	r14
    3f18:	1a 95       	dec	r17
    3f1a:	c1 f7       	brne	.-16     	; 0x3f0c <__ftoa_engine+0xe6>
    3f1c:	e4 ec       	ldi	r30, 0xC4	; 196
    3f1e:	f0 e0       	ldi	r31, 0x00	; 0
    3f20:	68 94       	set
    3f22:	15 90       	lpm	r1, Z+
    3f24:	15 91       	lpm	r17, Z+
    3f26:	35 91       	lpm	r19, Z+
    3f28:	65 91       	lpm	r22, Z+
    3f2a:	95 91       	lpm	r25, Z+
    3f2c:	05 90       	lpm	r0, Z+
    3f2e:	7f e2       	ldi	r23, 0x2F	; 47
    3f30:	73 95       	inc	r23
    3f32:	e1 18       	sub	r14, r1
    3f34:	f1 0a       	sbc	r15, r17
    3f36:	43 0b       	sbc	r20, r19
    3f38:	56 0b       	sbc	r21, r22
    3f3a:	c9 0b       	sbc	r28, r25
    3f3c:	d0 09       	sbc	r29, r0
    3f3e:	c0 f7       	brcc	.-16     	; 0x3f30 <__ftoa_engine+0x10a>
    3f40:	e1 0c       	add	r14, r1
    3f42:	f1 1e       	adc	r15, r17
    3f44:	43 1f       	adc	r20, r19
    3f46:	56 1f       	adc	r21, r22
    3f48:	c9 1f       	adc	r28, r25
    3f4a:	d0 1d       	adc	r29, r0
    3f4c:	7e f4       	brtc	.+30     	; 0x3f6c <__ftoa_engine+0x146>
    3f4e:	70 33       	cpi	r23, 0x30	; 48
    3f50:	11 f4       	brne	.+4      	; 0x3f56 <__ftoa_engine+0x130>
    3f52:	8a 95       	dec	r24
    3f54:	e6 cf       	rjmp	.-52     	; 0x3f22 <__ftoa_engine+0xfc>
    3f56:	e8 94       	clt
    3f58:	01 50       	subi	r16, 0x01	; 1
    3f5a:	30 f0       	brcs	.+12     	; 0x3f68 <__ftoa_engine+0x142>
    3f5c:	08 0f       	add	r16, r24
    3f5e:	0a f4       	brpl	.+2      	; 0x3f62 <__ftoa_engine+0x13c>
    3f60:	00 27       	eor	r16, r16
    3f62:	02 17       	cp	r16, r18
    3f64:	08 f4       	brcc	.+2      	; 0x3f68 <__ftoa_engine+0x142>
    3f66:	20 2f       	mov	r18, r16
    3f68:	23 95       	inc	r18
    3f6a:	02 2f       	mov	r16, r18
    3f6c:	7a 33       	cpi	r23, 0x3A	; 58
    3f6e:	28 f0       	brcs	.+10     	; 0x3f7a <__ftoa_engine+0x154>
    3f70:	79 e3       	ldi	r23, 0x39	; 57
    3f72:	7d 93       	st	X+, r23
    3f74:	2a 95       	dec	r18
    3f76:	e9 f7       	brne	.-6      	; 0x3f72 <__ftoa_engine+0x14c>
    3f78:	10 c0       	rjmp	.+32     	; 0x3f9a <__ftoa_engine+0x174>
    3f7a:	7d 93       	st	X+, r23
    3f7c:	2a 95       	dec	r18
    3f7e:	89 f6       	brne	.-94     	; 0x3f22 <__ftoa_engine+0xfc>
    3f80:	06 94       	lsr	r0
    3f82:	97 95       	ror	r25
    3f84:	67 95       	ror	r22
    3f86:	37 95       	ror	r19
    3f88:	17 95       	ror	r17
    3f8a:	17 94       	ror	r1
    3f8c:	e1 18       	sub	r14, r1
    3f8e:	f1 0a       	sbc	r15, r17
    3f90:	43 0b       	sbc	r20, r19
    3f92:	56 0b       	sbc	r21, r22
    3f94:	c9 0b       	sbc	r28, r25
    3f96:	d0 09       	sbc	r29, r0
    3f98:	98 f0       	brcs	.+38     	; 0x3fc0 <__ftoa_engine+0x19a>
    3f9a:	23 95       	inc	r18
    3f9c:	7e 91       	ld	r23, -X
    3f9e:	73 95       	inc	r23
    3fa0:	7a 33       	cpi	r23, 0x3A	; 58
    3fa2:	08 f0       	brcs	.+2      	; 0x3fa6 <__ftoa_engine+0x180>
    3fa4:	70 e3       	ldi	r23, 0x30	; 48
    3fa6:	7c 93       	st	X, r23
    3fa8:	20 13       	cpse	r18, r16
    3faa:	b8 f7       	brcc	.-18     	; 0x3f9a <__ftoa_engine+0x174>
    3fac:	7e 91       	ld	r23, -X
    3fae:	70 61       	ori	r23, 0x10	; 16
    3fb0:	7d 93       	st	X+, r23
    3fb2:	30 f0       	brcs	.+12     	; 0x3fc0 <__ftoa_engine+0x19a>
    3fb4:	83 95       	inc	r24
    3fb6:	71 e3       	ldi	r23, 0x31	; 49
    3fb8:	7d 93       	st	X+, r23
    3fba:	70 e3       	ldi	r23, 0x30	; 48
    3fbc:	2a 95       	dec	r18
    3fbe:	e1 f7       	brne	.-8      	; 0x3fb8 <__ftoa_engine+0x192>
    3fc0:	11 24       	eor	r1, r1
    3fc2:	ef 90       	pop	r14
    3fc4:	ff 90       	pop	r15
    3fc6:	0f 91       	pop	r16
    3fc8:	1f 91       	pop	r17
    3fca:	cf 91       	pop	r28
    3fcc:	df 91       	pop	r29
    3fce:	99 27       	eor	r25, r25
    3fd0:	87 fd       	sbrc	r24, 7
    3fd2:	90 95       	com	r25
    3fd4:	08 95       	ret

00003fd6 <strnlen_P>:
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	05 90       	lpm	r0, Z+
    3fda:	61 50       	subi	r22, 0x01	; 1
    3fdc:	70 40       	sbci	r23, 0x00	; 0
    3fde:	01 10       	cpse	r0, r1
    3fe0:	d8 f7       	brcc	.-10     	; 0x3fd8 <strnlen_P+0x2>
    3fe2:	80 95       	com	r24
    3fe4:	90 95       	com	r25
    3fe6:	8e 0f       	add	r24, r30
    3fe8:	9f 1f       	adc	r25, r31
    3fea:	08 95       	ret

00003fec <strnlen>:
    3fec:	fc 01       	movw	r30, r24
    3fee:	61 50       	subi	r22, 0x01	; 1
    3ff0:	70 40       	sbci	r23, 0x00	; 0
    3ff2:	01 90       	ld	r0, Z+
    3ff4:	01 10       	cpse	r0, r1
    3ff6:	d8 f7       	brcc	.-10     	; 0x3fee <strnlen+0x2>
    3ff8:	80 95       	com	r24
    3ffa:	90 95       	com	r25
    3ffc:	8e 0f       	add	r24, r30
    3ffe:	9f 1f       	adc	r25, r31
    4000:	08 95       	ret

00004002 <strrev>:
    4002:	dc 01       	movw	r26, r24
    4004:	fc 01       	movw	r30, r24
    4006:	67 2f       	mov	r22, r23
    4008:	71 91       	ld	r23, Z+
    400a:	77 23       	and	r23, r23
    400c:	e1 f7       	brne	.-8      	; 0x4006 <strrev+0x4>
    400e:	32 97       	sbiw	r30, 0x02	; 2
    4010:	04 c0       	rjmp	.+8      	; 0x401a <strrev+0x18>
    4012:	7c 91       	ld	r23, X
    4014:	6d 93       	st	X+, r22
    4016:	70 83       	st	Z, r23
    4018:	62 91       	ld	r22, -Z
    401a:	ae 17       	cp	r26, r30
    401c:	bf 07       	cpc	r27, r31
    401e:	c8 f3       	brcs	.-14     	; 0x4012 <strrev+0x10>
    4020:	08 95       	ret

00004022 <fputc>:
    4022:	0f 93       	push	r16
    4024:	1f 93       	push	r17
    4026:	cf 93       	push	r28
    4028:	df 93       	push	r29
    402a:	fb 01       	movw	r30, r22
    402c:	23 81       	ldd	r18, Z+3	; 0x03
    402e:	21 fd       	sbrc	r18, 1
    4030:	03 c0       	rjmp	.+6      	; 0x4038 <fputc+0x16>
    4032:	8f ef       	ldi	r24, 0xFF	; 255
    4034:	9f ef       	ldi	r25, 0xFF	; 255
    4036:	2c c0       	rjmp	.+88     	; 0x4090 <fputc+0x6e>
    4038:	22 ff       	sbrs	r18, 2
    403a:	16 c0       	rjmp	.+44     	; 0x4068 <fputc+0x46>
    403c:	46 81       	ldd	r20, Z+6	; 0x06
    403e:	57 81       	ldd	r21, Z+7	; 0x07
    4040:	24 81       	ldd	r18, Z+4	; 0x04
    4042:	35 81       	ldd	r19, Z+5	; 0x05
    4044:	42 17       	cp	r20, r18
    4046:	53 07       	cpc	r21, r19
    4048:	44 f4       	brge	.+16     	; 0x405a <fputc+0x38>
    404a:	a0 81       	ld	r26, Z
    404c:	b1 81       	ldd	r27, Z+1	; 0x01
    404e:	9d 01       	movw	r18, r26
    4050:	2f 5f       	subi	r18, 0xFF	; 255
    4052:	3f 4f       	sbci	r19, 0xFF	; 255
    4054:	31 83       	std	Z+1, r19	; 0x01
    4056:	20 83       	st	Z, r18
    4058:	8c 93       	st	X, r24
    405a:	26 81       	ldd	r18, Z+6	; 0x06
    405c:	37 81       	ldd	r19, Z+7	; 0x07
    405e:	2f 5f       	subi	r18, 0xFF	; 255
    4060:	3f 4f       	sbci	r19, 0xFF	; 255
    4062:	37 83       	std	Z+7, r19	; 0x07
    4064:	26 83       	std	Z+6, r18	; 0x06
    4066:	14 c0       	rjmp	.+40     	; 0x4090 <fputc+0x6e>
    4068:	8b 01       	movw	r16, r22
    406a:	ec 01       	movw	r28, r24
    406c:	fb 01       	movw	r30, r22
    406e:	00 84       	ldd	r0, Z+8	; 0x08
    4070:	f1 85       	ldd	r31, Z+9	; 0x09
    4072:	e0 2d       	mov	r30, r0
    4074:	09 95       	icall
    4076:	89 2b       	or	r24, r25
    4078:	e1 f6       	brne	.-72     	; 0x4032 <fputc+0x10>
    407a:	d8 01       	movw	r26, r16
    407c:	16 96       	adiw	r26, 0x06	; 6
    407e:	8d 91       	ld	r24, X+
    4080:	9c 91       	ld	r25, X
    4082:	17 97       	sbiw	r26, 0x07	; 7
    4084:	01 96       	adiw	r24, 0x01	; 1
    4086:	17 96       	adiw	r26, 0x07	; 7
    4088:	9c 93       	st	X, r25
    408a:	8e 93       	st	-X, r24
    408c:	16 97       	sbiw	r26, 0x06	; 6
    408e:	ce 01       	movw	r24, r28
    4090:	df 91       	pop	r29
    4092:	cf 91       	pop	r28
    4094:	1f 91       	pop	r17
    4096:	0f 91       	pop	r16
    4098:	08 95       	ret

0000409a <__ultoa_invert>:
    409a:	fa 01       	movw	r30, r20
    409c:	aa 27       	eor	r26, r26
    409e:	28 30       	cpi	r18, 0x08	; 8
    40a0:	51 f1       	breq	.+84     	; 0x40f6 <__ultoa_invert+0x5c>
    40a2:	20 31       	cpi	r18, 0x10	; 16
    40a4:	81 f1       	breq	.+96     	; 0x4106 <__ultoa_invert+0x6c>
    40a6:	e8 94       	clt
    40a8:	6f 93       	push	r22
    40aa:	6e 7f       	andi	r22, 0xFE	; 254
    40ac:	6e 5f       	subi	r22, 0xFE	; 254
    40ae:	7f 4f       	sbci	r23, 0xFF	; 255
    40b0:	8f 4f       	sbci	r24, 0xFF	; 255
    40b2:	9f 4f       	sbci	r25, 0xFF	; 255
    40b4:	af 4f       	sbci	r26, 0xFF	; 255
    40b6:	b1 e0       	ldi	r27, 0x01	; 1
    40b8:	3e d0       	rcall	.+124    	; 0x4136 <__ultoa_invert+0x9c>
    40ba:	b4 e0       	ldi	r27, 0x04	; 4
    40bc:	3c d0       	rcall	.+120    	; 0x4136 <__ultoa_invert+0x9c>
    40be:	67 0f       	add	r22, r23
    40c0:	78 1f       	adc	r23, r24
    40c2:	89 1f       	adc	r24, r25
    40c4:	9a 1f       	adc	r25, r26
    40c6:	a1 1d       	adc	r26, r1
    40c8:	68 0f       	add	r22, r24
    40ca:	79 1f       	adc	r23, r25
    40cc:	8a 1f       	adc	r24, r26
    40ce:	91 1d       	adc	r25, r1
    40d0:	a1 1d       	adc	r26, r1
    40d2:	6a 0f       	add	r22, r26
    40d4:	71 1d       	adc	r23, r1
    40d6:	81 1d       	adc	r24, r1
    40d8:	91 1d       	adc	r25, r1
    40da:	a1 1d       	adc	r26, r1
    40dc:	20 d0       	rcall	.+64     	; 0x411e <__ultoa_invert+0x84>
    40de:	09 f4       	brne	.+2      	; 0x40e2 <__ultoa_invert+0x48>
    40e0:	68 94       	set
    40e2:	3f 91       	pop	r19
    40e4:	2a e0       	ldi	r18, 0x0A	; 10
    40e6:	26 9f       	mul	r18, r22
    40e8:	11 24       	eor	r1, r1
    40ea:	30 19       	sub	r19, r0
    40ec:	30 5d       	subi	r19, 0xD0	; 208
    40ee:	31 93       	st	Z+, r19
    40f0:	de f6       	brtc	.-74     	; 0x40a8 <__ultoa_invert+0xe>
    40f2:	cf 01       	movw	r24, r30
    40f4:	08 95       	ret
    40f6:	46 2f       	mov	r20, r22
    40f8:	47 70       	andi	r20, 0x07	; 7
    40fa:	40 5d       	subi	r20, 0xD0	; 208
    40fc:	41 93       	st	Z+, r20
    40fe:	b3 e0       	ldi	r27, 0x03	; 3
    4100:	0f d0       	rcall	.+30     	; 0x4120 <__ultoa_invert+0x86>
    4102:	c9 f7       	brne	.-14     	; 0x40f6 <__ultoa_invert+0x5c>
    4104:	f6 cf       	rjmp	.-20     	; 0x40f2 <__ultoa_invert+0x58>
    4106:	46 2f       	mov	r20, r22
    4108:	4f 70       	andi	r20, 0x0F	; 15
    410a:	40 5d       	subi	r20, 0xD0	; 208
    410c:	4a 33       	cpi	r20, 0x3A	; 58
    410e:	18 f0       	brcs	.+6      	; 0x4116 <__ultoa_invert+0x7c>
    4110:	49 5d       	subi	r20, 0xD9	; 217
    4112:	31 fd       	sbrc	r19, 1
    4114:	40 52       	subi	r20, 0x20	; 32
    4116:	41 93       	st	Z+, r20
    4118:	02 d0       	rcall	.+4      	; 0x411e <__ultoa_invert+0x84>
    411a:	a9 f7       	brne	.-22     	; 0x4106 <__ultoa_invert+0x6c>
    411c:	ea cf       	rjmp	.-44     	; 0x40f2 <__ultoa_invert+0x58>
    411e:	b4 e0       	ldi	r27, 0x04	; 4
    4120:	a6 95       	lsr	r26
    4122:	97 95       	ror	r25
    4124:	87 95       	ror	r24
    4126:	77 95       	ror	r23
    4128:	67 95       	ror	r22
    412a:	ba 95       	dec	r27
    412c:	c9 f7       	brne	.-14     	; 0x4120 <__ultoa_invert+0x86>
    412e:	00 97       	sbiw	r24, 0x00	; 0
    4130:	61 05       	cpc	r22, r1
    4132:	71 05       	cpc	r23, r1
    4134:	08 95       	ret
    4136:	9b 01       	movw	r18, r22
    4138:	ac 01       	movw	r20, r24
    413a:	0a 2e       	mov	r0, r26
    413c:	06 94       	lsr	r0
    413e:	57 95       	ror	r21
    4140:	47 95       	ror	r20
    4142:	37 95       	ror	r19
    4144:	27 95       	ror	r18
    4146:	ba 95       	dec	r27
    4148:	c9 f7       	brne	.-14     	; 0x413c <__ultoa_invert+0xa2>
    414a:	62 0f       	add	r22, r18
    414c:	73 1f       	adc	r23, r19
    414e:	84 1f       	adc	r24, r20
    4150:	95 1f       	adc	r25, r21
    4152:	a0 1d       	adc	r26, r0
    4154:	08 95       	ret

00004156 <__prologue_saves__>:
    4156:	2f 92       	push	r2
    4158:	3f 92       	push	r3
    415a:	4f 92       	push	r4
    415c:	5f 92       	push	r5
    415e:	6f 92       	push	r6
    4160:	7f 92       	push	r7
    4162:	8f 92       	push	r8
    4164:	9f 92       	push	r9
    4166:	af 92       	push	r10
    4168:	bf 92       	push	r11
    416a:	cf 92       	push	r12
    416c:	df 92       	push	r13
    416e:	ef 92       	push	r14
    4170:	ff 92       	push	r15
    4172:	0f 93       	push	r16
    4174:	1f 93       	push	r17
    4176:	cf 93       	push	r28
    4178:	df 93       	push	r29
    417a:	cd b7       	in	r28, 0x3d	; 61
    417c:	de b7       	in	r29, 0x3e	; 62
    417e:	ca 1b       	sub	r28, r26
    4180:	db 0b       	sbc	r29, r27
    4182:	0f b6       	in	r0, 0x3f	; 63
    4184:	f8 94       	cli
    4186:	de bf       	out	0x3e, r29	; 62
    4188:	0f be       	out	0x3f, r0	; 63
    418a:	cd bf       	out	0x3d, r28	; 61
    418c:	09 94       	ijmp

0000418e <__epilogue_restores__>:
    418e:	2a 88       	ldd	r2, Y+18	; 0x12
    4190:	39 88       	ldd	r3, Y+17	; 0x11
    4192:	48 88       	ldd	r4, Y+16	; 0x10
    4194:	5f 84       	ldd	r5, Y+15	; 0x0f
    4196:	6e 84       	ldd	r6, Y+14	; 0x0e
    4198:	7d 84       	ldd	r7, Y+13	; 0x0d
    419a:	8c 84       	ldd	r8, Y+12	; 0x0c
    419c:	9b 84       	ldd	r9, Y+11	; 0x0b
    419e:	aa 84       	ldd	r10, Y+10	; 0x0a
    41a0:	b9 84       	ldd	r11, Y+9	; 0x09
    41a2:	c8 84       	ldd	r12, Y+8	; 0x08
    41a4:	df 80       	ldd	r13, Y+7	; 0x07
    41a6:	ee 80       	ldd	r14, Y+6	; 0x06
    41a8:	fd 80       	ldd	r15, Y+5	; 0x05
    41aa:	0c 81       	ldd	r16, Y+4	; 0x04
    41ac:	1b 81       	ldd	r17, Y+3	; 0x03
    41ae:	aa 81       	ldd	r26, Y+2	; 0x02
    41b0:	b9 81       	ldd	r27, Y+1	; 0x01
    41b2:	ce 0f       	add	r28, r30
    41b4:	d1 1d       	adc	r29, r1
    41b6:	0f b6       	in	r0, 0x3f	; 63
    41b8:	f8 94       	cli
    41ba:	de bf       	out	0x3e, r29	; 62
    41bc:	0f be       	out	0x3f, r0	; 63
    41be:	cd bf       	out	0x3d, r28	; 61
    41c0:	ed 01       	movw	r28, r26
    41c2:	08 95       	ret

000041c4 <__do_global_dtors>:
    41c4:	11 e0       	ldi	r17, 0x01	; 1
    41c6:	c3 e4       	ldi	r28, 0x43	; 67
    41c8:	d1 e0       	ldi	r29, 0x01	; 1
    41ca:	04 c0       	rjmp	.+8      	; 0x41d4 <__do_global_dtors+0x10>
    41cc:	fe 01       	movw	r30, r28
    41ce:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__tablejump2__>
    41d2:	21 96       	adiw	r28, 0x01	; 1
    41d4:	c5 34       	cpi	r28, 0x45	; 69
    41d6:	d1 07       	cpc	r29, r17
    41d8:	c9 f7       	brne	.-14     	; 0x41cc <__do_global_dtors+0x8>
    41da:	f8 94       	cli

000041dc <__stop_program>:
    41dc:	ff cf       	rjmp	.-2      	; 0x41dc <__stop_program>
