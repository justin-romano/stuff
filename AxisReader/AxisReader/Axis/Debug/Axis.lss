
Axis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  000048f8  0000498c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000241  00800230  00800230  00004abc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004abc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ca0  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001bba2  00000000  00000000  000057f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004dd0  00000000  00000000  0002139a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000708c  00000000  00000000  0002616a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003064  00000000  00000000  0002d1f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006707  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f834  00000000  00000000  00036963  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bb0  00000000  00000000  00046197  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__dtors_end>
       4:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
       8:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
       c:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__vector_3>
      10:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_4>
      14:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_5>
      18:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      1c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      20:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      24:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      28:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      2c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      30:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      34:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      38:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      3c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      40:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__vector_16>
      44:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      48:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__vector_18>
      4c:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__vector_19>
      50:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      54:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      58:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      5c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      60:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__vector_24>
      64:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__bad_interrupt>
      68:	3f 06       	cpc	r3, r31
      6a:	3f 06       	cpc	r3, r31
      6c:	44 06       	cpc	r4, r20
      6e:	44 06       	cpc	r4, r20
      70:	49 06       	cpc	r4, r25
      72:	49 06       	cpc	r4, r25
      74:	49 06       	cpc	r4, r25
      76:	4e 06       	cpc	r4, r30
      78:	72 06       	cpc	r7, r18
      7a:	74 06       	cpc	r7, r20
      7c:	76 06       	cpc	r7, r22
      7e:	78 06       	cpc	r7, r24
      80:	7a 06       	cpc	r7, r26
      82:	7c 06       	cpc	r7, r28
      84:	7e 06       	cpc	r7, r30
      86:	7e 06       	cpc	r7, r30
      88:	3c 07       	cpc	r19, r28
      8a:	44 07       	cpc	r20, r20
      8c:	4c 07       	cpc	r20, r28
      8e:	54 07       	cpc	r21, r20
      90:	5b 07       	cpc	r21, r27
      92:	62 07       	cpc	r22, r18
      94:	69 07       	cpc	r22, r25
      96:	08 4a       	sbci	r16, 0xA8	; 168
      98:	d7 3b       	cpi	r29, 0xB7	; 183
      9a:	3b ce       	rjmp	.-906    	; 0xfffffd12 <__eeprom_end+0xff7efd12>
      9c:	01 6e       	ori	r16, 0xE1	; 225
      9e:	84 bc       	out	0x24, r8	; 36
      a0:	bf fd       	.word	0xfdbf	; ????
      a2:	c1 2f       	mov	r28, r17
      a4:	3d 6c       	ori	r19, 0xCD	; 205
      a6:	74 31       	cpi	r23, 0x14	; 20
      a8:	9a bd       	out	0x2a, r25	; 42
      aa:	56 83       	std	Z+6, r21	; 0x06
      ac:	3d da       	rcall	.-2950   	; 0xfffff528 <__eeprom_end+0xff7ef528>
      ae:	3d 00       	.word	0x003d	; ????
      b0:	c7 7f       	andi	r28, 0xF7	; 247
      b2:	11 be       	out	0x31, r1	; 49
      b4:	d9 e4       	ldi	r29, 0x49	; 73
      b6:	bb 4c       	sbci	r27, 0xCB	; 203
      b8:	3e 91       	ld	r19, -X
      ba:	6b aa       	std	Y+51, r6	; 0x33
      bc:	aa be       	out	0x3a, r10	; 58
      be:	00 00       	nop
      c0:	00 80       	ld	r0, Z
      c2:	3f 00       	.word	0x003f	; ????

000000c4 <__trampolines_end>:
      c4:	00 40       	sbci	r16, 0x00	; 0
      c6:	7a 10       	cpse	r7, r10
      c8:	f3 5a       	subi	r31, 0xA3	; 163
      ca:	00 a0       	ldd	r0, Z+32	; 0x20
      cc:	72 4e       	sbci	r23, 0xE2	; 226
      ce:	18 09       	sbc	r17, r8
      d0:	00 10       	cpse	r0, r0
      d2:	a5 d4       	rcall	.+2378   	; 0xa1e <_ZN8Magnetic6toJSONEPKc+0x4a>
      d4:	e8 00       	.word	0x00e8	; ????
      d6:	00 e8       	ldi	r16, 0x80	; 128
      d8:	76 48       	sbci	r23, 0x86	; 134
      da:	17 00       	.word	0x0017	; ????
      dc:	00 e4       	ldi	r16, 0x40	; 64
      de:	0b 54       	subi	r16, 0x4B	; 75
      e0:	02 00       	.word	0x0002	; ????
      e2:	00 ca       	rjmp	.-3072   	; 0xfffff4e4 <__eeprom_end+0xff7ef4e4>
      e4:	9a 3b       	cpi	r25, 0xBA	; 186
      e6:	00 00       	nop
      e8:	00 e1       	ldi	r16, 0x10	; 16
      ea:	f5 05       	cpc	r31, r5
      ec:	00 00       	nop
      ee:	80 96       	adiw	r24, 0x20	; 32
      f0:	98 00       	.word	0x0098	; ????
      f2:	00 00       	nop
      f4:	40 42       	sbci	r20, 0x20	; 32
      f6:	0f 00       	.word	0x000f	; ????
      f8:	00 00       	nop
      fa:	a0 86       	std	Z+8, r10	; 0x08
      fc:	01 00       	.word	0x0001	; ????
      fe:	00 00       	nop
     100:	10 27       	eor	r17, r16
     102:	00 00       	nop
     104:	00 00       	nop
     106:	e8 03       	fmulsu	r22, r16
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	64 00       	.word	0x0064	; ????
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	0a 00       	.word	0x000a	; ????
     114:	00 00       	nop
     116:	00 00       	nop
     118:	01 00       	.word	0x0001	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	2c 76       	andi	r18, 0x6C	; 108
     120:	d8 88       	ldd	r13, Y+16	; 0x10
     122:	dc 67       	ori	r29, 0x7C	; 124
     124:	4f 08       	sbc	r4, r15
     126:	23 df       	rcall	.-442    	; 0xffffff6e <__eeprom_end+0xff7eff6e>
     128:	c1 df       	rcall	.-126    	; 0xac <__SREG__+0x6d>
     12a:	ae 59       	subi	r26, 0x9E	; 158
     12c:	e1 b1       	in	r30, 0x01	; 1
     12e:	b7 96       	adiw	r30, 0x27	; 39
     130:	e5 e3       	ldi	r30, 0x35	; 53
     132:	e4 53       	subi	r30, 0x34	; 52
     134:	c6 3a       	cpi	r28, 0xA6	; 166
     136:	e6 51       	subi	r30, 0x16	; 22
     138:	99 76       	andi	r25, 0x69	; 105
     13a:	96 e8       	ldi	r25, 0x86	; 134
     13c:	e6 c2       	rjmp	.+1484   	; 0x70a <_ZN8Magnetic5toCSVEPKc+0x5e>
     13e:	84 26       	eor	r8, r20
     140:	eb 89       	ldd	r30, Y+19	; 0x13
     142:	8c 9b       	sbis	0x11, 4	; 17
     144:	62 ed       	ldi	r22, 0xD2	; 210
     146:	40 7c       	andi	r20, 0xC0	; 192
     148:	6f fc       	.word	0xfc6f	; ????
     14a:	ef bc       	out	0x2f, r14	; 47
     14c:	9c 9f       	mul	r25, r28
     14e:	40 f2       	brcs	.-112    	; 0xe0 <__trampolines_end+0x1c>
     150:	ba a5       	ldd	r27, Y+42	; 0x2a
     152:	6f a5       	ldd	r22, Y+47	; 0x2f
     154:	f4 90       	lpm	r15, Z
     156:	05 5a       	subi	r16, 0xA5	; 165
     158:	2a f7       	brpl	.-54     	; 0x124 <__trampolines_end+0x60>
     15a:	5c 93       	st	X, r21
     15c:	6b 6c       	ori	r22, 0xCB	; 203
     15e:	f9 67       	ori	r31, 0x79	; 121
     160:	6d c1       	rjmp	.+730    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     162:	1b fc       	.word	0xfc1b	; ????
     164:	e0 e4       	ldi	r30, 0x40	; 64
     166:	0d 47       	sbci	r16, 0x7D	; 125
     168:	fe f5       	brtc	.+126    	; 0x1e8 <_ZL11json_format+0x2a>
     16a:	20 e6       	ldi	r18, 0x60	; 96
     16c:	b5 00       	.word	0x00b5	; ????
     16e:	d0 ed       	ldi	r29, 0xD0	; 208
     170:	90 2e       	mov	r9, r16
     172:	03 00       	.word	0x0003	; ????
     174:	94 35       	cpi	r25, 0x54	; 84
     176:	77 05       	cpc	r23, r7
     178:	00 80       	ld	r0, Z
     17a:	84 1e       	adc	r8, r20
     17c:	08 00       	.word	0x0008	; ????
     17e:	00 20       	and	r0, r0
     180:	4e 0a       	sbc	r4, r30
     182:	00 00       	nop
     184:	00 c8       	rjmp	.-4096   	; 0xfffff186 <__eeprom_end+0xff7ef186>
     186:	0c 33       	cpi	r16, 0x3C	; 60
     188:	33 33       	cpi	r19, 0x33	; 51
     18a:	33 0f       	add	r19, r19
     18c:	98 6e       	ori	r25, 0xE8	; 232
     18e:	12 83       	std	Z+2, r17	; 0x02
     190:	11 41       	sbci	r17, 0x11	; 17
     192:	ef 8d       	ldd	r30, Y+31	; 0x1f
     194:	21 14       	cp	r2, r1
     196:	89 3b       	cpi	r24, 0xB9	; 185
     198:	e6 55       	subi	r30, 0x56	; 86
     19a:	16 cf       	rjmp	.-468    	; 0xffffffc8 <__eeprom_end+0xff7effc8>
     19c:	fe e6       	ldi	r31, 0x6E	; 110
     19e:	db 18       	sub	r13, r11
     1a0:	d1 84       	ldd	r13, Z+9	; 0x09
     1a2:	4b 38       	cpi	r20, 0x8B	; 139
     1a4:	1b f7       	brvc	.-58     	; 0x16c <__trampolines_end+0xa8>
     1a6:	7c 1d       	adc	r23, r12
     1a8:	90 1d       	adc	r25, r0
     1aa:	a4 bb       	out	0x14, r26	; 20
     1ac:	e4 24       	eor	r14, r4
     1ae:	20 32       	cpi	r18, 0x20	; 32
     1b0:	84 72       	andi	r24, 0x24	; 36
     1b2:	5e 22       	and	r5, r30
     1b4:	81 00       	.word	0x0081	; ????
     1b6:	c9 f1       	breq	.+114    	; 0x22a <digital_pin_to_timer_PGM+0x7>
     1b8:	24 ec       	ldi	r18, 0xC4	; 196
     1ba:	a1 e5       	ldi	r26, 0x51	; 81
     1bc:	3d 27       	eor	r19, r29

000001be <_ZL11json_format>:
     1be:	25 63 7b 22 73 65 6e 73 6f 72 4e 61 6d 65 22 3a     %c{"sensorName":
     1ce:	22 25 73 22 2c 22 75 6e 69 74 22 3a 22 25 73 22     "%s","unit":"%s"
     1de:	2c 22 76 61 6c 75 65 22 3a 25 73 2c 22 63 73 22     ,"value":%s,"cs"
     1ee:	3a 25 64 7d 25 63 0a 00                             :%d}%c..

000001f6 <_ZL20magnetic_sensor_name>:
     1f6:	4d 61 67 6e 65 74 69 63 00                          Magnetic.

000001ff <_ZL15begin_error_msg>:
     1ff:	62 65 67 69 6e 20 25 73 20 66 61 69 6c 65 64 2e     begin %s failed.
     20f:	20 43 68 65 63 6b 20 77 69 72 69 6e 67 21 00         Check wiring!.

0000021e <_ZL13concat_string>:
     21e:	25 73 25 73 00                                      %s%s.

00000223 <digital_pin_to_timer_PGM>:
     223:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     233:	00 00 00 00                                         ....

00000237 <digital_pin_to_bit_mask_PGM>:
     237:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     247:	04 08 10 20                                         ... 

0000024b <digital_pin_to_port_PGM>:
     24b:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     25b:	03 03 03 03                                         ....

0000025f <port_to_input_PGM>:
     25f:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000269 <port_to_output_PGM>:
     269:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000273 <port_to_mode_PGM>:
     273:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

0000027e <__ctors_start>:
     27e:	bd 07       	cpc	r27, r29
     280:	9e 11       	cpse	r25, r14
     282:	41 16       	cp	r4, r17
     284:	44 19       	sub	r20, r4

00000286 <__ctors_end>:
     286:	d5 07       	cpc	r29, r21
     288:	dd 11       	cpse	r29, r13

0000028a <__dtors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	d8 e0       	ldi	r29, 0x08	; 8
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61

00000296 <__do_copy_data>:
     296:	12 e0       	ldi	r17, 0x02	; 2
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b1 e0       	ldi	r27, 0x01	; 1
     29c:	e8 ef       	ldi	r30, 0xF8	; 248
     29e:	f8 e4       	ldi	r31, 0x48	; 72
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <__do_copy_data+0x10>
     2a2:	05 90       	lpm	r0, Z+
     2a4:	0d 92       	st	X+, r0
     2a6:	a0 33       	cpi	r26, 0x30	; 48
     2a8:	b1 07       	cpc	r27, r17
     2aa:	d9 f7       	brne	.-10     	; 0x2a2 <__do_copy_data+0xc>

000002ac <__do_clear_bss>:
     2ac:	24 e0       	ldi	r18, 0x04	; 4
     2ae:	a0 e3       	ldi	r26, 0x30	; 48
     2b0:	b2 e0       	ldi	r27, 0x02	; 2
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <.do_clear_bss_start>

000002b4 <.do_clear_bss_loop>:
     2b4:	1d 92       	st	X+, r1

000002b6 <.do_clear_bss_start>:
     2b6:	a1 37       	cpi	r26, 0x71	; 113
     2b8:	b2 07       	cpc	r27, r18
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <.do_clear_bss_loop>

000002bc <__do_global_ctors>:
     2bc:	11 e0       	ldi	r17, 0x01	; 1
     2be:	c3 e4       	ldi	r28, 0x43	; 67
     2c0:	d1 e0       	ldi	r29, 0x01	; 1
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <__do_global_ctors+0x10>
     2c4:	21 97       	sbiw	r28, 0x01	; 1
     2c6:	fe 01       	movw	r30, r28
     2c8:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__tablejump2__>
     2cc:	cf 33       	cpi	r28, 0x3F	; 63
     2ce:	d1 07       	cpc	r29, r17
     2d0:	c9 f7       	brne	.-14     	; 0x2c4 <__do_global_ctors+0x8>
     2d2:	0e 94 6f 16 	call	0x2cde	; 0x2cde <main>
     2d6:	0c 94 6f 24 	jmp	0x48de	; 0x48de <__do_global_dtors>

000002da <__bad_interrupt>:
     2da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002de <_ZN8Magnetic10initializeEv>:
void Sensor::initializeHeader(sensor_id_t sensor_id, data_unit_t unit, const char name[] PROGMEM) {
  this->name = name;
  this->header.sensor_id = sensor_id;
  this->header.unit = unit;
  this->header.timestamp = 0;
  this->initialized = false;
     2de:	fc 01       	movw	r30, r24
     2e0:	83 85       	ldd	r24, Z+11	; 0x0b
     2e2:	0c 94 93 06 	jmp	0xd26	; 0xd26 <lsm303_mag_init>

000002e6 <_ZN8Magnetic10readSensorEv>:
     2e6:	ac 01       	movw	r20, r24
     2e8:	4c 5e       	subi	r20, 0xEC	; 236
     2ea:	5f 4f       	sbci	r21, 0xFF	; 255
     2ec:	bc 01       	movw	r22, r24
     2ee:	60 5f       	subi	r22, 0xF0	; 240
     2f0:	7f 4f       	sbci	r23, 0xFF	; 255
     2f2:	0c 96       	adiw	r24, 0x0c	; 12
     2f4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lsm303_getMag>
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	08 95       	ret

000002fc <_Z10_getOutBufv>:
     2fc:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <_output_buffer>
     300:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <_output_buffer+0x1>
     304:	89 2b       	or	r24, r25
     306:	51 f4       	brne	.+20     	; 0x31c <_Z10_getOutBufv+0x20>
     308:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <OUTPUT_BUF_SIZE>
     30c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <OUTPUT_BUF_SIZE+0x1>
     310:	0e 94 80 16 	call	0x2d00	; 0x2d00 <_Znaj>
     314:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <_output_buffer+0x1>
     318:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <_output_buffer>
     31c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <_output_buffer>
     320:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <_output_buffer+0x1>
     324:	08 95       	ret

00000326 <_Z12_resetOutBufv>:
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <OUTPUT_BUF_SIZE>
     32e:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <OUTPUT_BUF_SIZE+0x1>
     332:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     336:	ae 01       	movw	r20, r28
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <memset>
     340:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <__data_end+0x1>
     344:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <_Z11unit_to_strh>:
     34e:	81 50       	subi	r24, 0x01	; 1
     350:	8b 30       	cpi	r24, 0x0B	; 11
     352:	48 f4       	brcc	.+18     	; 0x366 <_Z11unit_to_strh+0x18>
     354:	e8 2f       	mov	r30, r24
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	ee 0f       	add	r30, r30
     35a:	ff 1f       	adc	r31, r31
     35c:	e3 5a       	subi	r30, 0xA3	; 163
     35e:	fe 4f       	sbci	r31, 0xFE	; 254
     360:	80 81       	ld	r24, Z
     362:	91 81       	ldd	r25, Z+1	; 0x01
     364:	08 95       	ret
     366:	82 e1       	ldi	r24, 0x12	; 18
     368:	92 e0       	ldi	r25, 0x02	; 2
     36a:	08 95       	ret

0000036c <_Z18_writeErrorMessagePKcS0_>:
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	c0 55       	subi	r28, 0x50	; 80
     37e:	d1 09       	sbc	r29, r1
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	7b 01       	movw	r14, r22
     38c:	8e 01       	movw	r16, r28
     38e:	0d 5c       	subi	r16, 0xCD	; 205
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	c8 01       	movw	r24, r16
     396:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <strcpy_P>
     39a:	b7 01       	movw	r22, r14
     39c:	ce 01       	movw	r24, r28
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	7c 01       	movw	r14, r24
     3a2:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <strcpy_P>
     3a6:	0e 94 93 01 	call	0x326	; 0x326 <_Z12_resetOutBufv>
     3aa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     3ae:	ff 92       	push	r15
     3b0:	ef 92       	push	r14
     3b2:	1f 93       	push	r17
     3b4:	0f 93       	push	r16
     3b6:	9f 93       	push	r25
     3b8:	8f 93       	push	r24
     3ba:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <sprintf>
     3be:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     3c2:	bc 01       	movw	r22, r24
     3c4:	87 e0       	ldi	r24, 0x07	; 7
     3c6:	93 e0       	ldi	r25, 0x03	; 3
     3c8:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <_ZN5Print7printlnEPKc>
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	c0 5b       	subi	r28, 0xB0	; 176
     3da:	df 4f       	sbci	r29, 0xFF	; 255
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	08 95       	ret

000003f4 <_Z23_calculateCheckSumValuePKciPv>:
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	6c 01       	movw	r12, r24
     40a:	5b 01       	movw	r10, r22
     40c:	7a 01       	movw	r14, r20
     40e:	00 e0       	ldi	r16, 0x00	; 0
     410:	10 e0       	ldi	r17, 0x00	; 0
     412:	c0 e0       	ldi	r28, 0x00	; 0
     414:	d0 e0       	ldi	r29, 0x00	; 0
     416:	0a 15       	cp	r16, r10
     418:	1b 05       	cpc	r17, r11
     41a:	6c f4       	brge	.+26     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     41c:	f7 01       	movw	r30, r14
     41e:	61 91       	ld	r22, Z+
     420:	71 91       	ld	r23, Z+
     422:	81 91       	ld	r24, Z+
     424:	91 91       	ld	r25, Z+
     426:	7f 01       	movw	r14, r30
     428:	0e 94 10 14 	call	0x2820	; 0x2820 <lround>
     42c:	c6 0f       	add	r28, r22
     42e:	d7 1f       	adc	r29, r23
     430:	0f 5f       	subi	r16, 0xFF	; 255
     432:	1f 4f       	sbci	r17, 0xFF	; 255
     434:	f0 cf       	rjmp	.-32     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     436:	f6 01       	movw	r30, r12
     438:	81 91       	ld	r24, Z+
     43a:	88 23       	and	r24, r24
     43c:	19 f0       	breq	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     43e:	c8 0f       	add	r28, r24
     440:	d1 1d       	adc	r29, r1
     442:	fa cf       	rjmp	.-12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     444:	ce 01       	movw	r24, r28
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	df 90       	pop	r13
     454:	cf 90       	pop	r12
     456:	bf 90       	pop	r11
     458:	af 90       	pop	r10
     45a:	08 95       	ret

0000045c <_Z17calculateCheckSumPKciz>:
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
     464:	ae 01       	movw	r20, r28
     466:	47 5f       	subi	r20, 0xF7	; 247
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	6f 81       	ldd	r22, Y+7	; 0x07
     46c:	78 85       	ldd	r23, Y+8	; 0x08
     46e:	8d 81       	ldd	r24, Y+5	; 0x05
     470:	9e 81       	ldd	r25, Y+6	; 0x06
     472:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z23_calculateCheckSumValuePKciPv>
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <_Z11valuesToCSVPKcmiz>:
     47c:	4f 92       	push	r4
     47e:	5f 92       	push	r5
     480:	7f 92       	push	r7
     482:	8f 92       	push	r8
     484:	9f 92       	push	r9
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	ea 88       	ldd	r14, Y+18	; 0x12
     4a0:	fb 88       	ldd	r15, Y+19	; 0x13
     4a2:	8c 88       	ldd	r8, Y+20	; 0x14
     4a4:	9d 88       	ldd	r9, Y+21	; 0x15
     4a6:	ae 88       	ldd	r10, Y+22	; 0x16
     4a8:	bf 88       	ldd	r11, Y+23	; 0x17
     4aa:	c8 8c       	ldd	r12, Y+24	; 0x18
     4ac:	d9 8c       	ldd	r13, Y+25	; 0x19
     4ae:	81 14       	cp	r8, r1
     4b0:	91 04       	cpc	r9, r1
     4b2:	a1 04       	cpc	r10, r1
     4b4:	b1 04       	cpc	r11, r1
     4b6:	21 f4       	brne	.+8      	; 0x4c0 <_Z11valuesToCSVPKcmiz+0x44>
     4b8:	0e 94 92 19 	call	0x3324	; 0x3324 <millis>
     4bc:	4b 01       	movw	r8, r22
     4be:	5c 01       	movw	r10, r24
     4c0:	0e 94 93 01 	call	0x326	; 0x326 <_Z12_resetOutBufv>
     4c4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     4c8:	2a e0       	ldi	r18, 0x0A	; 10
     4ca:	ac 01       	movw	r20, r24
     4cc:	c5 01       	movw	r24, r10
     4ce:	b4 01       	movw	r22, r8
     4d0:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__ultoa_ncheck>
     4d4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     4d8:	fc 01       	movw	r30, r24
     4da:	01 90       	ld	r0, Z+
     4dc:	00 20       	and	r0, r0
     4de:	e9 f7       	brne	.-6      	; 0x4da <_Z11valuesToCSVPKcmiz+0x5e>
     4e0:	31 97       	sbiw	r30, 0x01	; 1
     4e2:	e8 1b       	sub	r30, r24
     4e4:	f9 0b       	sbc	r31, r25
     4e6:	f0 93 31 02 	sts	0x0231, r31	; 0x800231 <__data_end+0x1>
     4ea:	e0 93 30 02 	sts	0x0230, r30	; 0x800230 <__data_end>
     4ee:	e1 14       	cp	r14, r1
     4f0:	f1 04       	cpc	r15, r1
     4f2:	89 f1       	breq	.+98     	; 0x556 <_Z11valuesToCSVPKcmiz+0xda>
     4f4:	f7 01       	movw	r30, r14
     4f6:	01 90       	ld	r0, Z+
     4f8:	00 20       	and	r0, r0
     4fa:	e9 f7       	brne	.-6      	; 0x4f6 <_Z11valuesToCSVPKcmiz+0x7a>
     4fc:	31 97       	sbiw	r30, 0x01	; 1
     4fe:	8f 01       	movw	r16, r30
     500:	0e 19       	sub	r16, r14
     502:	1f 09       	sbc	r17, r15
     504:	03 33       	cpi	r16, 0x33	; 51
     506:	11 05       	cpc	r17, r1
     508:	14 f0       	brlt	.+4      	; 0x50e <_Z11valuesToCSVPKcmiz+0x92>
     50a:	02 e3       	ldi	r16, 0x32	; 50
     50c:	10 e0       	ldi	r17, 0x00	; 0
     50e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     512:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <__data_end>
     516:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <__data_end+0x1>
     51a:	a9 01       	movw	r20, r18
     51c:	4f 5f       	subi	r20, 0xFF	; 255
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <__data_end+0x1>
     524:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <__data_end>
     528:	82 0f       	add	r24, r18
     52a:	93 1f       	adc	r25, r19
     52c:	2c e2       	ldi	r18, 0x2C	; 44
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
     532:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     536:	a0 90 30 02 	lds	r10, 0x0230	; 0x800230 <__data_end>
     53a:	b0 90 31 02 	lds	r11, 0x0231	; 0x800231 <__data_end+0x1>
     53e:	a8 01       	movw	r20, r16
     540:	b7 01       	movw	r22, r14
     542:	8a 0d       	add	r24, r10
     544:	9b 1d       	adc	r25, r11
     546:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <memcpy>
     54a:	0a 0d       	add	r16, r10
     54c:	1b 1d       	adc	r17, r11
     54e:	10 93 31 02 	sts	0x0231, r17	; 0x800231 <__data_end+0x1>
     552:	00 93 30 02 	sts	0x0230, r16	; 0x800230 <__data_end>
     556:	ce 01       	movw	r24, r28
     558:	4a 96       	adiw	r24, 0x1a	; 26
     55a:	2c 01       	movw	r4, r24
     55c:	a1 2c       	mov	r10, r1
     55e:	b1 2c       	mov	r11, r1
     560:	8c e2       	ldi	r24, 0x2C	; 44
     562:	78 2e       	mov	r7, r24
     564:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <__data_end>
     568:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <__data_end+0x1>
     56c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <OUTPUT_BUF_SIZE>
     570:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <OUTPUT_BUF_SIZE+0x1>
     574:	ac 14       	cp	r10, r12
     576:	bd 04       	cpc	r11, r13
     578:	f4 f5       	brge	.+124    	; 0x5f6 <_Z11valuesToCSVPKcmiz+0x17a>
     57a:	ac 01       	movw	r20, r24
     57c:	49 50       	subi	r20, 0x09	; 9
     57e:	51 09       	sbc	r21, r1
     580:	24 17       	cp	r18, r20
     582:	35 07       	cpc	r19, r21
     584:	c4 f5       	brge	.+112    	; 0x5f6 <_Z11valuesToCSVPKcmiz+0x17a>
     586:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     58a:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <__data_end>
     58e:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <__data_end+0x1>
     592:	a9 01       	movw	r20, r18
     594:	4f 5f       	subi	r20, 0xFF	; 255
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <__data_end+0x1>
     59c:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <__data_end>
     5a0:	82 0f       	add	r24, r18
     5a2:	93 1f       	adc	r25, r19
     5a4:	fc 01       	movw	r30, r24
     5a6:	70 82       	st	Z, r7
     5a8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     5ac:	42 01       	movw	r8, r4
     5ae:	f4 e0       	ldi	r31, 0x04	; 4
     5b0:	8f 0e       	add	r8, r31
     5b2:	91 1c       	adc	r9, r1
     5b4:	00 91 30 02 	lds	r16, 0x0230	; 0x800230 <__data_end>
     5b8:	10 91 31 02 	lds	r17, 0x0231	; 0x800231 <__data_end+0x1>
     5bc:	08 0f       	add	r16, r24
     5be:	19 1f       	adc	r17, r25
     5c0:	f2 01       	movw	r30, r4
     5c2:	60 81       	ld	r22, Z
     5c4:	71 81       	ldd	r23, Z+1	; 0x01
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	93 81       	ldd	r25, Z+3	; 0x03
     5ca:	23 e0       	ldi	r18, 0x03	; 3
     5cc:	42 e0       	ldi	r20, 0x02	; 2
     5ce:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <dtostrf>
     5d2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     5d6:	fc 01       	movw	r30, r24
     5d8:	01 90       	ld	r0, Z+
     5da:	00 20       	and	r0, r0
     5dc:	e9 f7       	brne	.-6      	; 0x5d8 <_Z11valuesToCSVPKcmiz+0x15c>
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	e8 1b       	sub	r30, r24
     5e2:	f9 0b       	sbc	r31, r25
     5e4:	f0 93 31 02 	sts	0x0231, r31	; 0x800231 <__data_end+0x1>
     5e8:	e0 93 30 02 	sts	0x0230, r30	; 0x800230 <__data_end>
     5ec:	ff ef       	ldi	r31, 0xFF	; 255
     5ee:	af 1a       	sub	r10, r31
     5f0:	bf 0a       	sbc	r11, r31
     5f2:	24 01       	movw	r4, r8
     5f4:	b7 cf       	rjmp	.-146    	; 0x564 <_Z11valuesToCSVPKcmiz+0xe8>
     5f6:	0a 97       	sbiw	r24, 0x0a	; 10
     5f8:	28 17       	cp	r18, r24
     5fa:	39 07       	cpc	r19, r25
     5fc:	9c f5       	brge	.+102    	; 0x664 <_Z11valuesToCSVPKcmiz+0x1e8>
     5fe:	ae 01       	movw	r20, r28
     600:	46 5e       	subi	r20, 0xE6	; 230
     602:	5f 4f       	sbci	r21, 0xFF	; 255
     604:	b6 01       	movw	r22, r12
     606:	c7 01       	movw	r24, r14
     608:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_Z23_calculateCheckSumValuePKciPv>
     60c:	8c 01       	movw	r16, r24
     60e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     612:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <__data_end>
     616:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <__data_end+0x1>
     61a:	a9 01       	movw	r20, r18
     61c:	4f 5f       	subi	r20, 0xFF	; 255
     61e:	5f 4f       	sbci	r21, 0xFF	; 255
     620:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <__data_end+0x1>
     624:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <__data_end>
     628:	82 0f       	add	r24, r18
     62a:	93 1f       	adc	r25, r19
     62c:	2c e2       	ldi	r18, 0x2C	; 44
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18
     632:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     636:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <__data_end>
     63a:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <__data_end+0x1>
     63e:	68 0f       	add	r22, r24
     640:	79 1f       	adc	r23, r25
     642:	4a e0       	ldi	r20, 0x0A	; 10
     644:	c8 01       	movw	r24, r16
     646:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__itoa_ncheck>
     64a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     64e:	fc 01       	movw	r30, r24
     650:	01 90       	ld	r0, Z+
     652:	00 20       	and	r0, r0
     654:	e9 f7       	brne	.-6      	; 0x650 <_Z11valuesToCSVPKcmiz+0x1d4>
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	e8 1b       	sub	r30, r24
     65a:	f9 0b       	sbc	r31, r25
     65c:	f0 93 31 02 	sts	0x0231, r31	; 0x800231 <__data_end+0x1>
     660:	e0 93 30 02 	sts	0x0230, r30	; 0x800230 <__data_end>
     664:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     668:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <__data_end>
     66c:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <__data_end+0x1>
     670:	a9 01       	movw	r20, r18
     672:	4f 5f       	subi	r20, 0xFF	; 255
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	50 93 31 02 	sts	0x0231, r21	; 0x800231 <__data_end+0x1>
     67a:	40 93 30 02 	sts	0x0230, r20	; 0x800230 <__data_end>
     67e:	82 0f       	add	r24, r18
     680:	93 1f       	adc	r25, r19
     682:	2a e0       	ldi	r18, 0x0A	; 10
     684:	fc 01       	movw	r30, r24
     686:	20 83       	st	Z, r18
     688:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	bf 90       	pop	r11
     69e:	af 90       	pop	r10
     6a0:	9f 90       	pop	r9
     6a2:	8f 90       	pop	r8
     6a4:	7f 90       	pop	r7
     6a6:	5f 90       	pop	r5
     6a8:	4f 90       	pop	r4
     6aa:	08 95       	ret

000006ac <_ZN8Magnetic5toCSVEPKc>:
     6ac:	fc 01       	movw	r30, r24
     6ae:	96 2f       	mov	r25, r22
     6b0:	27 2f       	mov	r18, r23
     6b2:	46 81       	ldd	r20, Z+6	; 0x06
     6b4:	57 81       	ldd	r21, Z+7	; 0x07
     6b6:	60 85       	ldd	r22, Z+8	; 0x08
     6b8:	71 85       	ldd	r23, Z+9	; 0x09
     6ba:	41 15       	cp	r20, r1
     6bc:	51 05       	cpc	r21, r1
     6be:	61 05       	cpc	r22, r1
     6c0:	71 05       	cpc	r23, r1
     6c2:	69 f1       	breq	.+90     	; 0x71e <_ZN8Magnetic5toCSVEPKc+0x72>
     6c4:	87 89       	ldd	r24, Z+23	; 0x17
     6c6:	8f 93       	push	r24
     6c8:	86 89       	ldd	r24, Z+22	; 0x16
     6ca:	8f 93       	push	r24
     6cc:	85 89       	ldd	r24, Z+21	; 0x15
     6ce:	8f 93       	push	r24
     6d0:	84 89       	ldd	r24, Z+20	; 0x14
     6d2:	8f 93       	push	r24
     6d4:	83 89       	ldd	r24, Z+19	; 0x13
     6d6:	8f 93       	push	r24
     6d8:	82 89       	ldd	r24, Z+18	; 0x12
     6da:	8f 93       	push	r24
     6dc:	81 89       	ldd	r24, Z+17	; 0x11
     6de:	8f 93       	push	r24
     6e0:	80 89       	ldd	r24, Z+16	; 0x10
     6e2:	8f 93       	push	r24
     6e4:	87 85       	ldd	r24, Z+15	; 0x0f
     6e6:	8f 93       	push	r24
     6e8:	86 85       	ldd	r24, Z+14	; 0x0e
     6ea:	8f 93       	push	r24
     6ec:	85 85       	ldd	r24, Z+13	; 0x0d
     6ee:	8f 93       	push	r24
     6f0:	84 85       	ldd	r24, Z+12	; 0x0c
     6f2:	8f 93       	push	r24
     6f4:	1f 92       	push	r1
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	8f 93       	push	r24
     6fa:	7f 93       	push	r23
     6fc:	6f 93       	push	r22
     6fe:	5f 93       	push	r21
     700:	4f 93       	push	r20
     702:	2f 93       	push	r18
     704:	9f 93       	push	r25
     706:	0e 94 3e 02 	call	0x47c	; 0x47c <_Z11valuesToCSVPKcmiz>
     70a:	2d b7       	in	r18, 0x3d	; 61
     70c:	3e b7       	in	r19, 0x3e	; 62
     70e:	2c 5e       	subi	r18, 0xEC	; 236
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	3e bf       	out	0x3e, r19	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	2d bf       	out	0x3d, r18	; 61
     71c:	08 95       	ret
     71e:	82 e1       	ldi	r24, 0x12	; 18
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	08 95       	ret

00000724 <_Z15_writeJSONValuePcPKcS1_f>:
     724:	4f 92       	push	r4
     726:	5f 92       	push	r5
     728:	6f 92       	push	r6
     72a:	7f 92       	push	r7
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	cf 92       	push	r12
     736:	df 92       	push	r13
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	c0 57       	subi	r28, 0x70	; 112
     74a:	d1 09       	sbc	r29, r1
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	db 01       	movw	r26, r22
     758:	0d 90       	ld	r0, X+
     75a:	00 20       	and	r0, r0
     75c:	e9 f7       	brne	.-6      	; 0x758 <_Z15_writeJSONValuePcPKcS1_f+0x34>
     75e:	11 97       	sbiw	r26, 0x01	; 1
     760:	7d 01       	movw	r14, r26
     762:	e6 1a       	sub	r14, r22
     764:	f7 0a       	sbc	r15, r23
     766:	da 01       	movw	r26, r20
     768:	0d 90       	ld	r0, X+
     76a:	00 20       	and	r0, r0
     76c:	e9 f7       	brne	.-6      	; 0x768 <_Z15_writeJSONValuePcPKcS1_f+0x44>
     76e:	11 97       	sbiw	r26, 0x01	; 1
     770:	a4 1b       	sub	r26, r20
     772:	b5 0b       	sbc	r27, r21
     774:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <__data_end>
     778:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <__data_end+0x1>
     77c:	3a 96       	adiw	r30, 0x0a	; 10
     77e:	ee 0d       	add	r30, r14
     780:	ff 1d       	adc	r31, r15
     782:	ea 0f       	add	r30, r26
     784:	fb 1f       	adc	r31, r27
     786:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <OUTPUT_BUF_SIZE>
     78a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <OUTPUT_BUF_SIZE+0x1>
     78e:	ae 17       	cp	r26, r30
     790:	bf 07       	cpc	r27, r31
     792:	08 f4       	brcc	.+2      	; 0x796 <_Z15_writeJSONValuePcPKcS1_f+0x72>
     794:	50 c0       	rjmp	.+160    	; 0x836 <_Z15_writeJSONValuePcPKcS1_f+0x112>
     796:	e2 2f       	mov	r30, r18
     798:	f1 2f       	mov	r31, r17
     79a:	a0 2f       	mov	r26, r16
     79c:	c5 2e       	mov	r12, r21
     79e:	d4 2e       	mov	r13, r20
     7a0:	e7 2e       	mov	r14, r23
     7a2:	f6 2e       	mov	r15, r22
     7a4:	a9 2e       	mov	r10, r25
     7a6:	b8 2e       	mov	r11, r24
     7a8:	4e 01       	movw	r8, r28
     7aa:	21 e5       	ldi	r18, 0x51	; 81
     7ac:	82 0e       	add	r8, r18
     7ae:	91 1c       	adc	r9, r1
     7b0:	84 01       	movw	r16, r8
     7b2:	22 e0       	ldi	r18, 0x02	; 2
     7b4:	44 e0       	ldi	r20, 0x04	; 4
     7b6:	7a 2e       	mov	r7, r26
     7b8:	6f 2e       	mov	r6, r31
     7ba:	5e 2e       	mov	r5, r30
     7bc:	43 2e       	mov	r4, r19
     7be:	6a 2f       	mov	r22, r26
     7c0:	7f 2f       	mov	r23, r31
     7c2:	8e 2f       	mov	r24, r30
     7c4:	93 2f       	mov	r25, r19
     7c6:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <dtostrf>
     7ca:	6e eb       	ldi	r22, 0xBE	; 190
     7cc:	71 e0       	ldi	r23, 0x01	; 1
     7ce:	00 55       	subi	r16, 0x50	; 80
     7d0:	11 09       	sbc	r17, r1
     7d2:	c8 01       	movw	r24, r16
     7d4:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <strcpy_P>
     7d8:	4f 92       	push	r4
     7da:	5f 92       	push	r5
     7dc:	6f 92       	push	r6
     7de:	7f 92       	push	r7
     7e0:	1f 92       	push	r1
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	8f 93       	push	r24
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0e 94 2e 02 	call	0x45c	; 0x45c <_Z17calculateCheckSumPKciz>
     7ee:	1f 92       	push	r1
     7f0:	2c e7       	ldi	r18, 0x7C	; 124
     7f2:	2f 93       	push	r18
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	9f 92       	push	r9
     7fa:	8f 92       	push	r8
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	1f 92       	push	r1
     806:	8e e7       	ldi	r24, 0x7E	; 126
     808:	8f 93       	push	r24
     80a:	1f 93       	push	r17
     80c:	0f 93       	push	r16
     80e:	af 92       	push	r10
     810:	bf 92       	push	r11
     812:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <sprintf>
     816:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <__data_end>
     81a:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <__data_end+0x1>
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <__data_end+0x1>
     826:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	02 c0       	rjmp	.+4      	; 0x83a <_Z15_writeJSONValuePcPKcS1_f+0x116>
     836:	8f ef       	ldi	r24, 0xFF	; 255
     838:	9f ef       	ldi	r25, 0xFF	; 255
     83a:	c0 59       	subi	r28, 0x90	; 144
     83c:	df 4f       	sbci	r29, 0xFF	; 255
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	bf 90       	pop	r11
     85a:	af 90       	pop	r10
     85c:	9f 90       	pop	r9
     85e:	8f 90       	pop	r8
     860:	7f 90       	pop	r7
     862:	6f 90       	pop	r6
     864:	5f 90       	pop	r5
     866:	4f 90       	pop	r4
     868:	08 95       	ret

0000086a <_Z12valuesToJSONPKchiz>:
     86a:	2f 92       	push	r2
     86c:	3f 92       	push	r3
     86e:	4f 92       	push	r4
     870:	5f 92       	push	r5
     872:	6f 92       	push	r6
     874:	7f 92       	push	r7
     876:	8f 92       	push	r8
     878:	9f 92       	push	r9
     87a:	af 92       	push	r10
     87c:	bf 92       	push	r11
     87e:	cf 92       	push	r12
     880:	df 92       	push	r13
     882:	ef 92       	push	r14
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	2d 97       	sbiw	r28, 0x0d	; 13
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	2a a1       	ldd	r18, Y+34	; 0x22
     8a0:	2e 83       	std	Y+6, r18	; 0x06
     8a2:	3b a1       	ldd	r19, Y+35	; 0x23
     8a4:	3f 83       	std	Y+7, r19	; 0x07
     8a6:	8d b7       	in	r24, 0x3d	; 61
     8a8:	9e b7       	in	r25, 0x3e	; 62
     8aa:	9d 87       	std	Y+13, r25	; 0x0d
     8ac:	8c 87       	std	Y+12, r24	; 0x0c
     8ae:	f9 01       	movw	r30, r18
     8b0:	df 01       	movw	r26, r30
     8b2:	0d 90       	ld	r0, X+
     8b4:	00 20       	and	r0, r0
     8b6:	e9 f7       	brne	.-6      	; 0x8b2 <_Z12valuesToJSONPKchiz+0x48>
     8b8:	11 97       	sbiw	r26, 0x01	; 1
     8ba:	1d 01       	movw	r2, r26
     8bc:	2e 1a       	sub	r2, r30
     8be:	3f 0a       	sbc	r3, r31
     8c0:	6e e1       	ldi	r22, 0x1E	; 30
     8c2:	72 e0       	ldi	r23, 0x02	; 2
     8c4:	9e 01       	movw	r18, r28
     8c6:	2f 5f       	subi	r18, 0xFF	; 255
     8c8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ca:	59 01       	movw	r10, r18
     8cc:	c9 01       	movw	r24, r18
     8ce:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <strcpy_P>
     8d2:	0e 94 93 01 	call	0x326	; 0x326 <_Z12_resetOutBufv>
     8d6:	fe 01       	movw	r30, r28
     8d8:	b7 96       	adiw	r30, 0x27	; 39
     8da:	c1 2c       	mov	r12, r1
     8dc:	d1 2c       	mov	r13, r1
     8de:	32 e0       	ldi	r19, 0x02	; 2
     8e0:	23 0e       	add	r2, r19
     8e2:	31 1c       	adc	r3, r1
     8e4:	8d a1       	ldd	r24, Y+37	; 0x25
     8e6:	9e a1       	ldd	r25, Y+38	; 0x26
     8e8:	c8 16       	cp	r12, r24
     8ea:	d9 06       	cpc	r13, r25
     8ec:	0c f0       	brlt	.+2      	; 0x8f0 <_Z12valuesToJSONPKchiz+0x86>
     8ee:	50 c0       	rjmp	.+160    	; 0x990 <__stack+0x91>
     8f0:	2d b7       	in	r18, 0x3d	; 61
     8f2:	3e b7       	in	r19, 0x3e	; 62
     8f4:	3b 87       	std	Y+11, r19	; 0x0b
     8f6:	2a 87       	std	Y+10, r18	; 0x0a
     8f8:	80 81       	ld	r24, Z
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	9f 01       	movw	r18, r30
     8fe:	2a 5f       	subi	r18, 0xFA	; 250
     900:	3f 4f       	sbci	r19, 0xFF	; 255
     902:	39 87       	std	Y+9, r19	; 0x09
     904:	28 87       	std	Y+8, r18	; 0x08
     906:	42 80       	ldd	r4, Z+2	; 0x02
     908:	53 80       	ldd	r5, Z+3	; 0x03
     90a:	64 80       	ldd	r6, Z+4	; 0x04
     90c:	75 80       	ldd	r7, Z+5	; 0x05
     90e:	dc 01       	movw	r26, r24
     910:	fd 01       	movw	r30, r26
     912:	01 90       	ld	r0, Z+
     914:	00 20       	and	r0, r0
     916:	e9 f7       	brne	.-6      	; 0x912 <__stack+0x13>
     918:	31 97       	sbiw	r30, 0x01	; 1
     91a:	ea 1b       	sub	r30, r26
     91c:	fb 0b       	sbc	r31, r27
     91e:	e2 0d       	add	r30, r2
     920:	f3 1d       	adc	r31, r3
     922:	2d b7       	in	r18, 0x3d	; 61
     924:	3e b7       	in	r19, 0x3e	; 62
     926:	2e 1b       	sub	r18, r30
     928:	3f 0b       	sbc	r19, r31
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	3e bf       	out	0x3e, r19	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	2d bf       	out	0x3d, r18	; 61
     934:	2f 5f       	subi	r18, 0xFF	; 255
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	79 01       	movw	r14, r18
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	3f 81       	ldd	r19, Y+7	; 0x07
     940:	3f 93       	push	r19
     942:	8e 81       	ldd	r24, Y+6	; 0x06
     944:	8f 93       	push	r24
     946:	bf 92       	push	r11
     948:	af 92       	push	r10
     94a:	ff 92       	push	r15
     94c:	ef 92       	push	r14
     94e:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <sprintf>
     952:	8c a1       	ldd	r24, Y+36	; 0x24
     954:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z11unit_to_strh>
     958:	4c 01       	movw	r8, r24
     95a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     95e:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <__data_end>
     962:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <__data_end+0x1>
     966:	93 01       	movw	r18, r6
     968:	82 01       	movw	r16, r4
     96a:	a4 01       	movw	r20, r8
     96c:	b7 01       	movw	r22, r14
     96e:	8e 0f       	add	r24, r30
     970:	9f 1f       	adc	r25, r31
     972:	0e 94 92 03 	call	0x724	; 0x724 <_Z15_writeJSONValuePcPKcS1_f>
     976:	2a 85       	ldd	r18, Y+10	; 0x0a
     978:	3b 85       	ldd	r19, Y+11	; 0x0b
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	3e bf       	out	0x3e, r19	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	2d bf       	out	0x3d, r18	; 61
     984:	3f ef       	ldi	r19, 0xFF	; 255
     986:	c3 1a       	sub	r12, r19
     988:	d3 0a       	sbc	r13, r19
     98a:	e8 85       	ldd	r30, Y+8	; 0x08
     98c:	f9 85       	ldd	r31, Y+9	; 0x09
     98e:	aa cf       	rjmp	.-172    	; 0x8e4 <_Z12valuesToJSONPKchiz+0x7a>
     990:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z10_getOutBufv>
     994:	2c 85       	ldd	r18, Y+12	; 0x0c
     996:	3d 85       	ldd	r19, Y+13	; 0x0d
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	3e bf       	out	0x3e, r19	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	2d bf       	out	0x3d, r18	; 61
     9a2:	2d 96       	adiw	r28, 0x0d	; 13
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	3f 90       	pop	r3
     9d0:	2f 90       	pop	r2
     9d2:	08 95       	ret

000009d4 <_ZN8Magnetic6toJSONEPKc>:
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	fc 01       	movw	r30, r24
     9da:	06 81       	ldd	r16, Z+6	; 0x06
     9dc:	17 81       	ldd	r17, Z+7	; 0x07
     9de:	20 85       	ldd	r18, Z+8	; 0x08
     9e0:	31 85       	ldd	r19, Z+9	; 0x09
     9e2:	01 2b       	or	r16, r17
     9e4:	02 2b       	or	r16, r18
     9e6:	03 2b       	or	r16, r19
     9e8:	b9 f1       	breq	.+110    	; 0xa58 <_ZN8Magnetic6toJSONEPKc+0x84>
     9ea:	87 89       	ldd	r24, Z+23	; 0x17
     9ec:	8f 93       	push	r24
     9ee:	86 89       	ldd	r24, Z+22	; 0x16
     9f0:	8f 93       	push	r24
     9f2:	85 89       	ldd	r24, Z+21	; 0x15
     9f4:	8f 93       	push	r24
     9f6:	84 89       	ldd	r24, Z+20	; 0x14
     9f8:	8f 93       	push	r24
     9fa:	8c e0       	ldi	r24, 0x0C	; 12
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	9f 93       	push	r25
     a00:	8f 93       	push	r24
     a02:	83 89       	ldd	r24, Z+19	; 0x13
     a04:	8f 93       	push	r24
     a06:	82 89       	ldd	r24, Z+18	; 0x12
     a08:	8f 93       	push	r24
     a0a:	81 89       	ldd	r24, Z+17	; 0x11
     a0c:	8f 93       	push	r24
     a0e:	80 89       	ldd	r24, Z+16	; 0x10
     a10:	8f 93       	push	r24
     a12:	8e e0       	ldi	r24, 0x0E	; 14
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	87 85       	ldd	r24, Z+15	; 0x0f
     a1c:	8f 93       	push	r24
     a1e:	86 85       	ldd	r24, Z+14	; 0x0e
     a20:	8f 93       	push	r24
     a22:	85 85       	ldd	r24, Z+13	; 0x0d
     a24:	8f 93       	push	r24
     a26:	84 85       	ldd	r24, Z+12	; 0x0c
     a28:	8f 93       	push	r24
     a2a:	80 e1       	ldi	r24, 0x10	; 16
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	1f 92       	push	r1
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	8f 93       	push	r24
     a38:	84 81       	ldd	r24, Z+4	; 0x04
     a3a:	8f 93       	push	r24
     a3c:	7f 93       	push	r23
     a3e:	6f 93       	push	r22
     a40:	0e 94 35 04 	call	0x86a	; 0x86a <_Z12valuesToJSONPKchiz>
     a44:	2d b7       	in	r18, 0x3d	; 61
     a46:	3e b7       	in	r19, 0x3e	; 62
     a48:	29 5e       	subi	r18, 0xE9	; 233
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	3e bf       	out	0x3e, r19	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	2d bf       	out	0x3d, r18	; 61
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <_ZN8Magnetic6toJSONEPKc+0x88>
     a58:	82 e1       	ldi	r24, 0x12	; 18
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	08 95       	ret

00000a62 <_ZN6Sensor5beginEv>:
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
     a68:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <catchSpaceboard>
     a6c:	e8 81       	ld	r30, Y
     a6e:	f9 81       	ldd	r31, Y+1	; 0x01
     a70:	01 90       	ld	r0, Z+
     a72:	f0 81       	ld	r31, Z
     a74:	e0 2d       	mov	r30, r0
     a76:	ce 01       	movw	r24, r28
     a78:	09 95       	icall
     a7a:	8a 87       	std	Y+10, r24	; 0x0a
     a7c:	81 11       	cpse	r24, r1
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <_ZN6Sensor5beginEv+0x2a>
     a80:	6a 81       	ldd	r22, Y+2	; 0x02
     a82:	7b 81       	ldd	r23, Y+3	; 0x03
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z18_writeErrorMessagePKcS0_>
     a8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <_ZN6Sensor4readEv>:
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	fc 01       	movw	r30, r24
     a9a:	22 85       	ldd	r18, Z+10	; 0x0a
     a9c:	22 23       	and	r18, r18
     a9e:	81 f0       	breq	.+32     	; 0xac0 <_ZN6Sensor4readEv+0x2c>
     aa0:	ec 01       	movw	r28, r24
     aa2:	0e 94 92 19 	call	0x3324	; 0x3324 <millis>
     aa6:	6e 83       	std	Y+6, r22	; 0x06
     aa8:	7f 83       	std	Y+7, r23	; 0x07
     aaa:	88 87       	std	Y+8, r24	; 0x08
     aac:	99 87       	std	Y+9, r25	; 0x09
     aae:	e8 81       	ld	r30, Y
     ab0:	f9 81       	ldd	r31, Y+1	; 0x01
     ab2:	02 80       	ldd	r0, Z+2	; 0x02
     ab4:	f3 81       	ldd	r31, Z+3	; 0x03
     ab6:	e0 2d       	mov	r30, r0
     ab8:	ce 01       	movw	r24, r28
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	09 94       	ijmp
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <_ZN8MagneticC1Ev>:
 *     Magnetic mag;                          // Instantiate sensor object
 *     mag.begin();                           // Initialize sensor
 *     Serial.println(mag.readToJSON("mag")); // Read and print values in JSON
 * @endcode
 *****************************************************************************/
Magnetic::Magnetic(void) :
     ac8:	fc 01       	movw	r30, r24
  gaussScale(LSM303_MAG_SCALE4GAUSS)
     aca:	87 e7       	ldi	r24, 0x77	; 119
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	91 83       	std	Z+1, r25	; 0x01
     ad0:	80 83       	st	Z, r24
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	83 87       	std	Z+11, r24	; 0x0b
 *          and need a Sensor Constructor they can be passed to. However, this
 *          constructor causes more memory overhead than it was decided to be
 *          worth. Which is why they're explicitly set instead of initialized.
 */
void Sensor::initializeHeader(sensor_id_t sensor_id, data_unit_t unit, const char name[] PROGMEM) {
  this->name = name;
     ad6:	26 ef       	ldi	r18, 0xF6	; 246
     ad8:	31 e0       	ldi	r19, 0x01	; 1
     ada:	33 83       	std	Z+3, r19	; 0x03
     adc:	22 83       	std	Z+2, r18	; 0x02
  this->header.sensor_id = sensor_id;
     ade:	94 e0       	ldi	r25, 0x04	; 4
     ae0:	95 83       	std	Z+5, r25	; 0x05
  this->header.unit = unit;
     ae2:	84 83       	std	Z+4, r24	; 0x04
  this->header.timestamp = 0;
     ae4:	16 82       	std	Z+6, r1	; 0x06
     ae6:	17 82       	std	Z+7, r1	; 0x07
     ae8:	10 86       	std	Z+8, r1	; 0x08
     aea:	11 86       	std	Z+9, r1	; 0x09
  this->initialized = false;
     aec:	12 86       	std	Z+10, r1	; 0x0a
     aee:	08 95       	ret

00000af0 <_ZN15Adafruit_SI1145C1Ev>:
#define read8(reg, val) readFromRegAddr(_addr, reg, val, 1, BIG_ENDIAN)
#define read16(reg, val) readFromRegAddr(_addr, reg, val, 2, BIG_ENDIAN)
#define write8(reg, val) writeToRegAddr(_addr, reg, val, 1, BIG_ENDIAN)

Adafruit_SI1145::Adafruit_SI1145() {
  _addr = SI1145_ADDR;
     af0:	20 e6       	ldi	r18, 0x60	; 96
     af2:	fc 01       	movw	r30, r24
     af4:	20 83       	st	Z, r18
     af6:	08 95       	ret

00000af8 <_ZN17Adafruit_TCS34725C1E25tcs34725IntegrationTime_t14tcs34725Gain_t>:
/**************************************************************************/
/*!
    Constructor
*/
/**************************************************************************/
Adafruit_TCS34725::Adafruit_TCS34725(tcs34725IntegrationTime_t it, tcs34725Gain_t gain) 
     af8:	fc 01       	movw	r30, r24
{
  _tcs34725Initialised = false;
     afa:	10 82       	st	Z, r1
  _tcs34725IntegrationTime = it;
     afc:	62 83       	std	Z+2, r22	; 0x02
  _tcs34725Gain = gain;
     afe:	41 83       	std	Z+1, r20	; 0x01
     b00:	08 95       	ret

00000b02 <_Z15readFromRegAddrhhPvj8endian_e>:
 * @param length number of bytes to read
 *
 * @return 0 on success, other on failure
 */
int readFromRegAddr(uint8_t devAddr, uint8_t reg, void *val, size_t length, endian_e endianness)
{
     b02:	af 92       	push	r10
     b04:	bf 92       	push	r11
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	d8 2e       	mov	r13, r24
     b16:	c6 2e       	mov	r12, r22
     b18:	7a 01       	movw	r14, r20
     b1a:	e9 01       	movw	r28, r18
  uint8_t *byteArray = (uint8_t *) val;
  int ret;
  int readData = 0;

  Wire.beginTransmission(devAddr);
     b1c:	68 2f       	mov	r22, r24
     b1e:	84 ea       	ldi	r24, 0xA4	; 164
     b20:	93 e0       	ldi	r25, 0x03	; 3
     b22:	0e 94 bd 18 	call	0x317a	; 0x317a <_ZN7TwoWire17beginTransmissionEh>

  if (Wire.write(reg) < 1) {
     b26:	6c 2d       	mov	r22, r12
     b28:	84 ea       	ldi	r24, 0xA4	; 164
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <_ZN7TwoWire5writeEh>
     b30:	89 2b       	or	r24, r25
     b32:	41 f1       	breq	.+80     	; 0xb84 <_Z15readFromRegAddrhhPvj8endian_e+0x82>
    return -1;
  }

  if ((ret = Wire.endTransmission(false)) != 0) {
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	84 ea       	ldi	r24, 0xA4	; 164
     b38:	93 e0       	ldi	r25, 0x03	; 3
     b3a:	0e 94 c7 18 	call	0x318e	; 0x318e <_ZN7TwoWire15endTransmissionEh>
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	09 f0       	breq	.+2      	; 0xb46 <_Z15readFromRegAddrhhPvj8endian_e+0x44>
     b44:	3f c0       	rjmp	.+126    	; 0xbc4 <_Z15readFromRegAddrhhPvj8endian_e+0xc2>
    return ret;
  }

  if (byteArray == NULL || length == 0) {
     b46:	e1 14       	cp	r14, r1
     b48:	f1 04       	cpc	r15, r1
     b4a:	f9 f0       	breq	.+62     	; 0xb8a <_Z15readFromRegAddrhhPvj8endian_e+0x88>
     b4c:	20 97       	sbiw	r28, 0x00	; 0
     b4e:	e9 f0       	breq	.+58     	; 0xb8a <_Z15readFromRegAddrhhPvj8endian_e+0x88>
    return 0;
  }

  Wire.beginTransmission(devAddr);
     b50:	6d 2d       	mov	r22, r13
     b52:	84 ea       	ldi	r24, 0xA4	; 164
     b54:	93 e0       	ldi	r25, 0x03	; 3
     b56:	0e 94 bd 18 	call	0x317a	; 0x317a <_ZN7TwoWire17beginTransmissionEh>
  Wire.requestFrom(devAddr, (uint8_t) length);
     b5a:	4c 2f       	mov	r20, r28
     b5c:	6d 2d       	mov	r22, r13
     b5e:	84 ea       	ldi	r24, 0xA4	; 164
     b60:	93 e0       	ldi	r25, 0x03	; 3
     b62:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN7TwoWire11requestFromEhh>
     b66:	21 97       	sbiw	r28, 0x01	; 1
 */
int readFromRegAddr(uint8_t devAddr, uint8_t reg, void *val, size_t length, endian_e endianness)
{
  uint8_t *byteArray = (uint8_t *) val;
  int ret;
  int readData = 0;
     b68:	a1 2c       	mov	r10, r1
     b6a:	b1 2c       	mov	r11, r1
  }

  Wire.beginTransmission(devAddr);
  Wire.requestFrom(devAddr, (uint8_t) length);

  while (Wire.available() > 0 && readData < length) {
     b6c:	84 ea       	ldi	r24, 0xA4	; 164
     b6e:	93 e0       	ldi	r25, 0x03	; 3
     b70:	0e 94 1b 18 	call	0x3036	; 0x3036 <_ZN7TwoWire9availableEv>
     b74:	18 16       	cp	r1, r24
     b76:	19 06       	cpc	r1, r25
     b78:	5c f4       	brge	.+22     	; 0xb90 <_Z15readFromRegAddrhhPvj8endian_e+0x8e>
     b7a:	cf 3f       	cpi	r28, 0xFF	; 255
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	d8 07       	cpc	r29, r24
     b80:	71 f4       	brne	.+28     	; 0xb9e <_Z15readFromRegAddrhhPvj8endian_e+0x9c>
     b82:	06 c0       	rjmp	.+12     	; 0xb90 <_Z15readFromRegAddrhhPvj8endian_e+0x8e>
  int readData = 0;

  Wire.beginTransmission(devAddr);

  if (Wire.write(reg) < 1) {
    return -1;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	1d c0       	rjmp	.+58     	; 0xbc4 <_Z15readFromRegAddrhhPvj8endian_e+0xc2>
  if ((ret = Wire.endTransmission(false)) != 0) {
    return ret;
  }

  if (byteArray == NULL || length == 0) {
    return 0;
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	1a c0       	rjmp	.+52     	; 0xbc4 <_Z15readFromRegAddrhhPvj8endian_e+0xc2>
  while (Wire.available() > 0 && readData < length) {
    byteArray[endianness == BIG_ENDIAN ? readData : length - 1 - readData] = Wire.read();
    readData++;
  }

  if ((ret = Wire.endTransmission(true)) != 0) {
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	84 ea       	ldi	r24, 0xA4	; 164
     b94:	93 e0       	ldi	r25, 0x03	; 3
     b96:	0e 94 c7 18 	call	0x318e	; 0x318e <_ZN7TwoWire15endTransmissionEh>
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	13 c0       	rjmp	.+38     	; 0xbc4 <_Z15readFromRegAddrhhPvj8endian_e+0xc2>

  Wire.beginTransmission(devAddr);
  Wire.requestFrom(devAddr, (uint8_t) length);

  while (Wire.available() > 0 && readData < length) {
    byteArray[endianness == BIG_ENDIAN ? readData : length - 1 - readData] = Wire.read();
     b9e:	00 23       	and	r16, r16
     ba0:	79 f0       	breq	.+30     	; 0xbc0 <_Z15readFromRegAddrhhPvj8endian_e+0xbe>
     ba2:	ce 01       	movw	r24, r28
     ba4:	67 01       	movw	r12, r14
     ba6:	c8 0e       	add	r12, r24
     ba8:	d9 1e       	adc	r13, r25
     baa:	84 ea       	ldi	r24, 0xA4	; 164
     bac:	93 e0       	ldi	r25, 0x03	; 3
     bae:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
     bb2:	f6 01       	movw	r30, r12
     bb4:	80 83       	st	Z, r24
    readData++;
     bb6:	ff ef       	ldi	r31, 0xFF	; 255
     bb8:	af 1a       	sub	r10, r31
     bba:	bf 0a       	sbc	r11, r31
     bbc:	21 97       	sbiw	r28, 0x01	; 1
  }

  Wire.beginTransmission(devAddr);
  Wire.requestFrom(devAddr, (uint8_t) length);

  while (Wire.available() > 0 && readData < length) {
     bbe:	d6 cf       	rjmp	.-84     	; 0xb6c <_Z15readFromRegAddrhhPvj8endian_e+0x6a>
    byteArray[endianness == BIG_ENDIAN ? readData : length - 1 - readData] = Wire.read();
     bc0:	c5 01       	movw	r24, r10
     bc2:	f0 cf       	rjmp	.-32     	; 0xba4 <_Z15readFromRegAddrhhPvj8endian_e+0xa2>
  if ((ret = Wire.endTransmission(true)) != 0) {
    return ret;
  }

  return 0;
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	bf 90       	pop	r11
     bd4:	af 90       	pop	r10
     bd6:	08 95       	ret

00000bd8 <catchSpaceboard>:
  float UVindex = si1132_uv.readUV();

  // the index is multiplied by 100 so to get the integer index, divide by 100
  UVindex /= 100.0;
  return UVindex;
}
     bd8:	0f 93       	push	r16
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <catchSpaceboard+0x8>
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <ARDUSAT_SPACEBOARD>
     be8:	81 11       	cpse	r24, r1
     bea:	26 c0       	rjmp	.+76     	; 0xc38 <catchSpaceboard+0x60>
     bec:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <MANUAL_CONFIG>
     bf0:	81 11       	cpse	r24, r1
     bf2:	22 c0       	rjmp	.+68     	; 0xc38 <catchSpaceboard+0x60>
     bf4:	84 ea       	ldi	r24, 0xA4	; 164
     bf6:	93 e0       	ldi	r25, 0x03	; 3
     bf8:	0e 94 b3 18 	call	0x3166	; 0x3166 <_ZN7TwoWire5beginEv>
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	21 e0       	ldi	r18, 0x01	; 1
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	ae 01       	movw	r20, r28
     c04:	4e 5f       	subi	r20, 0xFE	; 254
     c06:	5f 4f       	sbci	r21, 0xFF	; 255
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	84 e4       	ldi	r24, 0x44	; 68
     c0c:	0e 94 81 05 	call	0xb02	; 0xb02 <_Z15readFromRegAddrhhPvj8endian_e>
     c10:	21 e0       	ldi	r18, 0x01	; 1
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	ae 01       	movw	r20, r28
     c16:	4f 5f       	subi	r20, 0xFF	; 255
     c18:	5f 4f       	sbci	r21, 0xFF	; 255
     c1a:	62 e9       	ldi	r22, 0x92	; 146
     c1c:	89 e2       	ldi	r24, 0x29	; 41
     c1e:	0e 94 81 05 	call	0xb02	; 0xb02 <_Z15readFromRegAddrhhPvj8endian_e>
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	8d 37       	cpi	r24, 0x7D	; 125
     c26:	41 f4       	brne	.+16     	; 0xc38 <catchSpaceboard+0x60>
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	84 34       	cpi	r24, 0x44	; 68
     c2c:	11 f0       	breq	.+4      	; 0xc32 <catchSpaceboard+0x5a>
     c2e:	80 31       	cpi	r24, 0x10	; 16
     c30:	19 f4       	brne	.+6      	; 0xc38 <catchSpaceboard+0x60>
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <ARDUSAT_SPACEBOARD>
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	0f 91       	pop	r16
     c42:	08 95       	ret

00000c44 <_Z18_lsm303_mag_config18lsm303_mag_scale_e>:
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	cf 93       	push	r28
     c4e:	e8 2f       	mov	r30, r24
     c50:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <_ZL20_lsm303_d_mag_config>
     c54:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <lsm+0xd>
     c58:	ce 2e       	mov	r12, r30
     c5a:	d1 2c       	mov	r13, r1
     c5c:	83 30       	cpi	r24, 0x03	; 3
     c5e:	99 f5       	brne	.+102    	; 0xcc6 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0x82>
     c60:	44 e6       	ldi	r20, 0x64	; 100
     c62:	64 e2       	ldi	r22, 0x24	; 36
     c64:	8c e3       	ldi	r24, 0x3C	; 60
     c66:	92 e0       	ldi	r25, 0x02	; 2
     c68:	0e 94 23 08 	call	0x1046	; 0x1046 <_ZN6LSM3038writeRegEhh>
     c6c:	88 e0       	ldi	r24, 0x08	; 8
     c6e:	c8 16       	cp	r12, r24
     c70:	d1 04       	cpc	r13, r1
     c72:	c0 f4       	brcc	.+48     	; 0xca4 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0x60>
     c74:	f6 01       	movw	r30, r12
     c76:	ec 5c       	subi	r30, 0xCC	; 204
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	0c 94 8a 1d 	jmp	0x3b14	; 0x3b14 <__tablejump2__>
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <_ZL20_lsm303_d_mag_config>
     c84:	c0 e0       	ldi	r28, 0x00	; 0
     c86:	0e c0       	rjmp	.+28     	; 0xca4 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0x60>
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <_ZL20_lsm303_d_mag_config>
     c8e:	c0 e2       	ldi	r28, 0x20	; 32
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0x60>
     c92:	86 e0       	ldi	r24, 0x06	; 6
     c94:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <_ZL20_lsm303_d_mag_config>
     c98:	c0 e4       	ldi	r28, 0x40	; 64
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0x60>
     c9c:	87 e0       	ldi	r24, 0x07	; 7
     c9e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <_ZL20_lsm303_d_mag_config>
     ca2:	c0 e6       	ldi	r28, 0x60	; 96
     ca4:	4c 2f       	mov	r20, r28
     ca6:	65 e2       	ldi	r22, 0x25	; 37
     ca8:	8c e3       	ldi	r24, 0x3C	; 60
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 23 08 	call	0x1046	; 0x1046 <_ZN6LSM3038writeRegEhh>
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	66 e2       	ldi	r22, 0x26	; 38
     cb4:	8c e3       	ldi	r24, 0x3C	; 60
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	cf 91       	pop	r28
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	0c 94 23 08 	jmp	0x1046	; 0x1046 <_ZN6LSM3038writeRegEhh>
     cc6:	4c e0       	ldi	r20, 0x0C	; 12
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	8c e3       	ldi	r24, 0x3C	; 60
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	0e 94 03 08 	call	0x1006	; 0x1006 <_ZN6LSM30311writeMagRegEhh>
     cd2:	88 e0       	ldi	r24, 0x08	; 8
     cd4:	c8 16       	cp	r12, r24
     cd6:	d1 04       	cpc	r13, r1
     cd8:	a8 f4       	brcc	.+42     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cda:	f6 01       	movw	r30, r12
     cdc:	e4 5c       	subi	r30, 0xC4	; 196
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	0c 94 8a 1d 	jmp	0x3b14	; 0x3b14 <__tablejump2__>
     ce4:	c0 e2       	ldi	r28, 0x20	; 32
     ce6:	0e c0       	rjmp	.+28     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     ce8:	c0 e4       	ldi	r28, 0x40	; 64
     cea:	0c c0       	rjmp	.+24     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cec:	c0 e6       	ldi	r28, 0x60	; 96
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cf0:	c0 e8       	ldi	r28, 0x80	; 128
     cf2:	08 c0       	rjmp	.+16     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cf4:	c0 ea       	ldi	r28, 0xA0	; 160
     cf6:	06 c0       	rjmp	.+12     	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cf8:	c0 ec       	ldi	r28, 0xC0	; 192
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <_Z18_lsm303_mag_config18lsm303_mag_scale_e+0xc0>
     cfc:	86 e0       	ldi	r24, 0x06	; 6
     cfe:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <_ZL20_lsm303_d_mag_config>
     d02:	c0 ee       	ldi	r28, 0xE0	; 224
     d04:	4c 2f       	mov	r20, r28
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	8c e3       	ldi	r24, 0x3C	; 60
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	0e 94 03 08 	call	0x1006	; 0x1006 <_ZN6LSM30311writeMagRegEhh>
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	62 e0       	ldi	r22, 0x02	; 2
     d14:	8c e3       	ldi	r24, 0x3C	; 60
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	cf 91       	pop	r28
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	0c 94 03 08 	jmp	0x1006	; 0x1006 <_ZN6LSM30311writeMagRegEhh>

00000d26 <lsm303_mag_init>:
     d26:	cf 93       	push	r28
     d28:	c8 2f       	mov	r28, r24
     d2a:	84 ea       	ldi	r24, 0xA4	; 164
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 b3 18 	call	0x3166	; 0x3166 <_ZN7TwoWire5beginEv>
     d32:	42 e0       	ldi	r20, 0x02	; 2
     d34:	64 e0       	ldi	r22, 0x04	; 4
     d36:	8c e3       	ldi	r24, 0x3C	; 60
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	0e 94 04 09 	call	0x1208	; 0x1208 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE>
     d3e:	8c 2f       	mov	r24, r28
     d40:	0e 94 22 06 	call	0xc44	; 0xc44 <_Z18_lsm303_mag_config18lsm303_mag_scale_e>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <lsm303_getMag>:
     d4a:	4f 92       	push	r4
     d4c:	5f 92       	push	r5
     d4e:	6f 92       	push	r6
     d50:	7f 92       	push	r7
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	5c 01       	movw	r10, r24
     d68:	6b 01       	movw	r12, r22
     d6a:	7a 01       	movw	r14, r20
     d6c:	8c e3       	ldi	r24, 0x3C	; 60
     d6e:	92 e0       	ldi	r25, 0x02	; 2
     d70:	0e 94 2d 08 	call	0x105a	; 0x105a <_ZN6LSM3037readMagEv>
     d74:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <lsm+0xd>
     d78:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <_ZL20_lsm303_d_mag_config>
     d7c:	60 91 42 02 	lds	r22, 0x0242	; 0x800242 <lsm+0x6>
     d80:	70 91 43 02 	lds	r23, 0x0243	; 0x800243 <lsm+0x7>
     d84:	00 91 44 02 	lds	r16, 0x0244	; 0x800244 <lsm+0x8>
     d88:	10 91 45 02 	lds	r17, 0x0245	; 0x800245 <lsm+0x9>
     d8c:	c0 91 46 02 	lds	r28, 0x0246	; 0x800246 <lsm+0xa>
     d90:	d0 91 47 02 	lds	r29, 0x0247	; 0x800247 <lsm+0xb>
     d94:	83 30       	cpi	r24, 0x03	; 3
     d96:	09 f0       	breq	.+2      	; 0xd9a <lsm303_getMag+0x50>
     d98:	65 c0       	rjmp	.+202    	; 0xe64 <lsm303_getMag+0x11a>
     d9a:	e3 30       	cpi	r30, 0x03	; 3
     d9c:	c9 f0       	breq	.+50     	; 0xdd0 <lsm303_getMag+0x86>
     d9e:	58 f4       	brcc	.+22     	; 0xdb6 <lsm303_getMag+0x6c>
     da0:	e1 30       	cpi	r30, 0x01	; 1
     da2:	39 f5       	brne	.+78     	; 0xdf2 <lsm303_getMag+0xa8>
     da4:	8a e0       	ldi	r24, 0x0A	; 10
     da6:	48 2e       	mov	r4, r24
     da8:	87 ed       	ldi	r24, 0xD7	; 215
     daa:	58 2e       	mov	r5, r24
     dac:	83 ea       	ldi	r24, 0xA3	; 163
     dae:	68 2e       	mov	r6, r24
     db0:	8d e3       	ldi	r24, 0x3D	; 61
     db2:	78 2e       	mov	r7, r24
     db4:	1e c0       	rjmp	.+60     	; 0xdf2 <lsm303_getMag+0xa8>
     db6:	e6 30       	cpi	r30, 0x06	; 6
     db8:	a1 f0       	breq	.+40     	; 0xde2 <lsm303_getMag+0x98>
     dba:	e7 30       	cpi	r30, 0x07	; 7
     dbc:	d1 f4       	brne	.+52     	; 0xdf2 <lsm303_getMag+0xa8>
     dbe:	fd e7       	ldi	r31, 0x7D	; 125
     dc0:	4f 2e       	mov	r4, r31
     dc2:	ff e3       	ldi	r31, 0x3F	; 63
     dc4:	5f 2e       	mov	r5, r31
     dc6:	f5 ef       	ldi	r31, 0xF5	; 245
     dc8:	6f 2e       	mov	r6, r31
     dca:	fe e3       	ldi	r31, 0x3E	; 62
     dcc:	7f 2e       	mov	r7, r31
     dce:	11 c0       	rjmp	.+34     	; 0xdf2 <lsm303_getMag+0xa8>
     dd0:	ba e0       	ldi	r27, 0x0A	; 10
     dd2:	4b 2e       	mov	r4, r27
     dd4:	b7 ed       	ldi	r27, 0xD7	; 215
     dd6:	5b 2e       	mov	r5, r27
     dd8:	b3 e2       	ldi	r27, 0x23	; 35
     dda:	6b 2e       	mov	r6, r27
     ddc:	be e3       	ldi	r27, 0x3E	; 62
     dde:	7b 2e       	mov	r7, r27
     de0:	08 c0       	rjmp	.+16     	; 0xdf2 <lsm303_getMag+0xa8>
     de2:	aa e0       	ldi	r26, 0x0A	; 10
     de4:	4a 2e       	mov	r4, r26
     de6:	a7 ed       	ldi	r26, 0xD7	; 215
     de8:	5a 2e       	mov	r5, r26
     dea:	a3 ea       	ldi	r26, 0xA3	; 163
     dec:	6a 2e       	mov	r6, r26
     dee:	ae e3       	ldi	r26, 0x3E	; 62
     df0:	7a 2e       	mov	r7, r26
     df2:	07 2e       	mov	r0, r23
     df4:	00 0c       	add	r0, r0
     df6:	88 0b       	sbc	r24, r24
     df8:	99 0b       	sbc	r25, r25
     dfa:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
     dfe:	a3 01       	movw	r20, r6
     e00:	92 01       	movw	r18, r4
     e02:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
     e06:	2d ec       	ldi	r18, 0xCD	; 205
     e08:	3c ec       	ldi	r19, 0xCC	; 204
     e0a:	4c ec       	ldi	r20, 0xCC	; 204
     e0c:	5d e3       	ldi	r21, 0x3D	; 61
     e0e:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
     e12:	f5 01       	movw	r30, r10
     e14:	60 83       	st	Z, r22
     e16:	71 83       	std	Z+1, r23	; 0x01
     e18:	82 83       	std	Z+2, r24	; 0x02
     e1a:	93 83       	std	Z+3, r25	; 0x03
     e1c:	b8 01       	movw	r22, r16
     e1e:	11 0f       	add	r17, r17
     e20:	88 0b       	sbc	r24, r24
     e22:	99 0b       	sbc	r25, r25
     e24:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
     e28:	a3 01       	movw	r20, r6
     e2a:	92 01       	movw	r18, r4
     e2c:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
     e30:	2d ec       	ldi	r18, 0xCD	; 205
     e32:	3c ec       	ldi	r19, 0xCC	; 204
     e34:	4c ec       	ldi	r20, 0xCC	; 204
     e36:	5d e3       	ldi	r21, 0x3D	; 61
     e38:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
     e3c:	f6 01       	movw	r30, r12
     e3e:	60 83       	st	Z, r22
     e40:	71 83       	std	Z+1, r23	; 0x01
     e42:	82 83       	std	Z+2, r24	; 0x02
     e44:	93 83       	std	Z+3, r25	; 0x03
     e46:	be 01       	movw	r22, r28
     e48:	dd 0f       	add	r29, r29
     e4a:	88 0b       	sbc	r24, r24
     e4c:	99 0b       	sbc	r25, r25
     e4e:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
     e52:	a3 01       	movw	r20, r6
     e54:	92 01       	movw	r18, r4
     e56:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
     e5a:	2d ec       	ldi	r18, 0xCD	; 205
     e5c:	3c ec       	ldi	r19, 0xCC	; 204
     e5e:	4c ec       	ldi	r20, 0xCC	; 204
     e60:	5d e3       	ldi	r21, 0x3D	; 61
     e62:	75 c0       	rjmp	.+234    	; 0xf4e <lsm303_getMag+0x204>
     e64:	8e 2f       	mov	r24, r30
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	87 30       	cpi	r24, 0x07	; 7
     e6a:	91 05       	cpc	r25, r1
     e6c:	c0 f5       	brcc	.+112    	; 0xede <lsm303_getMag+0x194>
     e6e:	fc 01       	movw	r30, r24
     e70:	ec 5b       	subi	r30, 0xBC	; 188
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	0c 94 8a 1d 	jmp	0x3b14	; 0x3b14 <__tablejump2__>
     e78:	41 2c       	mov	r4, r1
     e7a:	e0 e8       	ldi	r30, 0x80	; 128
     e7c:	5e 2e       	mov	r5, r30
     e7e:	e9 e8       	ldi	r30, 0x89	; 137
     e80:	6e 2e       	mov	r6, r30
     e82:	e4 e4       	ldi	r30, 0x44	; 68
     e84:	7e 2e       	mov	r7, r30
     e86:	2b c0       	rjmp	.+86     	; 0xede <lsm303_getMag+0x194>
     e88:	41 2c       	mov	r4, r1
     e8a:	50 ec       	ldi	r21, 0xC0	; 192
     e8c:	55 2e       	mov	r5, r21
     e8e:	55 e5       	ldi	r21, 0x55	; 85
     e90:	65 2e       	mov	r6, r21
     e92:	54 e4       	ldi	r21, 0x44	; 68
     e94:	75 2e       	mov	r7, r21
     e96:	23 c0       	rjmp	.+70     	; 0xede <lsm303_getMag+0x194>
     e98:	41 2c       	mov	r4, r1
     e9a:	40 e8       	ldi	r20, 0x80	; 128
     e9c:	54 2e       	mov	r5, r20
     e9e:	47 e2       	ldi	r20, 0x27	; 39
     ea0:	64 2e       	mov	r6, r20
     ea2:	44 e4       	ldi	r20, 0x44	; 68
     ea4:	74 2e       	mov	r7, r20
     ea6:	1b c0       	rjmp	.+54     	; 0xede <lsm303_getMag+0x194>
     ea8:	41 2c       	mov	r4, r1
     eaa:	51 2c       	mov	r5, r1
     eac:	31 ee       	ldi	r19, 0xE1	; 225
     eae:	63 2e       	mov	r6, r19
     eb0:	33 e4       	ldi	r19, 0x43	; 67
     eb2:	73 2e       	mov	r7, r19
     eb4:	14 c0       	rjmp	.+40     	; 0xede <lsm303_getMag+0x194>
     eb6:	41 2c       	mov	r4, r1
     eb8:	51 2c       	mov	r5, r1
     eba:	28 ec       	ldi	r18, 0xC8	; 200
     ebc:	62 2e       	mov	r6, r18
     ebe:	23 e4       	ldi	r18, 0x43	; 67
     ec0:	72 2e       	mov	r7, r18
     ec2:	0d c0       	rjmp	.+26     	; 0xede <lsm303_getMag+0x194>
     ec4:	41 2c       	mov	r4, r1
     ec6:	51 2c       	mov	r5, r1
     ec8:	95 ea       	ldi	r25, 0xA5	; 165
     eca:	69 2e       	mov	r6, r25
     ecc:	93 e4       	ldi	r25, 0x43	; 67
     ece:	79 2e       	mov	r7, r25
     ed0:	06 c0       	rjmp	.+12     	; 0xede <lsm303_getMag+0x194>
     ed2:	41 2c       	mov	r4, r1
     ed4:	51 2c       	mov	r5, r1
     ed6:	86 e6       	ldi	r24, 0x66	; 102
     ed8:	68 2e       	mov	r6, r24
     eda:	83 e4       	ldi	r24, 0x43	; 67
     edc:	78 2e       	mov	r7, r24
     ede:	07 2e       	mov	r0, r23
     ee0:	00 0c       	add	r0, r0
     ee2:	88 0b       	sbc	r24, r24
     ee4:	99 0b       	sbc	r25, r25
     ee6:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
     eea:	a3 01       	movw	r20, r6
     eec:	92 01       	movw	r18, r4
     eee:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	48 ec       	ldi	r20, 0xC8	; 200
     ef8:	52 e4       	ldi	r21, 0x42	; 66
     efa:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
     efe:	f5 01       	movw	r30, r10
     f00:	60 83       	st	Z, r22
     f02:	71 83       	std	Z+1, r23	; 0x01
     f04:	82 83       	std	Z+2, r24	; 0x02
     f06:	93 83       	std	Z+3, r25	; 0x03
     f08:	b8 01       	movw	r22, r16
     f0a:	11 0f       	add	r17, r17
     f0c:	88 0b       	sbc	r24, r24
     f0e:	99 0b       	sbc	r25, r25
     f10:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
     f14:	a3 01       	movw	r20, r6
     f16:	92 01       	movw	r18, r4
     f18:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	48 ec       	ldi	r20, 0xC8	; 200
     f22:	52 e4       	ldi	r21, 0x42	; 66
     f24:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
     f28:	f6 01       	movw	r30, r12
     f2a:	60 83       	st	Z, r22
     f2c:	71 83       	std	Z+1, r23	; 0x01
     f2e:	82 83       	std	Z+2, r24	; 0x02
     f30:	93 83       	std	Z+3, r25	; 0x03
     f32:	be 01       	movw	r22, r28
     f34:	dd 0f       	add	r29, r29
     f36:	88 0b       	sbc	r24, r24
     f38:	99 0b       	sbc	r25, r25
     f3a:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
     f3e:	a3 01       	movw	r20, r6
     f40:	92 01       	movw	r18, r4
     f42:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	48 ec       	ldi	r20, 0xC8	; 200
     f4c:	52 e4       	ldi	r21, 0x42	; 66
     f4e:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
     f52:	f7 01       	movw	r30, r14
     f54:	60 83       	st	Z, r22
     f56:	71 83       	std	Z+1, r23	; 0x01
     f58:	82 83       	std	Z+2, r24	; 0x02
     f5a:	93 83       	std	Z+3, r25	; 0x03
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	7f 90       	pop	r7
     f72:	6f 90       	pop	r6
     f74:	5f 90       	pop	r5
     f76:	4f 90       	pop	r4
     f78:	08 95       	ret

00000f7a <_GLOBAL__sub_I_catchSpaceboard>:
 * http://www.st.com/web/en/resource/technical/document/datasheet/DM00057547.pdf
 *
 * LSM303_DLHC Datasheet:
 * https://www.adafruit.com/datasheets/LSM303DLHC.PDF
 */
LSM303 lsm;
     f7a:	8c e3       	ldi	r24, 0x3C	; 60
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <_ZN6LSM303C1Ev>
/**
 * Inits the ML8511 breakout board UV sensor
 *
 * @return true
 */
ML8511_ADC ml8511_uv_adc = ML8511_ADC(DRIVER_ML8511_ADDR);
     f82:	61 e5       	ldi	r22, 0x51	; 81
     f84:	8b e3       	ldi	r24, 0x3B	; 59
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <_ZN10ML8511_ADCC1Eh>


/*
 * ISL29125 RGB Light Sensor
 */
SFE_ISL29125 isl29125 = SFE_ISL29125(DRIVER_SPACEBOARD_ISL29125_ADDR);
     f8c:	64 e4       	ldi	r22, 0x44	; 68
     f8e:	8a e3       	ldi	r24, 0x3A	; 58
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_ZN12SFE_ISL29125C1Eh>


/*
 * TCS34725 RGB Light Sensor
 */
Adafruit_TCS34725 tcs34725 = Adafruit_TCS34725();
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	6f ef       	ldi	r22, 0xFF	; 255
     f9a:	87 e3       	ldi	r24, 0x37	; 55
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_ZN17Adafruit_TCS34725C1E25tcs34725IntegrationTime_t14tcs34725Gain_t>


/*
 * SI1132 UV Light Sensor
 */
Adafruit_SI1145 si1132_uv = Adafruit_SI1145();
     fa2:	86 e3       	ldi	r24, 0x36	; 54
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <_ZN15Adafruit_SI1145C1Ev>

00000faa <_GLOBAL__sub_D_catchSpaceboard>:


/*
 * ISL29125 RGB Light Sensor
 */
SFE_ISL29125 isl29125 = SFE_ISL29125(DRIVER_SPACEBOARD_ISL29125_ADDR);
     faa:	8a e3       	ldi	r24, 0x3A	; 58
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <_ZN12SFE_ISL29125D1Ev>

00000fb2 <_ZN10ML8511_ADCC1Eh>:
#define read16(reg, val) readFromRegAddr(_addr, reg, val, 2, LITTLE_ENDIAN)
#define write8(reg, val) writeToRegAddr(_addr, reg, val, 1, LITTLE_ENDIAN)

// Constructor
ML8511_ADC::ML8511_ADC(uint8_t sensor_addr) :
  _addr(sensor_addr)
     fb2:	fc 01       	movw	r30, r24
     fb4:	60 83       	st	Z, r22
     fb6:	08 95       	ret

00000fb8 <_ZN6LSM303C1Ev>:

// Reads all 6 channels of the LSM303 and stores them in the object variables
void LSM303::read(void)
{
  readAcc();
  readMag();
     fb8:	fc 01       	movw	r30, r24
     fba:	84 e0       	ldi	r24, 0x04	; 4
     fbc:	85 87       	std	Z+13, r24	; 0x0d
     fbe:	10 8e       	std	Z+24, r1	; 0x18
     fc0:	17 8a       	std	Z+23, r1	; 0x17
     fc2:	11 8e       	std	Z+25, r1	; 0x19
     fc4:	08 95       	ret

00000fc6 <_ZN6LSM30311writeAccRegEhh>:
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
     fd0:	06 2f       	mov	r16, r22
     fd2:	14 2f       	mov	r17, r20
     fd4:	6e 85       	ldd	r22, Y+14	; 0x0e
     fd6:	84 ea       	ldi	r24, 0xA4	; 164
     fd8:	93 e0       	ldi	r25, 0x03	; 3
     fda:	0e 94 bd 18 	call	0x317a	; 0x317a <_ZN7TwoWire17beginTransmissionEh>
     fde:	60 2f       	mov	r22, r16
     fe0:	84 ea       	ldi	r24, 0xA4	; 164
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	0e 94 74 18 	call	0x30e8	; 0x30e8 <_ZN7TwoWire5writeEh>
     fe8:	61 2f       	mov	r22, r17
     fea:	84 ea       	ldi	r24, 0xA4	; 164
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	0e 94 74 18 	call	0x30e8	; 0x30e8 <_ZN7TwoWire5writeEh>
     ff2:	84 ea       	ldi	r24, 0xA4	; 164
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	0e 94 41 19 	call	0x3282	; 0x3282 <_ZN7TwoWire15endTransmissionEv>
     ffa:	8c 87       	std	Y+12, r24	; 0x0c
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	08 95       	ret

00001006 <_ZN6LSM30311writeMagRegEhh>:
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	ec 01       	movw	r28, r24
    1010:	06 2f       	mov	r16, r22
    1012:	14 2f       	mov	r17, r20
    1014:	6f 85       	ldd	r22, Y+15	; 0x0f
    1016:	84 ea       	ldi	r24, 0xA4	; 164
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	0e 94 bd 18 	call	0x317a	; 0x317a <_ZN7TwoWire17beginTransmissionEh>
    101e:	60 2f       	mov	r22, r16
    1020:	84 ea       	ldi	r24, 0xA4	; 164
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	0e 94 74 18 	call	0x30e8	; 0x30e8 <_ZN7TwoWire5writeEh>
    1028:	61 2f       	mov	r22, r17
    102a:	84 ea       	ldi	r24, 0xA4	; 164
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <_ZN7TwoWire5writeEh>
    1032:	84 ea       	ldi	r24, 0xA4	; 164
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	0e 94 41 19 	call	0x3282	; 0x3282 <_ZN7TwoWire15endTransmissionEv>
    103a:	8c 87       	std	Y+12, r24	; 0x0c
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	08 95       	ret

00001046 <_ZN6LSM3038writeRegEhh>:
    1046:	fc 01       	movw	r30, r24
    1048:	25 85       	ldd	r18, Z+13	; 0x0d
    104a:	23 30       	cpi	r18, 0x03	; 3
    104c:	11 f0       	breq	.+4      	; 0x1052 <_ZN6LSM3038writeRegEhh+0xc>
    104e:	60 32       	cpi	r22, 0x20	; 32
    1050:	10 f4       	brcc	.+4      	; 0x1056 <_ZN6LSM3038writeRegEhh+0x10>
    1052:	0c 94 03 08 	jmp	0x1006	; 0x1006 <_ZN6LSM30311writeMagRegEhh>
    1056:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <_ZN6LSM30311writeAccRegEhh>

0000105a <_ZN6LSM3037readMagEv>:
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	6f 85       	ldd	r22, Y+15	; 0x0f
    106e:	84 ea       	ldi	r24, 0xA4	; 164
    1070:	93 e0       	ldi	r25, 0x03	; 3
    1072:	0e 94 bd 18 	call	0x317a	; 0x317a <_ZN7TwoWire17beginTransmissionEh>
    1076:	8d 85       	ldd	r24, Y+13	; 0x0d
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	19 f4       	brne	.+6      	; 0x1082 <_ZN6LSM3037readMagEv+0x28>
    107c:	6a 89       	ldd	r22, Y+18	; 0x12
    107e:	60 68       	ori	r22, 0x80	; 128
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <_ZN6LSM3037readMagEv+0x2a>
    1082:	69 89       	ldd	r22, Y+17	; 0x11
    1084:	84 ea       	ldi	r24, 0xA4	; 164
    1086:	93 e0       	ldi	r25, 0x03	; 3
    1088:	0e 94 74 18 	call	0x30e8	; 0x30e8 <_ZN7TwoWire5writeEh>
    108c:	84 ea       	ldi	r24, 0xA4	; 164
    108e:	93 e0       	ldi	r25, 0x03	; 3
    1090:	0e 94 41 19 	call	0x3282	; 0x3282 <_ZN7TwoWire15endTransmissionEv>
    1094:	8c 87       	std	Y+12, r24	; 0x0c
    1096:	46 e0       	ldi	r20, 0x06	; 6
    1098:	6f 85       	ldd	r22, Y+15	; 0x0f
    109a:	84 ea       	ldi	r24, 0xA4	; 164
    109c:	93 e0       	ldi	r25, 0x03	; 3
    109e:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN7TwoWire11requestFromEhh>
    10a2:	0e 94 92 19 	call	0x3324	; 0x3324 <millis>
    10a6:	8b 01       	movw	r16, r22
    10a8:	84 ea       	ldi	r24, 0xA4	; 164
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	0e 94 1b 18 	call	0x3036	; 0x3036 <_ZN7TwoWire9availableEv>
    10b0:	06 97       	sbiw	r24, 0x06	; 6
    10b2:	84 f4       	brge	.+32     	; 0x10d4 <_ZN6LSM3037readMagEv+0x7a>
    10b4:	8f 89       	ldd	r24, Y+23	; 0x17
    10b6:	98 8d       	ldd	r25, Y+24	; 0x18
    10b8:	89 2b       	or	r24, r25
    10ba:	b1 f3       	breq	.-20     	; 0x10a8 <_ZN6LSM3037readMagEv+0x4e>
    10bc:	0e 94 92 19 	call	0x3324	; 0x3324 <millis>
    10c0:	60 1b       	sub	r22, r16
    10c2:	71 0b       	sbc	r23, r17
    10c4:	8f 89       	ldd	r24, Y+23	; 0x17
    10c6:	98 8d       	ldd	r25, Y+24	; 0x18
    10c8:	86 17       	cp	r24, r22
    10ca:	97 07       	cpc	r25, r23
    10cc:	68 f7       	brcc	.-38     	; 0x10a8 <_ZN6LSM3037readMagEv+0x4e>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	89 8f       	std	Y+25, r24	; 0x19
    10d2:	67 c0       	rjmp	.+206    	; 0x11a2 <_ZN6LSM3037readMagEv+0x148>
    10d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	f9 f4       	brne	.+62     	; 0x1118 <_ZN6LSM3037readMagEv+0xbe>
    10da:	84 ea       	ldi	r24, 0xA4	; 164
    10dc:	93 e0       	ldi	r25, 0x03	; 3
    10de:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    10e2:	f8 2e       	mov	r15, r24
    10e4:	84 ea       	ldi	r24, 0xA4	; 164
    10e6:	93 e0       	ldi	r25, 0x03	; 3
    10e8:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    10ec:	c8 2e       	mov	r12, r24
    10ee:	84 ea       	ldi	r24, 0xA4	; 164
    10f0:	93 e0       	ldi	r25, 0x03	; 3
    10f2:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    10f6:	08 2f       	mov	r16, r24
    10f8:	84 ea       	ldi	r24, 0xA4	; 164
    10fa:	93 e0       	ldi	r25, 0x03	; 3
    10fc:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    1100:	d8 2e       	mov	r13, r24
    1102:	84 ea       	ldi	r24, 0xA4	; 164
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    110a:	18 2f       	mov	r17, r24
    110c:	84 ea       	ldi	r24, 0xA4	; 164
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    1114:	e8 2e       	mov	r14, r24
    1116:	36 c0       	rjmp	.+108    	; 0x1184 <_ZN6LSM3037readMagEv+0x12a>
    1118:	84 ea       	ldi	r24, 0xA4	; 164
    111a:	93 e0       	ldi	r25, 0x03	; 3
    111c:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    1120:	c8 2e       	mov	r12, r24
    1122:	84 ea       	ldi	r24, 0xA4	; 164
    1124:	93 e0       	ldi	r25, 0x03	; 3
    1126:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    112a:	f8 2e       	mov	r15, r24
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	81 11       	cpse	r24, r1
    1130:	15 c0       	rjmp	.+42     	; 0x115c <_ZN6LSM3037readMagEv+0x102>
    1132:	84 ea       	ldi	r24, 0xA4	; 164
    1134:	93 e0       	ldi	r25, 0x03	; 3
    1136:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    113a:	d8 2e       	mov	r13, r24
    113c:	84 ea       	ldi	r24, 0xA4	; 164
    113e:	93 e0       	ldi	r25, 0x03	; 3
    1140:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    1144:	08 2f       	mov	r16, r24
    1146:	84 ea       	ldi	r24, 0xA4	; 164
    1148:	93 e0       	ldi	r25, 0x03	; 3
    114a:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    114e:	e8 2e       	mov	r14, r24
    1150:	84 ea       	ldi	r24, 0xA4	; 164
    1152:	93 e0       	ldi	r25, 0x03	; 3
    1154:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    1158:	18 2f       	mov	r17, r24
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <_ZN6LSM3037readMagEv+0x12a>
    115c:	84 ea       	ldi	r24, 0xA4	; 164
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    1164:	e8 2e       	mov	r14, r24
    1166:	84 ea       	ldi	r24, 0xA4	; 164
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    116e:	18 2f       	mov	r17, r24
    1170:	84 ea       	ldi	r24, 0xA4	; 164
    1172:	93 e0       	ldi	r25, 0x03	; 3
    1174:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    1178:	d8 2e       	mov	r13, r24
    117a:	84 ea       	ldi	r24, 0xA4	; 164
    117c:	93 e0       	ldi	r25, 0x03	; 3
    117e:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
    1182:	08 2f       	mov	r16, r24
    1184:	8f 2d       	mov	r24, r15
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9c 29       	or	r25, r12
    118a:	9f 83       	std	Y+7, r25	; 0x07
    118c:	8e 83       	std	Y+6, r24	; 0x06
    118e:	80 2f       	mov	r24, r16
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9d 29       	or	r25, r13
    1194:	99 87       	std	Y+9, r25	; 0x09
    1196:	88 87       	std	Y+8, r24	; 0x08
    1198:	81 2f       	mov	r24, r17
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	9e 29       	or	r25, r14
    119e:	9b 87       	std	Y+11, r25	; 0x0b
    11a0:	8a 87       	std	Y+10, r24	; 0x0a
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	cf 90       	pop	r12
    11b2:	08 95       	ret

000011b4 <_ZN6LSM3037testRegEhh>:
}

// Private Methods //////////////////////////////////////////////////////////////

int LSM303::testReg(byte address, uint8_t reg)
{
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	c6 2f       	mov	r28, r22
    11ba:	d4 2f       	mov	r29, r20
  Wire.beginTransmission(address);
    11bc:	84 ea       	ldi	r24, 0xA4	; 164
    11be:	93 e0       	ldi	r25, 0x03	; 3
    11c0:	0e 94 bd 18 	call	0x317a	; 0x317a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((byte)reg);
    11c4:	6d 2f       	mov	r22, r29
    11c6:	84 ea       	ldi	r24, 0xA4	; 164
    11c8:	93 e0       	ldi	r25, 0x03	; 3
    11ca:	0e 94 74 18 	call	0x30e8	; 0x30e8 <_ZN7TwoWire5writeEh>
  if (Wire.endTransmission() != 0)
    11ce:	84 ea       	ldi	r24, 0xA4	; 164
    11d0:	93 e0       	ldi	r25, 0x03	; 3
    11d2:	0e 94 41 19 	call	0x3282	; 0x3282 <_ZN7TwoWire15endTransmissionEv>
    11d6:	81 11       	cpse	r24, r1
    11d8:	12 c0       	rjmp	.+36     	; 0x11fe <_ZN6LSM3037testRegEhh+0x4a>
  {
    return TEST_REG_ERROR;
  }

  Wire.requestFrom(address, (byte)1);
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	6c 2f       	mov	r22, r28
    11de:	84 ea       	ldi	r24, 0xA4	; 164
    11e0:	93 e0       	ldi	r25, 0x03	; 3
    11e2:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN7TwoWire11requestFromEhh>
  if (Wire.available())
    11e6:	84 ea       	ldi	r24, 0xA4	; 164
    11e8:	93 e0       	ldi	r25, 0x03	; 3
    11ea:	0e 94 1b 18 	call	0x3036	; 0x3036 <_ZN7TwoWire9availableEv>
    11ee:	89 2b       	or	r24, r25
    11f0:	31 f0       	breq	.+12     	; 0x11fe <_ZN6LSM3037testRegEhh+0x4a>
  {
    return Wire.read();
    11f2:	84 ea       	ldi	r24, 0xA4	; 164
    11f4:	93 e0       	ldi	r25, 0x03	; 3
  }
  else
  {
    return TEST_REG_ERROR;
  }
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
  }

  Wire.requestFrom(address, (byte)1);
  if (Wire.available())
  {
    return Wire.read();
    11fa:	0c 94 23 18 	jmp	0x3046	; 0x3046 <_ZN7TwoWire4readEv>
  }
  else
  {
    return TEST_REG_ERROR;
  }
}
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE>:
}

// Public Methods //////////////////////////////////////////////////////////////

bool LSM303::init(deviceType device, sa0State sa0)
{
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	ec 01       	movw	r28, r24
    1212:	16 2f       	mov	r17, r22
    1214:	04 2f       	mov	r16, r20
  // perform auto-detection unless device type and SA0 state were both specified
  if (device == device_auto || sa0 == sa0_auto)
    1216:	64 30       	cpi	r22, 0x04	; 4
    1218:	19 f0       	breq	.+6      	; 0x1220 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x18>
    121a:	42 30       	cpi	r20, 0x02	; 2
    121c:	09 f0       	breq	.+2      	; 0x1220 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x18>
    121e:	40 c0       	rjmp	.+128    	; 0x12a0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
  {
    // check for LSM303D if device is unidentified or was specified to be this type
    if (device == device_auto || device == device_D)
    1220:	8d ef       	ldi	r24, 0xFD	; 253
    1222:	81 0f       	add	r24, r17
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	c8 f4       	brcc	.+50     	; 0x125a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x52>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
    1228:	00 23       	and	r16, r16
    122a:	61 f0       	breq	.+24     	; 0x1244 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x3c>
    122c:	4f e0       	ldi	r20, 0x0F	; 15
    122e:	6d e1       	ldi	r22, 0x1D	; 29
    1230:	ce 01       	movw	r24, r28
    1232:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
    1236:	89 34       	cpi	r24, 0x49	; 73
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x36>
    123c:	8f c0       	rjmp	.+286    	; 0x135c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x154>
        // device responds to address 0011101 with D ID; it's a D with SA0 high
        device = device_D;
        sa0 = sa0_high;
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(D_SA0_LOW_ADDRESS, WHO_AM_I) == D_WHO_ID)
    123e:	01 30       	cpi	r16, 0x01	; 1
    1240:	09 f4       	brne	.+2      	; 0x1244 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x3c>
    1242:	95 c0       	rjmp	.+298    	; 0x136e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x166>
    1244:	4f e0       	ldi	r20, 0x0F	; 15
    1246:	6e e1       	ldi	r22, 0x1E	; 30
    1248:	ce 01       	movw	r24, r28
    124a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
    124e:	89 34       	cpi	r24, 0x49	; 73
    1250:	91 05       	cpc	r25, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x4e>
    1254:	85 c0       	rjmp	.+266    	; 0x1360 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x158>
        sa0 = sa0_low;
      }
    }
    
    // check for LSM303DLHC, DLM, DLH if device is still unidentified or was specified to be one of these types
    if (device == device_auto || device == device_DLHC || device == device_DLM || device == device_DLH)
    1256:	14 30       	cpi	r17, 0x04	; 4
    1258:	31 f0       	breq	.+12     	; 0x1266 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x5e>
    125a:	12 30       	cpi	r17, 0x02	; 2
    125c:	21 f0       	breq	.+8      	; 0x1266 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x5e>
    125e:	11 30       	cpi	r17, 0x01	; 1
    1260:	11 f0       	breq	.+4      	; 0x1266 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x5e>
    1262:	11 11       	cpse	r17, r1
    1264:	16 c0       	rjmp	.+44     	; 0x1292 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x8a>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
    1266:	00 23       	and	r16, r16
    1268:	51 f0       	breq	.+20     	; 0x127e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x76>
    126a:	40 e2       	ldi	r20, 0x20	; 32
    126c:	69 e1       	ldi	r22, 0x19	; 25
    126e:	ce 01       	movw	r24, r28
    1270:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	89 f4       	brne	.+34     	; 0x129a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x92>
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
        }
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
    1278:	01 30       	cpi	r16, 0x01	; 1
    127a:	09 f4       	brne	.+2      	; 0x127e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x76>
    127c:	74 c0       	rjmp	.+232    	; 0x1366 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x15e>
    127e:	40 e2       	ldi	r20, 0x20	; 32
    1280:	68 e1       	ldi	r22, 0x18	; 24
    1282:	ce 01       	movw	r24, r28
    1284:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	09 f0       	breq	.+2      	; 0x128e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x86>
    128c:	5a c0       	rjmp	.+180    	; 0x1342 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x13a>
        }
      }
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    128e:	14 30       	cpi	r17, 0x04	; 4
    1290:	11 f0       	breq	.+4      	; 0x1296 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x8e>
    1292:	02 30       	cpi	r16, 0x02	; 2
    1294:	29 f4       	brne	.+10     	; 0x12a0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
    {
      return false;
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	6e c0       	rjmp	.+220    	; 0x1376 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x16e>
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011001; it's a DLHC, DLM with SA0 high, or DLH with SA0 high
        sa0 = sa0_high;
        if (device == device_auto)
    129a:	14 30       	cpi	r17, 0x04	; 4
    129c:	c1 f1       	breq	.+112    	; 0x130e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x106>
    {
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011001; it's a DLHC, DLM with SA0 high, or DLH with SA0 high
        sa0 = sa0_high;
    129e:	01 e0       	ldi	r16, 0x01	; 1
    {
      return false;
    }
  }
  
  _device = device;
    12a0:	1d 87       	std	Y+13, r17	; 0x0d
  
  // set device addresses and translated register addresses
  switch (device)
    12a2:	11 30       	cpi	r17, 0x01	; 1
    12a4:	d1 f0       	breq	.+52     	; 0x12da <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xd2>
    12a6:	78 f1       	brcs	.+94     	; 0x1306 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xfe>
    12a8:	12 30       	cpi	r17, 0x02	; 2
    12aa:	e9 f0       	breq	.+58     	; 0x12e6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xde>
    12ac:	13 30       	cpi	r17, 0x03	; 3
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xaa>
    12b0:	46 c0       	rjmp	.+140    	; 0x133e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x136>
  {
    case device_D:
      acc_address = mag_address = (sa0 == sa0_high) ? D_SA0_HIGH_ADDRESS : D_SA0_LOW_ADDRESS;
    12b2:	01 30       	cpi	r16, 0x01	; 1
    12b4:	11 f0       	breq	.+4      	; 0x12ba <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xb2>
    12b6:	8e e1       	ldi	r24, 0x1E	; 30
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xb4>
    12ba:	8d e1       	ldi	r24, 0x1D	; 29
    12bc:	8f 87       	std	Y+15, r24	; 0x0f
    12be:	8e 87       	std	Y+14, r24	; 0x0e
      translated_regs[-OUT_X_L_M] = D_OUT_X_L_M;
    12c0:	88 e0       	ldi	r24, 0x08	; 8
    12c2:	8a 8b       	std	Y+18, r24	; 0x12
      translated_regs[-OUT_X_H_M] = D_OUT_X_H_M;
    12c4:	89 e0       	ldi	r24, 0x09	; 9
    12c6:	89 8b       	std	Y+17, r24	; 0x11
      translated_regs[-OUT_Y_L_M] = D_OUT_Y_L_M;
    12c8:	8a e0       	ldi	r24, 0x0A	; 10
    12ca:	8c 8b       	std	Y+20, r24	; 0x14
      translated_regs[-OUT_Y_H_M] = D_OUT_Y_H_M;
    12cc:	8b e0       	ldi	r24, 0x0B	; 11
    12ce:	8b 8b       	std	Y+19, r24	; 0x13
      translated_regs[-OUT_Z_L_M] = D_OUT_Z_L_M;
    12d0:	8c e0       	ldi	r24, 0x0C	; 12
    12d2:	8e 8b       	std	Y+22, r24	; 0x16
      translated_regs[-OUT_Z_H_M] = D_OUT_Z_H_M;
    12d4:	8d e0       	ldi	r24, 0x0D	; 13
    12d6:	8d 8b       	std	Y+21, r24	; 0x15
    12d8:	32 c0       	rjmp	.+100    	; 0x133e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x136>
      translated_regs[-OUT_Z_H_M] = DLHC_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLHC_OUT_Z_L_M;
      break;

    case device_DLM:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    12da:	01 30       	cpi	r16, 0x01	; 1
    12dc:	21 f0       	breq	.+8      	; 0x12e6 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xde>
    12de:	88 e1       	ldi	r24, 0x18	; 24
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xe0>
    {
      return false;
    }
  }
  
  _device = device;
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	8d 87       	std	Y+13, r24	; 0x0d
      translated_regs[-OUT_Z_H_M] = DLHC_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLHC_OUT_Z_L_M;
      break;

    case device_DLM:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    12e6:	89 e1       	ldi	r24, 0x19	; 25
    12e8:	8e 87       	std	Y+14, r24	; 0x0e
      mag_address = DLHC_DLM_DLH_MAG_ADDRESS;
    12ea:	8e e1       	ldi	r24, 0x1E	; 30
    12ec:	8f 87       	std	Y+15, r24	; 0x0f
      translated_regs[-OUT_X_H_M] = DLM_OUT_X_H_M;
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	89 8b       	std	Y+17, r24	; 0x11
      translated_regs[-OUT_X_L_M] = DLM_OUT_X_L_M;
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	8a 8b       	std	Y+18, r24	; 0x12
      translated_regs[-OUT_Y_H_M] = DLM_OUT_Y_H_M;
    12f6:	87 e0       	ldi	r24, 0x07	; 7
    12f8:	8b 8b       	std	Y+19, r24	; 0x13
      translated_regs[-OUT_Y_L_M] = DLM_OUT_Y_L_M;
    12fa:	88 e0       	ldi	r24, 0x08	; 8
    12fc:	8c 8b       	std	Y+20, r24	; 0x14
      translated_regs[-OUT_Z_H_M] = DLM_OUT_Z_H_M;
    12fe:	85 e0       	ldi	r24, 0x05	; 5
    1300:	8d 8b       	std	Y+21, r24	; 0x15
      translated_regs[-OUT_Z_L_M] = DLM_OUT_Z_L_M;
    1302:	86 e0       	ldi	r24, 0x06	; 6
    1304:	1b c0       	rjmp	.+54     	; 0x133c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x134>
      break;

    case device_DLH:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    1306:	01 30       	cpi	r16, 0x01	; 1
    1308:	51 f0       	breq	.+20     	; 0x131e <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x116>
    130a:	88 e1       	ldi	r24, 0x18	; 24
    130c:	09 c0       	rjmp	.+18     	; 0x1320 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x118>
          // DLHC seems to respond to WHO_AM_I request the same way as DLM, even though this
          // register isn't documented in its datasheet. Since the DLHC accelerometer address is the
          // same as the DLM with SA0 high, but Pololu DLM boards pull SA0 low by default, we'll
          // guess that a device whose accelerometer responds to the SA0 high address and whose
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
    130e:	4f e0       	ldi	r20, 0x0F	; 15
    1310:	6e e1       	ldi	r22, 0x1E	; 30
    1312:	ce 01       	movw	r24, r28
    1314:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
    1318:	cc 97       	sbiw	r24, 0x3c	; 60
    131a:	19 f3       	breq	.-58     	; 0x12e2 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0xda>
    {
      return false;
    }
  }
  
  _device = device;
    131c:	1d 86       	std	Y+13, r1	; 0x0d
      translated_regs[-OUT_Z_H_M] = DLM_OUT_Z_H_M;
      translated_regs[-OUT_Z_L_M] = DLM_OUT_Z_L_M;
      break;

    case device_DLH:
      acc_address = (sa0 == sa0_high) ? DLHC_DLM_DLH_ACC_SA0_HIGH_ADDRESS : DLM_DLH_ACC_SA0_LOW_ADDRESS;
    131e:	89 e1       	ldi	r24, 0x19	; 25
    1320:	8e 87       	std	Y+14, r24	; 0x0e
      mag_address = DLHC_DLM_DLH_MAG_ADDRESS;
    1322:	8e e1       	ldi	r24, 0x1E	; 30
    1324:	8f 87       	std	Y+15, r24	; 0x0f
      translated_regs[-OUT_X_H_M] = DLH_OUT_X_H_M;
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	89 8b       	std	Y+17, r24	; 0x11
      translated_regs[-OUT_X_L_M] = DLH_OUT_X_L_M;
    132a:	84 e0       	ldi	r24, 0x04	; 4
    132c:	8a 8b       	std	Y+18, r24	; 0x12
      translated_regs[-OUT_Y_H_M] = DLH_OUT_Y_H_M;
    132e:	85 e0       	ldi	r24, 0x05	; 5
    1330:	8b 8b       	std	Y+19, r24	; 0x13
      translated_regs[-OUT_Y_L_M] = DLH_OUT_Y_L_M;
    1332:	86 e0       	ldi	r24, 0x06	; 6
    1334:	8c 8b       	std	Y+20, r24	; 0x14
      translated_regs[-OUT_Z_H_M] = DLH_OUT_Z_H_M;
    1336:	87 e0       	ldi	r24, 0x07	; 7
    1338:	8d 8b       	std	Y+21, r24	; 0x15
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
    133a:	88 e0       	ldi	r24, 0x08	; 8
    133c:	8e 8b       	std	Y+22, r24	; 0x16
      break;
  }
  
  return true;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	1a c0       	rjmp	.+52     	; 0x1376 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x16e>
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011000; it's a DLM with SA0 low or DLH with SA0 low
        sa0 = sa0_low;
        if (device == device_auto)
    1342:	14 30       	cpi	r17, 0x04	; 4
    1344:	49 f4       	brne	.+18     	; 0x1358 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x150>
        {
          // use magnetometer WHO_AM_I register to determine device type
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLM : device_DLH;
    1346:	4f e0       	ldi	r20, 0x0F	; 15
    1348:	6e e1       	ldi	r22, 0x1E	; 30
    134a:	ce 01       	movw	r24, r28
    134c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN6LSM3037testRegEhh>
          // DLHC seems to respond to WHO_AM_I request the same way as DLM, even though this
          // register isn't documented in its datasheet. Since the DLHC accelerometer address is the
          // same as the DLM with SA0 high, but Pololu DLM boards pull SA0 low by default, we'll
          // guess that a device whose accelerometer responds to the SA0 high address and whose
          // magnetometer gives the DLM ID is actually a DLHC.
          device = (testReg(DLHC_DLM_DLH_MAG_ADDRESS, WHO_AM_I_M) == DLM_WHO_ID) ? device_DLHC : device_DLH;
    1350:	11 e0       	ldi	r17, 0x01	; 1
    1352:	cc 97       	sbiw	r24, 0x3c	; 60
    1354:	09 f0       	breq	.+2      	; 0x1358 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x150>
    1356:	10 e0       	ldi	r17, 0x00	; 0
      }
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(DLM_DLH_ACC_SA0_LOW_ADDRESS, CTRL_REG1_A) != TEST_REG_ERROR)
      {
        // device responds to address 0011000; it's a DLM with SA0 low or DLH with SA0 low
        sa0 = sa0_low;
    1358:	00 e0       	ldi	r16, 0x00	; 0
    135a:	a2 cf       	rjmp	.-188    	; 0x12a0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
      // check SA0 high address unless SA0 was specified to be low
      if (sa0 != sa0_low && testReg(D_SA0_HIGH_ADDRESS, WHO_AM_I) == D_WHO_ID)
      {
        // device responds to address 0011101 with D ID; it's a D with SA0 high
        device = device_D;
        sa0 = sa0_high;
    135c:	01 e0       	ldi	r16, 0x01	; 1
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x15a>
      // check SA0 low address unless SA0 was specified to be high
      else if (sa0 != sa0_high && testReg(D_SA0_LOW_ADDRESS, WHO_AM_I) == D_WHO_ID)
      {
        // device responds to address 0011110 with D ID; it's a D with SA0 low
        device = device_D;
        sa0 = sa0_low;
    1360:	00 e0       	ldi	r16, 0x00	; 0
}

// Public Methods //////////////////////////////////////////////////////////////

bool LSM303::init(deviceType device, sa0State sa0)
{
    1362:	13 e0       	ldi	r17, 0x03	; 3
    1364:	9d cf       	rjmp	.-198    	; 0x12a0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
        }
      }
    }
    
    // make sure device and SA0 were successfully detected; otherwise, indicate failure
    if (device == device_auto || sa0 == sa0_auto)
    1366:	14 30       	cpi	r17, 0x04	; 4
    1368:	09 f4       	brne	.+2      	; 0x136c <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x164>
    136a:	95 cf       	rjmp	.-214    	; 0x1296 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x8e>
    136c:	99 cf       	rjmp	.-206    	; 0x12a0 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x98>
        sa0 = sa0_low;
      }
    }
    
    // check for LSM303DLHC, DLM, DLH if device is still unidentified or was specified to be one of these types
    if (device == device_auto || device == device_DLHC || device == device_DLM || device == device_DLH)
    136e:	14 30       	cpi	r17, 0x04	; 4
    1370:	09 f4       	brne	.+2      	; 0x1374 <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x16c>
    1372:	7b cf       	rjmp	.-266    	; 0x126a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x62>
    1374:	72 cf       	rjmp	.-284    	; 0x125a <_ZN6LSM3034initENS_10deviceTypeENS_8sa0StateE+0x52>
      translated_regs[-OUT_Z_L_M] = DLH_OUT_Z_L_M;
      break;
  }
  
  return true;
}
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <_ZN13ArdusatSerialC1E10serialModehhb>:
}

void ArdusatSerial::end()
{
  send_to_serial(end())
}
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ec 01       	movw	r28, r24
    1392:	16 2f       	mov	r17, r22
    1394:	d4 2e       	mov	r13, r20
    1396:	c2 2e       	mov	r12, r18
    1398:	1b 82       	std	Y+3, r1	; 0x03
    139a:	1a 82       	std	Y+2, r1	; 0x02
    139c:	88 ee       	ldi	r24, 0xE8	; 232
    139e:	93 e0       	ldi	r25, 0x03	; 3
    13a0:	a0 e0       	ldi	r26, 0x00	; 0
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	8c 83       	std	Y+4, r24	; 0x04
    13a6:	9d 83       	std	Y+5, r25	; 0x05
    13a8:	ae 83       	std	Y+6, r26	; 0x06
    13aa:	bf 83       	std	Y+7, r27	; 0x07
    13ac:	83 e8       	ldi	r24, 0x83	; 131
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	99 83       	std	Y+1, r25	; 0x01
    13b2:	88 83       	st	Y, r24
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	86 0f       	add	r24, r22
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	60 f4       	brcc	.+24     	; 0x13d4 <_ZN13ArdusatSerialC1E10serialModehhb+0x54>
    13bc:	8c e1       	ldi	r24, 0x1C	; 28
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <_Znwj>
    13c4:	7c 01       	movw	r14, r24
    13c6:	20 2f       	mov	r18, r16
    13c8:	4c 2d       	mov	r20, r12
    13ca:	6d 2d       	mov	r22, r13
    13cc:	0e 94 96 0c 	call	0x192c	; 0x192c <_ZN14SoftwareSerialC1Ehhb>
    13d0:	fd 86       	std	Y+13, r15	; 0x0d
    13d2:	ec 86       	std	Y+12, r14	; 0x0c
    13d4:	1e 87       	std	Y+14, r17	; 0x0e
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	df 90       	pop	r13
    13e4:	cf 90       	pop	r12
    13e6:	08 95       	ret

000013e8 <_ZN13ArdusatSerialD1Ev>:
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	23 e8       	ldi	r18, 0x83	; 131
    13ee:	31 e0       	ldi	r19, 0x01	; 1
    13f0:	fc 01       	movw	r30, r24
    13f2:	31 83       	std	Z+1, r19	; 0x01
    13f4:	20 83       	st	Z, r18
    13f6:	c4 85       	ldd	r28, Z+12	; 0x0c
    13f8:	d5 85       	ldd	r29, Z+13	; 0x0d
    13fa:	20 97       	sbiw	r28, 0x00	; 0
    13fc:	41 f0       	breq	.+16     	; 0x140e <_ZN13ArdusatSerialD1Ev+0x26>
    13fe:	ce 01       	movw	r24, r28
    1400:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN14SoftwareSerialD1Ev>
    1404:	ce 01       	movw	r24, r28
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <_ZdlPv>
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	08 95       	ret

00001414 <_ZN13ArdusatSerial4peekEv>:

int ArdusatSerial::peek()
{
    1414:	fc 01       	movw	r30, r24
  return_serial_function(peek())
    1416:	96 85       	ldd	r25, Z+14	; 0x0e
    1418:	91 50       	subi	r25, 0x01	; 1
    141a:	92 30       	cpi	r25, 0x02	; 2
    141c:	48 f4       	brcc	.+18     	; 0x1430 <_ZN13ArdusatSerial4peekEv+0x1c>
    141e:	84 85       	ldd	r24, Z+12	; 0x0c
    1420:	95 85       	ldd	r25, Z+13	; 0x0d
    1422:	dc 01       	movw	r26, r24
    1424:	ed 91       	ld	r30, X+
    1426:	fc 91       	ld	r31, X
    1428:	00 84       	ldd	r0, Z+8	; 0x08
    142a:	f1 85       	ldd	r31, Z+9	; 0x09
    142c:	e0 2d       	mov	r30, r0
    142e:	09 94       	ijmp
    1430:	87 e0       	ldi	r24, 0x07	; 7
    1432:	93 e0       	ldi	r25, 0x03	; 3
    1434:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <_ZN14HardwareSerial4peekEv>

00001438 <_ZN13ArdusatSerial4readEv>:
}

int ArdusatSerial::read()
{
    1438:	fc 01       	movw	r30, r24
  return_serial_function(read())
    143a:	96 85       	ldd	r25, Z+14	; 0x0e
    143c:	91 50       	subi	r25, 0x01	; 1
    143e:	92 30       	cpi	r25, 0x02	; 2
    1440:	48 f4       	brcc	.+18     	; 0x1454 <_ZN13ArdusatSerial4readEv+0x1c>
    1442:	84 85       	ldd	r24, Z+12	; 0x0c
    1444:	95 85       	ldd	r25, Z+13	; 0x0d
    1446:	dc 01       	movw	r26, r24
    1448:	ed 91       	ld	r30, X+
    144a:	fc 91       	ld	r31, X
    144c:	06 80       	ldd	r0, Z+6	; 0x06
    144e:	f7 81       	ldd	r31, Z+7	; 0x07
    1450:	e0 2d       	mov	r30, r0
    1452:	09 94       	ijmp
    1454:	87 e0       	ldi	r24, 0x07	; 7
    1456:	93 e0       	ldi	r25, 0x03	; 3
    1458:	0c 94 ce 14 	jmp	0x299c	; 0x299c <_ZN14HardwareSerial4readEv>

0000145c <_ZN13ArdusatSerial9availableEv>:
}

int ArdusatSerial::available()
{
    145c:	fc 01       	movw	r30, r24
  return_serial_function(available())
    145e:	96 85       	ldd	r25, Z+14	; 0x0e
    1460:	91 50       	subi	r25, 0x01	; 1
    1462:	92 30       	cpi	r25, 0x02	; 2
    1464:	48 f4       	brcc	.+18     	; 0x1478 <_ZN13ArdusatSerial9availableEv+0x1c>
    1466:	84 85       	ldd	r24, Z+12	; 0x0c
    1468:	95 85       	ldd	r25, Z+13	; 0x0d
    146a:	dc 01       	movw	r26, r24
    146c:	ed 91       	ld	r30, X+
    146e:	fc 91       	ld	r31, X
    1470:	04 80       	ldd	r0, Z+4	; 0x04
    1472:	f5 81       	ldd	r31, Z+5	; 0x05
    1474:	e0 2d       	mov	r30, r0
    1476:	09 94       	ijmp
    1478:	87 e0       	ldi	r24, 0x07	; 7
    147a:	93 e0       	ldi	r25, 0x03	; 3
    147c:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <_ZN14HardwareSerial9availableEv>

00001480 <_ZN13ArdusatSerial5flushEv>:
}

void ArdusatSerial::flush()
{
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	ec 01       	movw	r28, r24
  send_to_serial(flush())
    1486:	8e 85       	ldd	r24, Y+14	; 0x0e
    1488:	8d 7f       	andi	r24, 0xFD	; 253
    148a:	21 f4       	brne	.+8      	; 0x1494 <_ZN13ArdusatSerial5flushEv+0x14>
    148c:	87 e0       	ldi	r24, 0x07	; 7
    148e:	93 e0       	ldi	r25, 0x03	; 3
    1490:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <_ZN14HardwareSerial5flushEv>
    1494:	8c 85       	ldd	r24, Y+12	; 0x0c
    1496:	9d 85       	ldd	r25, Y+13	; 0x0d
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	69 f0       	breq	.+26     	; 0x14b6 <_ZN13ArdusatSerial5flushEv+0x36>
    149c:	2e 85       	ldd	r18, Y+14	; 0x0e
    149e:	21 50       	subi	r18, 0x01	; 1
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	48 f4       	brcc	.+18     	; 0x14b6 <_ZN13ArdusatSerial5flushEv+0x36>
    14a4:	dc 01       	movw	r26, r24
    14a6:	ed 91       	ld	r30, X+
    14a8:	fc 91       	ld	r31, X
    14aa:	02 84       	ldd	r0, Z+10	; 0x0a
    14ac:	f3 85       	ldd	r31, Z+11	; 0x0b
    14ae:	e0 2d       	mov	r30, r0
}
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
  return_serial_function(available())
}

void ArdusatSerial::flush()
{
  send_to_serial(flush())
    14b4:	09 94       	ijmp
}
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	08 95       	ret

000014bc <_ZN13ArdusatSerial5writeEh>:

size_t ArdusatSerial::write(unsigned char b) {
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	8c 01       	movw	r16, r24
    14c8:	f6 2e       	mov	r15, r22
  size_t ret = 1;

  if (_soft_serial != NULL && 
    14ca:	dc 01       	movw	r26, r24
    14cc:	1c 96       	adiw	r26, 0x0c	; 12
    14ce:	8d 91       	ld	r24, X+
    14d0:	9c 91       	ld	r25, X
    14d2:	1d 97       	sbiw	r26, 0x0d	; 13
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	81 f0       	breq	.+32     	; 0x14f8 <_ZN13ArdusatSerial5writeEh+0x3c>
    14d8:	1e 96       	adiw	r26, 0x0e	; 14
    14da:	2c 91       	ld	r18, X
    14dc:	21 50       	subi	r18, 0x01	; 1
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	58 f4       	brcc	.+22     	; 0x14f8 <_ZN13ArdusatSerial5writeEh+0x3c>
      ( _mode == SERIAL_MODE_SOFTWARE || _mode == SERIAL_MODE_HARDWARE_AND_SOFTWARE)) {
    ret = ret & _soft_serial->write(b);
    14e2:	dc 01       	movw	r26, r24
    14e4:	ed 91       	ld	r30, X+
    14e6:	fc 91       	ld	r31, X
    14e8:	01 90       	ld	r0, Z+
    14ea:	f0 81       	ld	r31, Z
    14ec:	e0 2d       	mov	r30, r0
    14ee:	09 95       	icall
    14f0:	ec 01       	movw	r28, r24
    14f2:	c1 70       	andi	r28, 0x01	; 1
    14f4:	dd 27       	eor	r29, r29
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <_ZN13ArdusatSerial5writeEh+0x40>
{
  send_to_serial(flush())
}

size_t ArdusatSerial::write(unsigned char b) {
  size_t ret = 1;
    14f8:	c1 e0       	ldi	r28, 0x01	; 1
    14fa:	d0 e0       	ldi	r29, 0x00	; 0
  if (_soft_serial != NULL && 
      ( _mode == SERIAL_MODE_SOFTWARE || _mode == SERIAL_MODE_HARDWARE_AND_SOFTWARE)) {
    ret = ret & _soft_serial->write(b);
  }

  if (_mode == SERIAL_MODE_HARDWARE || _mode == SERIAL_MODE_HARDWARE_AND_SOFTWARE) {
    14fc:	f8 01       	movw	r30, r16
    14fe:	86 85       	ldd	r24, Z+14	; 0x0e
    1500:	8d 7f       	andi	r24, 0xFD	; 253
    1502:	39 f4       	brne	.+14     	; 0x1512 <_ZN13ArdusatSerial5writeEh+0x56>
    ret = ret & Serial.write(b);
    1504:	6f 2d       	mov	r22, r15
    1506:	87 e0       	ldi	r24, 0x07	; 7
    1508:	93 e0       	ldi	r25, 0x03	; 3
    150a:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN14HardwareSerial5writeEh>
    150e:	c8 23       	and	r28, r24
    1510:	d9 23       	and	r29, r25
  }

  return ret;
}
    1512:	ce 01       	movw	r24, r28
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	08 95       	ret

00001520 <_ZN14SoftwareSerial4readEv>:
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    1520:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <_ZN14SoftwareSerial13active_objectE>
    1524:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <_ZN14SoftwareSerial13active_objectE+0x1>
    1528:	28 17       	cp	r18, r24
    152a:	39 07       	cpc	r19, r25
    152c:	b9 f4       	brne	.+46     	; 0x155c <_ZN14SoftwareSerial4readEv+0x3c>
    152e:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1532:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1536:	98 17       	cp	r25, r24
    1538:	89 f0       	breq	.+34     	; 0x155c <_ZN14SoftwareSerial4readEv+0x3c>
    153a:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <_ZN14SoftwareSerial20_receive_buffer_headE>
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	e7 5a       	subi	r30, 0xA7	; 167
    1542:	fd 4f       	sbci	r31, 0xFD	; 253
    1544:	80 81       	ld	r24, Z
    1546:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <_ZN14SoftwareSerial20_receive_buffer_headE>
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	2f 5f       	subi	r18, 0xFF	; 255
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	2f 73       	andi	r18, 0x3F	; 63
    1552:	33 27       	eor	r19, r19
    1554:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	08 95       	ret
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	9f ef       	ldi	r25, 0xFF	; 255
    1560:	08 95       	ret

00001562 <_ZN14SoftwareSerial4peekEv>:
    1562:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <_ZN14SoftwareSerial13active_objectE>
    1566:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <_ZN14SoftwareSerial13active_objectE+0x1>
    156a:	28 17       	cp	r18, r24
    156c:	39 07       	cpc	r19, r25
    156e:	71 f4       	brne	.+28     	; 0x158c <_ZN14SoftwareSerial4peekEv+0x2a>
    1570:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1574:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1578:	98 17       	cp	r25, r24
    157a:	41 f0       	breq	.+16     	; 0x158c <_ZN14SoftwareSerial4peekEv+0x2a>
    157c:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	e7 5a       	subi	r30, 0xA7	; 167
    1584:	fd 4f       	sbci	r31, 0xFD	; 253
    1586:	80 81       	ld	r24, Z
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	08 95       	ret
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	9f ef       	ldi	r25, 0xFF	; 255
    1590:	08 95       	ret

00001592 <_ZN14SoftwareSerial9availableEv>:
    1592:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <_ZN14SoftwareSerial13active_objectE>
    1596:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <_ZN14SoftwareSerial13active_objectE+0x1>
    159a:	28 17       	cp	r18, r24
    159c:	39 07       	cpc	r19, r25
    159e:	71 f4       	brne	.+28     	; 0x15bc <_ZN14SoftwareSerial9availableEv+0x2a>
    15a0:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    15a4:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <_ZN14SoftwareSerial20_receive_buffer_headE>
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	80 5c       	subi	r24, 0xC0	; 192
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	82 1b       	sub	r24, r18
    15b0:	91 09       	sbc	r25, r1
    15b2:	60 e4       	ldi	r22, 0x40	; 64
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divmodhi4>
    15ba:	08 95       	ret
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	08 95       	ret

000015c2 <_ZN14SoftwareSerial5flushEv>:
    15c2:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <_ZN14SoftwareSerial13active_objectE>
    15c6:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <_ZN14SoftwareSerial13active_objectE+0x1>
    15ca:	28 17       	cp	r18, r24
    15cc:	39 07       	cpc	r19, r25
    15ce:	39 f4       	brne	.+14     	; 0x15de <_ZN14SoftwareSerial5flushEv+0x1c>
    15d0:	8f b7       	in	r24, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    15d8:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <_ZN14SoftwareSerial20_receive_buffer_headE>
    15dc:	8f bf       	out	0x3f, r24	; 63
    15de:	08 95       	ret

000015e0 <_ZN14SoftwareSerial12tx_pin_writeEh.part.4.constprop.9>:
    15e0:	dc 01       	movw	r26, r24
    15e2:	51 96       	adiw	r26, 0x11	; 17
    15e4:	ed 91       	ld	r30, X+
    15e6:	fc 91       	ld	r31, X
    15e8:	52 97       	sbiw	r26, 0x12	; 18
    15ea:	90 81       	ld	r25, Z
    15ec:	50 96       	adiw	r26, 0x10	; 16
    15ee:	8c 91       	ld	r24, X
    15f0:	80 95       	com	r24
    15f2:	89 23       	and	r24, r25
    15f4:	80 83       	st	Z, r24
    15f6:	08 95       	ret

000015f8 <_ZN14SoftwareSerial10tunedDelayEj>:
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	2f ef       	ldi	r18, 0xFF	; 255
    15fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1600:	92 07       	cpc	r25, r18
    1602:	d9 f7       	brne	.-10     	; 0x15fa <_ZN14SoftwareSerial10tunedDelayEj+0x2>
    1604:	08 95       	ret

00001606 <_ZN14SoftwareSerial4recvEv>:
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
    1614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1616:	ee 85       	ldd	r30, Y+14	; 0x0e
    1618:	ff 85       	ldd	r31, Y+15	; 0x0f
    161a:	9d 85       	ldd	r25, Y+13	; 0x0d
    161c:	81 ff       	sbrs	r24, 1
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <_ZN14SoftwareSerial4recvEv+0x22>
    1620:	80 81       	ld	r24, Z
    1622:	98 23       	and	r25, r24
    1624:	29 f4       	brne	.+10     	; 0x1630 <_ZN14SoftwareSerial4recvEv+0x2a>
    1626:	46 c0       	rjmp	.+140    	; 0x16b4 <_ZN14SoftwareSerial4recvEv+0xae>
    1628:	80 81       	ld	r24, Z
    162a:	98 23       	and	r25, r24
    162c:	09 f0       	breq	.+2      	; 0x1630 <_ZN14SoftwareSerial4recvEv+0x2a>
    162e:	42 c0       	rjmp	.+132    	; 0x16b4 <_ZN14SoftwareSerial4recvEv+0xae>
    1630:	8b 89       	ldd	r24, Y+19	; 0x13
    1632:	9c 89       	ldd	r25, Y+20	; 0x14
    1634:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    1638:	88 e0       	ldi	r24, 0x08	; 8
    163a:	e8 2e       	mov	r14, r24
    163c:	f1 2c       	mov	r15, r1
    163e:	10 e0       	ldi	r17, 0x00	; 0
    1640:	01 e0       	ldi	r16, 0x01	; 1
    1642:	8d 89       	ldd	r24, Y+21	; 0x15
    1644:	9e 89       	ldd	r25, Y+22	; 0x16
    1646:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    164a:	ee 85       	ldd	r30, Y+14	; 0x0e
    164c:	ff 85       	ldd	r31, Y+15	; 0x0f
    164e:	90 81       	ld	r25, Z
    1650:	8d 85       	ldd	r24, Y+13	; 0x0d
    1652:	89 23       	and	r24, r25
    1654:	11 f0       	breq	.+4      	; 0x165a <_ZN14SoftwareSerial4recvEv+0x54>
    1656:	10 2b       	or	r17, r16
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <_ZN14SoftwareSerial4recvEv+0x5a>
    165a:	80 2f       	mov	r24, r16
    165c:	80 95       	com	r24
    165e:	18 23       	and	r17, r24
    1660:	00 0f       	add	r16, r16
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	e8 1a       	sub	r14, r24
    1666:	f1 08       	sbc	r15, r1
    1668:	61 f7       	brne	.-40     	; 0x1642 <_ZN14SoftwareSerial4recvEv+0x3c>
    166a:	8f 89       	ldd	r24, Y+23	; 0x17
    166c:	98 8d       	ldd	r25, Y+24	; 0x18
    166e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    1672:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1674:	81 fd       	sbrc	r24, 1
    1676:	10 95       	com	r17
    1678:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    167c:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	8f 73       	andi	r24, 0x3F	; 63
    1686:	99 27       	eor	r25, r25
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	82 17       	cp	r24, r18
    168c:	93 07       	cpc	r25, r19
    168e:	79 f0       	breq	.+30     	; 0x16ae <_ZN14SoftwareSerial4recvEv+0xa8>
    1690:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	e7 5a       	subi	r30, 0xA7	; 167
    1698:	fd 4f       	sbci	r31, 0xFD	; 253
    169a:	10 83       	st	Z, r17
    169c:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	8f 73       	andi	r24, 0x3F	; 63
    16a6:	99 27       	eor	r25, r25
    16a8:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    16ac:	03 c0       	rjmp	.+6      	; 0x16b4 <_ZN14SoftwareSerial4recvEv+0xae>
    16ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b0:	81 60       	ori	r24, 0x01	; 1
    16b2:	8b 8f       	std	Y+27, r24	; 0x1b
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	08 95       	ret

000016c2 <_ZN14SoftwareSerial12tx_pin_writeEh>:
    16c2:	61 11       	cpse	r22, r1
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <_ZN14SoftwareSerial12tx_pin_writeEh+0x8>
    16c6:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <_ZN14SoftwareSerial12tx_pin_writeEh.part.4.constprop.9>
    16ca:	dc 01       	movw	r26, r24
    16cc:	51 96       	adiw	r26, 0x11	; 17
    16ce:	ed 91       	ld	r30, X+
    16d0:	fc 91       	ld	r31, X
    16d2:	52 97       	sbiw	r26, 0x12	; 18
    16d4:	20 81       	ld	r18, Z
    16d6:	50 96       	adiw	r26, 0x10	; 16
    16d8:	8c 91       	ld	r24, X
    16da:	82 2b       	or	r24, r18
    16dc:	80 83       	st	Z, r24
    16de:	08 95       	ret

000016e0 <_ZN14SoftwareSerial5writeEh>:
    16e0:	df 92       	push	r13
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	ec 01       	movw	r28, r24
    16f0:	29 8d       	ldd	r18, Y+25	; 0x19
    16f2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    16f4:	21 15       	cp	r18, r1
    16f6:	31 05       	cpc	r19, r1
    16f8:	29 f4       	brne	.+10     	; 0x1704 <_ZN14SoftwareSerial5writeEh+0x24>
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9b 83       	std	Y+3, r25	; 0x03
    1700:	8a 83       	std	Y+2, r24	; 0x02
    1702:	4b c0       	rjmp	.+150    	; 0x179a <_ZN14SoftwareSerial5writeEh+0xba>
    1704:	16 2f       	mov	r17, r22
    1706:	df b6       	in	r13, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    170c:	66 95       	lsr	r22
    170e:	61 70       	andi	r22, 0x01	; 1
    1710:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN14SoftwareSerial12tx_pin_writeEh>
    1714:	89 8d       	ldd	r24, Y+25	; 0x19
    1716:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1718:	05 96       	adiw	r24, 0x05	; 5
    171a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    171e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1720:	98 e0       	ldi	r25, 0x08	; 8
    1722:	e9 2e       	mov	r14, r25
    1724:	f1 2c       	mov	r15, r1
    1726:	01 e0       	ldi	r16, 0x01	; 1
    1728:	81 ff       	sbrs	r24, 1
    172a:	18 c0       	rjmp	.+48     	; 0x175c <_ZN14SoftwareSerial5writeEh+0x7c>
    172c:	81 2f       	mov	r24, r17
    172e:	80 23       	and	r24, r16
    1730:	21 f0       	breq	.+8      	; 0x173a <_ZN14SoftwareSerial5writeEh+0x5a>
    1732:	ce 01       	movw	r24, r28
    1734:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_ZN14SoftwareSerial12tx_pin_writeEh.part.4.constprop.9>
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <_ZN14SoftwareSerial5writeEh+0x62>
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	ce 01       	movw	r24, r28
    173e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN14SoftwareSerial12tx_pin_writeEh>
    1742:	89 8d       	ldd	r24, Y+25	; 0x19
    1744:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1746:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    174a:	00 0f       	add	r16, r16
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	e8 1a       	sub	r14, r24
    1750:	f1 08       	sbc	r15, r1
    1752:	61 f7       	brne	.-40     	; 0x172c <_ZN14SoftwareSerial5writeEh+0x4c>
    1754:	ce 01       	movw	r24, r28
    1756:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_ZN14SoftwareSerial12tx_pin_writeEh.part.4.constprop.9>
    175a:	18 c0       	rjmp	.+48     	; 0x178c <_ZN14SoftwareSerial5writeEh+0xac>
    175c:	81 2f       	mov	r24, r17
    175e:	80 23       	and	r24, r16
    1760:	29 f0       	breq	.+10     	; 0x176c <_ZN14SoftwareSerial5writeEh+0x8c>
    1762:	61 e0       	ldi	r22, 0x01	; 1
    1764:	ce 01       	movw	r24, r28
    1766:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN14SoftwareSerial12tx_pin_writeEh>
    176a:	03 c0       	rjmp	.+6      	; 0x1772 <_ZN14SoftwareSerial5writeEh+0x92>
    176c:	ce 01       	movw	r24, r28
    176e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_ZN14SoftwareSerial12tx_pin_writeEh.part.4.constprop.9>
    1772:	89 8d       	ldd	r24, Y+25	; 0x19
    1774:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1776:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    177a:	00 0f       	add	r16, r16
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	e8 1a       	sub	r14, r24
    1780:	f1 08       	sbc	r15, r1
    1782:	61 f7       	brne	.-40     	; 0x175c <_ZN14SoftwareSerial5writeEh+0x7c>
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	ce 01       	movw	r24, r28
    1788:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN14SoftwareSerial12tx_pin_writeEh>
    178c:	df be       	out	0x3f, r13	; 63
    178e:	89 8d       	ldd	r24, Y+25	; 0x19
    1790:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1792:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <_ZN14SoftwareSerial10tunedDelayEj>
    1796:	21 e0       	ldi	r18, 0x01	; 1
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	c9 01       	movw	r24, r18
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	df 90       	pop	r13
    17aa:	08 95       	ret

000017ac <__vector_5>:
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <_ZN14SoftwareSerial13active_objectE>
    17d2:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <_ZN14SoftwareSerial13active_objectE+0x1>
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	11 f0       	breq	.+4      	; 0x17de <__vector_5+0x32>
    17da:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN14SoftwareSerial4recvEv>
    17de:	ff 91       	pop	r31
    17e0:	ef 91       	pop	r30
    17e2:	bf 91       	pop	r27
    17e4:	af 91       	pop	r26
    17e6:	9f 91       	pop	r25
    17e8:	8f 91       	pop	r24
    17ea:	7f 91       	pop	r23
    17ec:	6f 91       	pop	r22
    17ee:	5f 91       	pop	r21
    17f0:	4f 91       	pop	r20
    17f2:	3f 91       	pop	r19
    17f4:	2f 91       	pop	r18
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0
    17fc:	1f 90       	pop	r1
    17fe:	18 95       	reti

00001800 <__vector_4>:
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
    1822:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__vector_5>
    1826:	ff 91       	pop	r31
    1828:	ef 91       	pop	r30
    182a:	bf 91       	pop	r27
    182c:	af 91       	pop	r26
    182e:	9f 91       	pop	r25
    1830:	8f 91       	pop	r24
    1832:	7f 91       	pop	r23
    1834:	6f 91       	pop	r22
    1836:	5f 91       	pop	r21
    1838:	4f 91       	pop	r20
    183a:	3f 91       	pop	r19
    183c:	2f 91       	pop	r18
    183e:	0f 90       	pop	r0
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	0f 90       	pop	r0
    1844:	1f 90       	pop	r1
    1846:	18 95       	reti

00001848 <__vector_3>:
    1848:	1f 92       	push	r1
    184a:	0f 92       	push	r0
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	0f 92       	push	r0
    1850:	11 24       	eor	r1, r1
    1852:	2f 93       	push	r18
    1854:	3f 93       	push	r19
    1856:	4f 93       	push	r20
    1858:	5f 93       	push	r21
    185a:	6f 93       	push	r22
    185c:	7f 93       	push	r23
    185e:	8f 93       	push	r24
    1860:	9f 93       	push	r25
    1862:	af 93       	push	r26
    1864:	bf 93       	push	r27
    1866:	ef 93       	push	r30
    1868:	ff 93       	push	r31
    186a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__vector_5>
    186e:	ff 91       	pop	r31
    1870:	ef 91       	pop	r30
    1872:	bf 91       	pop	r27
    1874:	af 91       	pop	r26
    1876:	9f 91       	pop	r25
    1878:	8f 91       	pop	r24
    187a:	7f 91       	pop	r23
    187c:	6f 91       	pop	r22
    187e:	5f 91       	pop	r21
    1880:	4f 91       	pop	r20
    1882:	3f 91       	pop	r19
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <_ZN14SoftwareSerial5setTXEh>:
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	ec 01       	movw	r28, r24
    1898:	16 2f       	mov	r17, r22
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	81 2f       	mov	r24, r17
    189e:	0e 94 c2 1a 	call	0x3584	; 0x3584 <pinMode>
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	81 2f       	mov	r24, r17
    18a6:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <digitalWrite>
    18aa:	81 2f       	mov	r24, r17
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	fc 01       	movw	r30, r24
    18b0:	e9 5c       	subi	r30, 0xC9	; 201
    18b2:	fd 4f       	sbci	r31, 0xFD	; 253
    18b4:	e4 91       	lpm	r30, Z
    18b6:	e8 8b       	std	Y+16, r30	; 0x10
    18b8:	fc 01       	movw	r30, r24
    18ba:	e5 5b       	subi	r30, 0xB5	; 181
    18bc:	fd 4f       	sbci	r31, 0xFD	; 253
    18be:	e4 91       	lpm	r30, Z
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	e7 59       	subi	r30, 0x97	; 151
    18c8:	fd 4f       	sbci	r31, 0xFD	; 253
    18ca:	85 91       	lpm	r24, Z+
    18cc:	94 91       	lpm	r25, Z
    18ce:	9a 8b       	std	Y+18, r25	; 0x12
    18d0:	89 8b       	std	Y+17, r24	; 0x11
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	08 95       	ret

000018da <_ZN14SoftwareSerial5setRXEh>:
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	ec 01       	movw	r28, r24
    18e2:	16 2f       	mov	r17, r22
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	81 2f       	mov	r24, r17
    18e8:	0e 94 c2 1a 	call	0x3584	; 0x3584 <pinMode>
    18ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ee:	81 fd       	sbrc	r24, 1
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <_ZN14SoftwareSerial5setRXEh+0x20>
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	81 2f       	mov	r24, r17
    18f6:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <digitalWrite>
    18fa:	1c 87       	std	Y+12, r17	; 0x0c
    18fc:	81 2f       	mov	r24, r17
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	fc 01       	movw	r30, r24
    1902:	e9 5c       	subi	r30, 0xC9	; 201
    1904:	fd 4f       	sbci	r31, 0xFD	; 253
    1906:	e4 91       	lpm	r30, Z
    1908:	ed 87       	std	Y+13, r30	; 0x0d
    190a:	fc 01       	movw	r30, r24
    190c:	e5 5b       	subi	r30, 0xB5	; 181
    190e:	fd 4f       	sbci	r31, 0xFD	; 253
    1910:	e4 91       	lpm	r30, Z
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	ee 0f       	add	r30, r30
    1916:	ff 1f       	adc	r31, r31
    1918:	e1 5a       	subi	r30, 0xA1	; 161
    191a:	fd 4f       	sbci	r31, 0xFD	; 253
    191c:	85 91       	lpm	r24, Z+
    191e:	94 91       	lpm	r25, Z
    1920:	9f 87       	std	Y+15, r25	; 0x0f
    1922:	8e 87       	std	Y+14, r24	; 0x0e
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	08 95       	ret

0000192c <_ZN14SoftwareSerialC1Ehhb>:
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	ec 01       	movw	r28, r24
    1934:	16 2f       	mov	r17, r22
    1936:	1b 82       	std	Y+3, r1	; 0x03
    1938:	1a 82       	std	Y+2, r1	; 0x02
    193a:	88 ee       	ldi	r24, 0xE8	; 232
    193c:	93 e0       	ldi	r25, 0x03	; 3
    193e:	a0 e0       	ldi	r26, 0x00	; 0
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	8c 83       	std	Y+4, r24	; 0x04
    1944:	9d 83       	std	Y+5, r25	; 0x05
    1946:	ae 83       	std	Y+6, r26	; 0x06
    1948:	bf 83       	std	Y+7, r27	; 0x07
    194a:	83 e9       	ldi	r24, 0x93	; 147
    194c:	91 e0       	ldi	r25, 0x01	; 1
    194e:	99 83       	std	Y+1, r25	; 0x01
    1950:	88 83       	st	Y, r24
    1952:	1c 8a       	std	Y+20, r1	; 0x14
    1954:	1b 8a       	std	Y+19, r1	; 0x13
    1956:	1e 8a       	std	Y+22, r1	; 0x16
    1958:	1d 8a       	std	Y+21, r1	; 0x15
    195a:	18 8e       	std	Y+24, r1	; 0x18
    195c:	1f 8a       	std	Y+23, r1	; 0x17
    195e:	1a 8e       	std	Y+26, r1	; 0x1a
    1960:	19 8e       	std	Y+25, r1	; 0x19
    1962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1964:	8e 7f       	andi	r24, 0xFE	; 254
    1966:	20 fb       	bst	r18, 0
    1968:	81 f9       	bld	r24, 1
    196a:	8b 8f       	std	Y+27, r24	; 0x1b
    196c:	64 2f       	mov	r22, r20
    196e:	ce 01       	movw	r24, r28
    1970:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN14SoftwareSerial5setTXEh>
    1974:	61 2f       	mov	r22, r17
    1976:	ce 01       	movw	r24, r28
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <_ZN14SoftwareSerial5setRXEh>

00001982 <_ZN14SoftwareSerial3endEv>:
}

void SoftwareSerial::end()
{
  if (digitalPinToPCMSK(_receivePin))
    1982:	fc 01       	movw	r30, r24
    1984:	24 85       	ldd	r18, Z+12	; 0x0c
    1986:	26 31       	cpi	r18, 0x16	; 22
    1988:	40 f5       	brcc	.+80     	; 0x19da <_ZN14SoftwareSerial3endEv+0x58>
    *digitalPinToPCMSK(_receivePin) &= ~_BV(digitalPinToPCMSKbit(_receivePin));
    198a:	28 30       	cpi	r18, 0x08	; 8
    198c:	28 f0       	brcs	.+10     	; 0x1998 <_ZN14SoftwareSerial3endEv+0x16>
    198e:	2e 30       	cpi	r18, 0x0E	; 14
    1990:	30 f4       	brcc	.+12     	; 0x199e <_ZN14SoftwareSerial3endEv+0x1c>
    1992:	eb e6       	ldi	r30, 0x6B	; 107
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <_ZN14SoftwareSerial3endEv+0x20>
    1998:	ed e6       	ldi	r30, 0x6D	; 109
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <_ZN14SoftwareSerial3endEv+0x20>
    199e:	ec e6       	ldi	r30, 0x6C	; 108
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	30 81       	ld	r19, Z
    19a4:	28 30       	cpi	r18, 0x08	; 8
    19a6:	38 f4       	brcc	.+14     	; 0x19b6 <_ZN14SoftwareSerial3endEv+0x34>
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <_ZN14SoftwareSerial3endEv+0x2e>
    19ae:	88 0f       	add	r24, r24
    19b0:	2a 95       	dec	r18
    19b2:	ea f7       	brpl	.-6      	; 0x19ae <_ZN14SoftwareSerial3endEv+0x2c>
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <_ZN14SoftwareSerial3endEv+0x52>
    19b6:	42 2f       	mov	r20, r18
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	2e 30       	cpi	r18, 0x0E	; 14
    19bc:	18 f4       	brcc	.+6      	; 0x19c4 <_ZN14SoftwareSerial3endEv+0x42>
    19be:	48 50       	subi	r20, 0x08	; 8
    19c0:	51 09       	sbc	r21, r1
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <_ZN14SoftwareSerial3endEv+0x46>
    19c4:	4e 50       	subi	r20, 0x0E	; 14
    19c6:	51 09       	sbc	r21, r1
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <_ZN14SoftwareSerial3endEv+0x4e>
    19ce:	88 0f       	add	r24, r24
    19d0:	4a 95       	dec	r20
    19d2:	ea f7       	brpl	.-6      	; 0x19ce <_ZN14SoftwareSerial3endEv+0x4c>
    19d4:	80 95       	com	r24
    19d6:	83 23       	and	r24, r19
    19d8:	80 83       	st	Z, r24
    19da:	08 95       	ret

000019dc <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    19dc:	23 e9       	ldi	r18, 0x93	; 147
    19de:	31 e0       	ldi	r19, 0x01	; 1
    19e0:	fc 01       	movw	r30, r24
    19e2:	31 83       	std	Z+1, r19	; 0x01
    19e4:	20 83       	st	Z, r18
{
  end();
    19e6:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <_ZN14SoftwareSerial3endEv>

000019ea <_ZN12SFE_ISL29125C1Eh>:


// Constructor - Creates sensor object and sets I2C address
SFE_ISL29125::SFE_ISL29125(uint8_t addr) 
{
  _addr = addr;
    19ea:	fc 01       	movw	r30, r24
    19ec:	60 83       	st	Z, r22
    19ee:	08 95       	ret

000019f0 <_ZN12SFE_ISL29125D1Ev>:
}

// Destructor - Deletes sensor object
SFE_ISL29125::~SFE_ISL29125()
    19f0:	08 95       	ret

000019f2 <_ZN3PID10SetTuningsEddd>:
		else if(*myOutput < outMin) *myOutput = outMin;
		
		if(ITerm > outMax) ITerm= outMax;
		else if(ITerm < outMin) ITerm= outMin;
	}
}
    19f2:	4f 92       	push	r4
    19f4:	5f 92       	push	r5
    19f6:	6f 92       	push	r6
    19f8:	7f 92       	push	r7
    19fa:	8f 92       	push	r8
    19fc:	9f 92       	push	r9
    19fe:	af 92       	push	r10
    1a00:	bf 92       	push	r11
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <_ZN3PID10SetTuningsEddd+0x22>
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <_ZN3PID10SetTuningsEddd+0x24>
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <_ZN3PID10SetTuningsEddd+0x26>
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	2a 01       	movw	r4, r20
    1a22:	3b 01       	movw	r6, r22
    1a24:	48 01       	movw	r8, r16
    1a26:	59 01       	movw	r10, r18
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	a9 01       	movw	r20, r18
    1a2e:	c3 01       	movw	r24, r6
    1a30:	b2 01       	movw	r22, r4
    1a32:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    1a36:	87 fd       	sbrc	r24, 7
    1a38:	7f c0       	rjmp	.+254    	; 0x1b38 <_ZN3PID10SetTuningsEddd+0x146>
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	a9 01       	movw	r20, r18
    1a40:	c5 01       	movw	r24, r10
    1a42:	b4 01       	movw	r22, r8
    1a44:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    1a48:	87 fd       	sbrc	r24, 7
    1a4a:	76 c0       	rjmp	.+236    	; 0x1b38 <_ZN3PID10SetTuningsEddd+0x146>
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	a9 01       	movw	r20, r18
    1a52:	c7 01       	movw	r24, r14
    1a54:	b6 01       	movw	r22, r12
    1a56:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    1a5a:	87 fd       	sbrc	r24, 7
    1a5c:	6d c0       	rjmp	.+218    	; 0x1b38 <_ZN3PID10SetTuningsEddd+0x146>
    1a5e:	ed 81       	ldd	r30, Y+5	; 0x05
    1a60:	fe 81       	ldd	r31, Y+6	; 0x06
    1a62:	40 82       	st	Z, r4
    1a64:	51 82       	std	Z+1, r5	; 0x01
    1a66:	62 82       	std	Z+2, r6	; 0x02
    1a68:	73 82       	std	Z+3, r7	; 0x03
    1a6a:	84 82       	std	Z+4, r8	; 0x04
    1a6c:	95 82       	std	Z+5, r9	; 0x05
    1a6e:	a6 82       	std	Z+6, r10	; 0x06
    1a70:	b7 82       	std	Z+7, r11	; 0x07
    1a72:	c0 86       	std	Z+8, r12	; 0x08
    1a74:	d1 86       	std	Z+9, r13	; 0x09
    1a76:	e2 86       	std	Z+10, r14	; 0x0a
    1a78:	f3 86       	std	Z+11, r15	; 0x0b
    1a7a:	64 a5       	ldd	r22, Z+44	; 0x2c
    1a7c:	75 a5       	ldd	r23, Z+45	; 0x2d
    1a7e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1a80:	97 a5       	ldd	r25, Z+47	; 0x2f
    1a82:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatunsisf>
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a e7       	ldi	r20, 0x7A	; 122
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    1a92:	69 83       	std	Y+1, r22	; 0x01
    1a94:	7a 83       	std	Y+2, r23	; 0x02
    1a96:	8b 83       	std	Y+3, r24	; 0x03
    1a98:	9c 83       	std	Y+4, r25	; 0x04
    1a9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1a9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1a9e:	44 86       	std	Z+12, r4	; 0x0c
    1aa0:	55 86       	std	Z+13, r5	; 0x0d
    1aa2:	66 86       	std	Z+14, r6	; 0x0e
    1aa4:	77 86       	std	Z+15, r7	; 0x0f
    1aa6:	9b 01       	movw	r18, r22
    1aa8:	ac 01       	movw	r20, r24
    1aaa:	c5 01       	movw	r24, r10
    1aac:	b4 01       	movw	r22, r8
    1aae:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
    1ab2:	4b 01       	movw	r8, r22
    1ab4:	5c 01       	movw	r10, r24
    1ab6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ab8:	fe 81       	ldd	r31, Y+6	; 0x06
    1aba:	60 8b       	std	Z+16, r22	; 0x10
    1abc:	71 8b       	std	Z+17, r23	; 0x11
    1abe:	82 8b       	std	Z+18, r24	; 0x12
    1ac0:	93 8b       	std	Z+19, r25	; 0x13
    1ac2:	29 81       	ldd	r18, Y+1	; 0x01
    1ac4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ac6:	4b 81       	ldd	r20, Y+3	; 0x03
    1ac8:	5c 81       	ldd	r21, Y+4	; 0x04
    1aca:	c7 01       	movw	r24, r14
    1acc:	b6 01       	movw	r22, r12
    1ace:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    1ad2:	6b 01       	movw	r12, r22
    1ad4:	7c 01       	movw	r14, r24
    1ad6:	ed 81       	ldd	r30, Y+5	; 0x05
    1ad8:	fe 81       	ldd	r31, Y+6	; 0x06
    1ada:	64 8b       	std	Z+20, r22	; 0x14
    1adc:	75 8b       	std	Z+21, r23	; 0x15
    1ade:	86 8b       	std	Z+22, r24	; 0x16
    1ae0:	97 8b       	std	Z+23, r25	; 0x17
    1ae2:	80 8d       	ldd	r24, Z+24	; 0x18
    1ae4:	91 8d       	ldd	r25, Z+25	; 0x19
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	39 f5       	brne	.+78     	; 0x1b38 <_ZN3PID10SetTuningsEddd+0x146>
    1aea:	a3 01       	movw	r20, r6
    1aec:	92 01       	movw	r18, r4
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	cb 01       	movw	r24, r22
    1af4:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__subsf3>
    1af8:	ed 81       	ldd	r30, Y+5	; 0x05
    1afa:	fe 81       	ldd	r31, Y+6	; 0x06
    1afc:	64 87       	std	Z+12, r22	; 0x0c
    1afe:	75 87       	std	Z+13, r23	; 0x0d
    1b00:	86 87       	std	Z+14, r24	; 0x0e
    1b02:	97 87       	std	Z+15, r25	; 0x0f
    1b04:	a5 01       	movw	r20, r10
    1b06:	94 01       	movw	r18, r8
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__subsf3>
    1b12:	ed 81       	ldd	r30, Y+5	; 0x05
    1b14:	fe 81       	ldd	r31, Y+6	; 0x06
    1b16:	60 8b       	std	Z+16, r22	; 0x10
    1b18:	71 8b       	std	Z+17, r23	; 0x11
    1b1a:	82 8b       	std	Z+18, r24	; 0x12
    1b1c:	93 8b       	std	Z+19, r25	; 0x13
    1b1e:	a7 01       	movw	r20, r14
    1b20:	96 01       	movw	r18, r12
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	cb 01       	movw	r24, r22
    1b28:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__subsf3>
    1b2c:	ed 81       	ldd	r30, Y+5	; 0x05
    1b2e:	fe 81       	ldd	r31, Y+6	; 0x06
    1b30:	64 8b       	std	Z+20, r22	; 0x14
    1b32:	75 8b       	std	Z+21, r23	; 0x15
    1b34:	86 8b       	std	Z+22, r24	; 0x16
    1b36:	97 8b       	std	Z+23, r25	; 0x17
    1b38:	26 96       	adiw	r28, 0x06	; 6
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	ff 90       	pop	r15
    1b4e:	ef 90       	pop	r14
    1b50:	df 90       	pop	r13
    1b52:	cf 90       	pop	r12
    1b54:	bf 90       	pop	r11
    1b56:	af 90       	pop	r10
    1b58:	9f 90       	pop	r9
    1b5a:	8f 90       	pop	r8
    1b5c:	7f 90       	pop	r7
    1b5e:	6f 90       	pop	r6
    1b60:	5f 90       	pop	r5
    1b62:	4f 90       	pop	r4
    1b64:	08 95       	ret

00001b66 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
*	does all the things that need to happen to ensure a bumpless transfer
*  from manual to automatic mode.
******************************************************************************/
void PID::Initialize()
{
    1b66:	8f 92       	push	r8
    1b68:	9f 92       	push	r9
    1b6a:	af 92       	push	r10
    1b6c:	bf 92       	push	r11
    1b6e:	cf 92       	push	r12
    1b70:	df 92       	push	r13
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	ec 01       	movw	r28, r24
	ITerm = *myOutput;
    1b7c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1b7e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1b80:	c0 80       	ld	r12, Z
    1b82:	d1 80       	ldd	r13, Z+1	; 0x01
    1b84:	e2 80       	ldd	r14, Z+2	; 0x02
    1b86:	f3 80       	ldd	r15, Z+3	; 0x03
    1b88:	cc a2       	std	Y+36, r12	; 0x24
    1b8a:	dd a2       	std	Y+37, r13	; 0x25
    1b8c:	ee a2       	std	Y+38, r14	; 0x26
    1b8e:	ff a2       	std	Y+39, r15	; 0x27
	lastInput = *myInput;
    1b90:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b92:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	a2 81       	ldd	r26, Z+2	; 0x02
    1b9a:	b3 81       	ldd	r27, Z+3	; 0x03
    1b9c:	88 a7       	std	Y+40, r24	; 0x28
    1b9e:	99 a7       	std	Y+41, r25	; 0x29
    1ba0:	aa a7       	std	Y+42, r26	; 0x2a
    1ba2:	bb a7       	std	Y+43, r27	; 0x2b
	if(ITerm > outMax) ITerm = outMax;
    1ba4:	8c a8       	ldd	r8, Y+52	; 0x34
    1ba6:	9d a8       	ldd	r9, Y+53	; 0x35
    1ba8:	ae a8       	ldd	r10, Y+54	; 0x36
    1baa:	bf a8       	ldd	r11, Y+55	; 0x37
    1bac:	a5 01       	movw	r20, r10
    1bae:	94 01       	movw	r18, r8
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	b6 01       	movw	r22, r12
    1bb4:	0e 94 03 14 	call	0x2806	; 0x2806 <__gesf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	64 f0       	brlt	.+24     	; 0x1bd4 <_ZN3PID10InitializeEv+0x6e>
	else if(ITerm < outMin) ITerm = outMin;
    1bbc:	88 a8       	ldd	r8, Y+48	; 0x30
    1bbe:	99 a8       	ldd	r9, Y+49	; 0x31
    1bc0:	aa a8       	ldd	r10, Y+50	; 0x32
    1bc2:	bb a8       	ldd	r11, Y+51	; 0x33
    1bc4:	a5 01       	movw	r20, r10
    1bc6:	94 01       	movw	r18, r8
    1bc8:	c7 01       	movw	r24, r14
    1bca:	b6 01       	movw	r22, r12
    1bcc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    1bd0:	87 ff       	sbrs	r24, 7
    1bd2:	04 c0       	rjmp	.+8      	; 0x1bdc <_ZN3PID10InitializeEv+0x76>
    1bd4:	8c a2       	std	Y+36, r8	; 0x24
    1bd6:	9d a2       	std	Y+37, r9	; 0x25
    1bd8:	ae a2       	std	Y+38, r10	; 0x26
    1bda:	bf a2       	std	Y+39, r11	; 0x27
}
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	ff 90       	pop	r15
    1be2:	ef 90       	pop	r14
    1be4:	df 90       	pop	r13
    1be6:	cf 90       	pop	r12
    1be8:	bf 90       	pop	r11
    1bea:	af 90       	pop	r10
    1bec:	9f 90       	pop	r9
    1bee:	8f 90       	pop	r8
    1bf0:	08 95       	ret

00001bf2 <_ZN3PID7SetModeEi>:
* Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
* when the transition from manual to auto occurs, the controller is
* automatically initialized
******************************************************************************/
void PID::SetMode(int Mode)
{
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	ec 01       	movw	r28, r24
	bool newAuto = (Mode == AUTOMATIC);
    1bfa:	11 e0       	ldi	r17, 0x01	; 1
    1bfc:	61 30       	cpi	r22, 0x01	; 1
    1bfe:	71 05       	cpc	r23, r1
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <_ZN3PID7SetModeEi+0x12>
    1c02:	10 e0       	ldi	r17, 0x00	; 0
	if(newAuto && !inAuto)
    1c04:	61 30       	cpi	r22, 0x01	; 1
    1c06:	71 05       	cpc	r23, r1
    1c08:	31 f4       	brne	.+12     	; 0x1c16 <_ZN3PID7SetModeEi+0x24>
    1c0a:	88 ad       	ldd	r24, Y+56	; 0x38
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	03 c0       	rjmp	.+6      	; 0x1c16 <_ZN3PID7SetModeEi+0x24>
	{  /*we just went from manual to auto*/
		PID::Initialize();
    1c10:	ce 01       	movw	r24, r28
    1c12:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <_ZN3PID10InitializeEv>
	}
	inAuto = newAuto;
    1c16:	18 af       	std	Y+56, r17	; 0x38
}
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	08 95       	ret

00001c20 <_ZN3PID22SetControllerDirectionEi>:
* to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
* know which one, because otherwise we may increase the output when we should
* be decreasing.  This is called from the constructor.
******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	ec 01       	movw	r28, r24
    1c2a:	8b 01       	movw	r16, r22
	if(inAuto && Direction !=controllerDirection)
    1c2c:	88 ad       	ldd	r24, Y+56	; 0x38
    1c2e:	88 23       	and	r24, r24
    1c30:	61 f1       	breq	.+88     	; 0x1c8a <_ZN3PID22SetControllerDirectionEi+0x6a>
    1c32:	88 8d       	ldd	r24, Y+24	; 0x18
    1c34:	99 8d       	ldd	r25, Y+25	; 0x19
    1c36:	86 17       	cp	r24, r22
    1c38:	97 07       	cpc	r25, r23
    1c3a:	39 f1       	breq	.+78     	; 0x1c8a <_ZN3PID22SetControllerDirectionEi+0x6a>
	{
		kp = (0 - kp);
    1c3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c3e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c40:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c42:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	cb 01       	movw	r24, r22
    1c4a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__subsf3>
    1c4e:	6c 87       	std	Y+12, r22	; 0x0c
    1c50:	7d 87       	std	Y+13, r23	; 0x0d
    1c52:	8e 87       	std	Y+14, r24	; 0x0e
    1c54:	9f 87       	std	Y+15, r25	; 0x0f
		ki = (0 - ki);
    1c56:	28 89       	ldd	r18, Y+16	; 0x10
    1c58:	39 89       	ldd	r19, Y+17	; 0x11
    1c5a:	4a 89       	ldd	r20, Y+18	; 0x12
    1c5c:	5b 89       	ldd	r21, Y+19	; 0x13
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	cb 01       	movw	r24, r22
    1c64:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__subsf3>
    1c68:	68 8b       	std	Y+16, r22	; 0x10
    1c6a:	79 8b       	std	Y+17, r23	; 0x11
    1c6c:	8a 8b       	std	Y+18, r24	; 0x12
    1c6e:	9b 8b       	std	Y+19, r25	; 0x13
		kd = (0 - kd);
    1c70:	2c 89       	ldd	r18, Y+20	; 0x14
    1c72:	3d 89       	ldd	r19, Y+21	; 0x15
    1c74:	4e 89       	ldd	r20, Y+22	; 0x16
    1c76:	5f 89       	ldd	r21, Y+23	; 0x17
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__subsf3>
    1c82:	6c 8b       	std	Y+20, r22	; 0x14
    1c84:	7d 8b       	std	Y+21, r23	; 0x15
    1c86:	8e 8b       	std	Y+22, r24	; 0x16
    1c88:	9f 8b       	std	Y+23, r25	; 0x17
	}
	controllerDirection = Direction;
    1c8a:	19 8f       	std	Y+25, r17	; 0x19
    1c8c:	08 8f       	std	Y+24, r16	; 0x18
}
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	1f 91       	pop	r17
    1c94:	0f 91       	pop	r16
    1c96:	08 95       	ret

00001c98 <_ZN3PIDC1EPdS0_S0_dddi>:

/*Constructor (...)*********************************************************
*    The parameters specified here are those for for which we can't set up
*    reliable defaults, so we need to have the user set them.
***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    1c98:	4f 92       	push	r4
    1c9a:	5f 92       	push	r5
    1c9c:	6f 92       	push	r6
    1c9e:	7f 92       	push	r7
    1ca0:	8f 92       	push	r8
    1ca2:	9f 92       	push	r9
    1ca4:	af 92       	push	r10
    1ca6:	bf 92       	push	r11
    1ca8:	cf 92       	push	r12
    1caa:	df 92       	push	r13
    1cac:	ef 92       	push	r14
    1cae:	ff 92       	push	r15
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <_ZN3PIDC1EPdS0_S0_dddi+0x22>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <_ZN3PIDC1EPdS0_S0_dddi+0x24>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	4c 01       	movw	r8, r24
    1cc2:	27 01       	movw	r4, r14
    1cc4:	38 01       	movw	r6, r16
    1cc6:	a9 82       	std	Y+1, r10	; 0x01
    1cc8:	ba 82       	std	Y+2, r11	; 0x02
    1cca:	cb 82       	std	Y+3, r12	; 0x03
    1ccc:	dc 82       	std	Y+4, r13	; 0x04
double Kp, double Ki, double Kd, int ControllerDirection)
{
	
	myOutput = Output;
    1cce:	fc 01       	movw	r30, r24
    1cd0:	55 8f       	std	Z+29, r21	; 0x1d
    1cd2:	44 8f       	std	Z+28, r20	; 0x1c
	myInput = Input;
    1cd4:	73 8f       	std	Z+27, r23	; 0x1b
    1cd6:	62 8f       	std	Z+26, r22	; 0x1a
	mySetpoint = Setpoint;
    1cd8:	37 8f       	std	Z+31, r19	; 0x1f
    1cda:	26 8f       	std	Z+30, r18	; 0x1e
	inAuto = false;
    1cdc:	10 ae       	std	Z+56, r1	; 0x38
*  here.
**************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
	if(Min >= Max) return;
	outMin = Min;
    1cde:	10 aa       	std	Z+48, r1	; 0x30
    1ce0:	11 aa       	std	Z+49, r1	; 0x31
    1ce2:	12 aa       	std	Z+50, r1	; 0x32
    1ce4:	13 aa       	std	Z+51, r1	; 0x33
	outMax = Max;
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	af e7       	ldi	r26, 0x7F	; 127
    1cec:	b3 e4       	ldi	r27, 0x43	; 67
    1cee:	84 ab       	std	Z+52, r24	; 0x34
    1cf0:	95 ab       	std	Z+53, r25	; 0x35
    1cf2:	a6 ab       	std	Z+54, r26	; 0x36
    1cf4:	b7 ab       	std	Z+55, r27	; 0x37
	inAuto = false;
	
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to
	//the arduino pwm limits

	SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    1cf6:	84 e6       	ldi	r24, 0x64	; 100
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a0 e0       	ldi	r26, 0x00	; 0
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	84 a7       	std	Z+44, r24	; 0x2c
    1d00:	95 a7       	std	Z+45, r25	; 0x2d
    1d02:	a6 a7       	std	Z+46, r26	; 0x2e
    1d04:	b7 a7       	std	Z+47, r27	; 0x2f

	PID::SetControllerDirection(ControllerDirection);
    1d06:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1d08:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1d0a:	c4 01       	movw	r24, r8
    1d0c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_ZN3PID22SetControllerDirectionEi>
	PID::SetTunings(Kp, Ki, Kd);
    1d10:	cf 88       	ldd	r12, Y+23	; 0x17
    1d12:	d8 8c       	ldd	r13, Y+24	; 0x18
    1d14:	e9 8c       	ldd	r14, Y+25	; 0x19
    1d16:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1d18:	09 81       	ldd	r16, Y+1	; 0x01
    1d1a:	1a 81       	ldd	r17, Y+2	; 0x02
    1d1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d20:	b3 01       	movw	r22, r6
    1d22:	a2 01       	movw	r20, r4
    1d24:	c4 01       	movw	r24, r8
    1d26:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZN3PID10SetTuningsEddd>

	lastTime = millis()-SampleTime;
    1d2a:	0e 94 92 19 	call	0x3324	; 0x3324 <millis>
    1d2e:	f4 01       	movw	r30, r8
    1d30:	04 a5       	ldd	r16, Z+44	; 0x2c
    1d32:	15 a5       	ldd	r17, Z+45	; 0x2d
    1d34:	26 a5       	ldd	r18, Z+46	; 0x2e
    1d36:	37 a5       	ldd	r19, Z+47	; 0x2f
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	80 1b       	sub	r24, r16
    1d3e:	91 0b       	sbc	r25, r17
    1d40:	a2 0b       	sbc	r26, r18
    1d42:	b3 0b       	sbc	r27, r19
    1d44:	80 a3       	std	Z+32, r24	; 0x20
    1d46:	91 a3       	std	Z+33, r25	; 0x21
    1d48:	a2 a3       	std	Z+34, r26	; 0x22
    1d4a:	b3 a3       	std	Z+35, r27	; 0x23
}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	df 90       	pop	r13
    1d62:	cf 90       	pop	r12
    1d64:	bf 90       	pop	r11
    1d66:	af 90       	pop	r10
    1d68:	9f 90       	pop	r9
    1d6a:	8f 90       	pop	r8
    1d6c:	7f 90       	pop	r7
    1d6e:	6f 90       	pop	r6
    1d70:	5f 90       	pop	r5
    1d72:	4f 90       	pop	r4
    1d74:	08 95       	ret

00001d76 <_Z8distanceff>:
/*-----------------------------------------------------------------------------
*  Constant Definitions
*-----------------------------------------------------------------------------*/
Magnetic mag;
float distance(float a,float b)
{
    1d76:	cf 92       	push	r12
    1d78:	df 92       	push	r13
    1d7a:	ef 92       	push	r14
    1d7c:	ff 92       	push	r15
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
	int d = abs(a - b) % 360;
    1d82:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__subsf3>
    1d86:	6b 01       	movw	r12, r22
    1d88:	7c 01       	movw	r14, r24
    1d8a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    1d8e:	ab 01       	movw	r20, r22
    1d90:	77 ff       	sbrs	r23, 7
    1d92:	04 c0       	rjmp	.+8      	; 0x1d9c <_Z8distanceff+0x26>
    1d94:	44 27       	eor	r20, r20
    1d96:	55 27       	eor	r21, r21
    1d98:	46 1b       	sub	r20, r22
    1d9a:	57 0b       	sbc	r21, r23
    1d9c:	28 e6       	ldi	r18, 0x68	; 104
    1d9e:	31 e0       	ldi	r19, 0x01	; 1
    1da0:	ca 01       	movw	r24, r20
    1da2:	b9 01       	movw	r22, r18
    1da4:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__divmodhi4>
    1da8:	ec 01       	movw	r28, r24
	int r = d > 180 ? 360 - d : d;
    1daa:	85 3b       	cpi	r24, 0xB5	; 181
    1dac:	91 05       	cpc	r25, r1
    1dae:	24 f0       	brlt	.+8      	; 0x1db8 <_Z8distanceff+0x42>
    1db0:	c9 01       	movw	r24, r18
    1db2:	8c 1b       	sub	r24, r28
    1db4:	9d 0b       	sbc	r25, r29
    1db6:	ec 01       	movw	r28, r24

	//calculate sign
	int sign = (a - b >= 0 && a - b <= 180) || (a - b <=-180 && a- b>= -360) ? 1 : -1;
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	a9 01       	movw	r20, r18
    1dbe:	c7 01       	movw	r24, r14
    1dc0:	b6 01       	movw	r22, r12
    1dc2:	0e 94 03 14 	call	0x2806	; 0x2806 <__gesf2>
    1dc6:	87 fd       	sbrc	r24, 7
    1dc8:	0a c0       	rjmp	.+20     	; 0x1dde <_Z8distanceff+0x68>
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	44 e3       	ldi	r20, 0x34	; 52
    1dd0:	53 e4       	ldi	r21, 0x43	; 67
    1dd2:	c7 01       	movw	r24, r14
    1dd4:	b6 01       	movw	r22, r12
    1dd6:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    1dda:	18 16       	cp	r1, r24
    1ddc:	a4 f4       	brge	.+40     	; 0x1e06 <_Z8distanceff+0x90>
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	44 e3       	ldi	r20, 0x34	; 52
    1de4:	53 ec       	ldi	r21, 0xC3	; 195
    1de6:	c7 01       	movw	r24, r14
    1de8:	b6 01       	movw	r22, r12
    1dea:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    1dee:	18 16       	cp	r1, r24
    1df0:	6c f0       	brlt	.+26     	; 0x1e0c <_Z8distanceff+0x96>
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	44 eb       	ldi	r20, 0xB4	; 180
    1df8:	53 ec       	ldi	r21, 0xC3	; 195
    1dfa:	c7 01       	movw	r24, r14
    1dfc:	b6 01       	movw	r22, r12
    1dfe:	0e 94 03 14 	call	0x2806	; 0x2806 <__gesf2>
    1e02:	87 fd       	sbrc	r24, 7
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <_Z8distanceff+0x96>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <_Z8distanceff+0x9a>
    1e0c:	8f ef       	ldi	r24, 0xFF	; 255
    1e0e:	9f ef       	ldi	r25, 0xFF	; 255
	r *= sign;
	return r;
    1e10:	c8 9f       	mul	r28, r24
    1e12:	b0 01       	movw	r22, r0
    1e14:	c9 9f       	mul	r28, r25
    1e16:	70 0d       	add	r23, r0
    1e18:	d8 9f       	mul	r29, r24
    1e1a:	70 0d       	add	r23, r0
    1e1c:	11 24       	eor	r1, r1
    1e1e:	07 2e       	mov	r0, r23
    1e20:	00 0c       	add	r0, r0
    1e22:	88 0b       	sbc	r24, r24
    1e24:	99 0b       	sbc	r25, r25
    1e26:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
}
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	df 90       	pop	r13
    1e34:	cf 90       	pop	r12
    1e36:	08 95       	ret

00001e38 <setup>:
PID myPID(&Input, &Output, &Setpoint,2,5,1, DIRECT);
void setup(void)
{

	//initialize the variables we're linked to
	Input = 90;
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a4 eb       	ldi	r26, 0xB4	; 180
    1e3e:	b2 e4       	ldi	r27, 0x42	; 66
    1e40:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <Input>
    1e44:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <Input+0x1>
    1e48:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <Input+0x2>
    1e4c:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <Input+0x3>
	Setpoint = 100;
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a8 ec       	ldi	r26, 0xC8	; 200
    1e56:	b2 e4       	ldi	r27, 0x42	; 66
    1e58:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Setpoint>
    1e5c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <Setpoint+0x1>
    1e60:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <Setpoint+0x2>
    1e64:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <Setpoint+0x3>

	//turn the PID on
	myPID.SetMode(AUTOMATIC);
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	8f e9       	ldi	r24, 0x9F	; 159
    1e6e:	92 e0       	ldi	r25, 0x02	; 2
    1e70:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <_ZN3PID7SetModeEi>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1e74:	26 e0       	ldi	r18, 0x06	; 6
    1e76:	40 e8       	ldi	r20, 0x80	; 128
    1e78:	55 e2       	ldi	r21, 0x25	; 37
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	87 e0       	ldi	r24, 0x07	; 7
    1e80:	93 e0       	ldi	r25, 0x03	; 3
    1e82:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <_ZN14HardwareSerial5beginEmh>

	Serial.begin(9600);

	
	/* Initialize the sensor */
	if(!mag.begin())
    1e86:	80 ee       	ldi	r24, 0xE0	; 224
    1e88:	92 e0       	ldi	r25, 0x02	; 2
    1e8a:	0e 94 31 05 	call	0xa62	; 0xa62 <_ZN6Sensor5beginEv>
    1e8e:	81 11       	cpse	r24, r1
    1e90:	07 c0       	rjmp	.+14     	; 0x1ea0 <setup+0x68>
	{
		/* There was a problem detecting the LSM303 ... check your connections */
		Serial.println("Ooops, no LSM303 detected ... Check your wiring!");
    1e92:	6f e9       	ldi	r22, 0x9F	; 159
    1e94:	71 e0       	ldi	r23, 0x01	; 1
    1e96:	87 e0       	ldi	r24, 0x07	; 7
    1e98:	93 e0       	ldi	r25, 0x03	; 3
    1e9a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <_ZN5Print7printlnEPKc>
    1e9e:	ff cf       	rjmp	.-2      	; 0x1e9e <setup+0x66>
		while(1);
	}
	pinMode(B_1A,OUTPUT);
    1ea0:	61 e0       	ldi	r22, 0x01	; 1
    1ea2:	8b e0       	ldi	r24, 0x0B	; 11
    1ea4:	0e 94 c2 1a 	call	0x3584	; 0x3584 <pinMode>
	pinMode(B_1B,OUTPUT);
    1ea8:	61 e0       	ldi	r22, 0x01	; 1
    1eaa:	8a e0       	ldi	r24, 0x0A	; 10
    1eac:	0e 94 c2 1a 	call	0x3584	; 0x3584 <pinMode>
	digitalWrite(B_1A, LOW);
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	8b e0       	ldi	r24, 0x0B	; 11
    1eb4:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <digitalWrite>
	digitalWrite(B_1B,LOW);
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	8a e0       	ldi	r24, 0x0A	; 10
    1ebc:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <digitalWrite>

00001ec0 <_Z6runForiii>:
	
}

void runFor(int power, int forMs, int direction)
{
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	8b 01       	movw	r16, r22
//	char buffer[100];
//	sprintf(buffer,"Power: %i time %i: direction %i", power, forMs, direction);
	if(direction == 1)
    1ec8:	41 30       	cpi	r20, 0x01	; 1
    1eca:	51 05       	cpc	r21, r1
    1ecc:	11 f4       	brne	.+4      	; 0x1ed2 <_Z6runForiii+0x12>
		power -=1;
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	04 c0       	rjmp	.+8      	; 0x1eda <_Z6runForiii+0x1a>
	int pin = (direction == -1 ? B_1A : B_1B);
    1ed2:	4f 3f       	cpi	r20, 0xFF	; 255
    1ed4:	2f ef       	ldi	r18, 0xFF	; 255
    1ed6:	52 07       	cpc	r21, r18
    1ed8:	11 f0       	breq	.+4      	; 0x1ede <_Z6runForiii+0x1e>
    1eda:	ca e0       	ldi	r28, 0x0A	; 10
    1edc:	01 c0       	rjmp	.+2      	; 0x1ee0 <_Z6runForiii+0x20>
    1ede:	cb e0       	ldi	r28, 0x0B	; 11
//	sprintf(buffer,"Pin %i", pin);
	analogWrite(pin,power += direction);
    1ee0:	ba 01       	movw	r22, r20
    1ee2:	68 0f       	add	r22, r24
    1ee4:	79 1f       	adc	r23, r25
    1ee6:	8c 2f       	mov	r24, r28
    1ee8:	0e 94 3a 1a 	call	0x3474	; 0x3474 <analogWrite>
	delay(forMs);
    1eec:	b8 01       	movw	r22, r16
    1eee:	11 0f       	add	r17, r17
    1ef0:	88 0b       	sbc	r24, r24
    1ef2:	99 0b       	sbc	r25, r25
    1ef4:	0e 94 c3 19 	call	0x3386	; 0x3386 <delay>
 	analogWrite(pin,0);
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	70 e0       	ldi	r23, 0x00	; 0
    1efc:	8c 2f       	mov	r24, r28
    1efe:	0e 94 3a 1a 	call	0x3474	; 0x3474 <analogWrite>
 	digitalWrite(pin, LOW);
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	8c 2f       	mov	r24, r28
//	delay(10);
	//Serial.println(buffer);
}
    1f06:	cf 91       	pop	r28
    1f08:	1f 91       	pop	r17
    1f0a:	0f 91       	pop	r16
	int pin = (direction == -1 ? B_1A : B_1B);
//	sprintf(buffer,"Pin %i", pin);
	analogWrite(pin,power += direction);
	delay(forMs);
 	analogWrite(pin,0);
 	digitalWrite(pin, LOW);
    1f0c:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <digitalWrite>

00001f10 <_Z10averageMagi>:
{
	float x;
	float y;
}	VECT;
VECT averageMag(int of)
{
    1f10:	4f 92       	push	r4
    1f12:	5f 92       	push	r5
    1f14:	6f 92       	push	r6
    1f16:	7f 92       	push	r7
    1f18:	8f 92       	push	r8
    1f1a:	9f 92       	push	r9
    1f1c:	af 92       	push	r10
    1f1e:	bf 92       	push	r11
    1f20:	cf 92       	push	r12
    1f22:	df 92       	push	r13
    1f24:	ef 92       	push	r14
    1f26:	ff 92       	push	r15
    1f28:	0f 93       	push	r16
    1f2a:	1f 93       	push	r17
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	28 97       	sbiw	r28, 0x08	; 8
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	de bf       	out	0x3e, r29	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	8c 01       	movw	r16, r24
	VECT sumVect = {0};
		
	Serial.println("Mag data");
    1f42:	60 ed       	ldi	r22, 0xD0	; 208
    1f44:	71 e0       	ldi	r23, 0x01	; 1
    1f46:	87 e0       	ldi	r24, 0x07	; 7
    1f48:	93 e0       	ldi	r25, 0x03	; 3
    1f4a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <_ZN5Print7printlnEPKc>
	float x;
	float y;
}	VECT;
VECT averageMag(int of)
{
	VECT sumVect = {0};
    1f4e:	c1 2c       	mov	r12, r1
    1f50:	d1 2c       	mov	r13, r1
    1f52:	76 01       	movw	r14, r12
    1f54:	26 01       	movw	r4, r12
    1f56:	37 01       	movw	r6, r14
		
	Serial.println("Mag data");
	for(int i = 0; i < of; i++)
    1f58:	a1 2c       	mov	r10, r1
    1f5a:	b1 2c       	mov	r11, r1
    1f5c:	a0 16       	cp	r10, r16
    1f5e:	b1 06       	cpc	r11, r17
    1f60:	0c f0       	brlt	.+2      	; 0x1f64 <_Z10averageMagi+0x54>
    1f62:	40 c0       	rjmp	.+128    	; 0x1fe4 <_Z10averageMagi+0xd4>
	{
		mag.read();
    1f64:	80 ee       	ldi	r24, 0xE0	; 224
    1f66:	92 e0       	ldi	r25, 0x02	; 2
    1f68:	0e 94 4a 05 	call	0xa94	; 0xa94 <_ZN6Sensor4readEv>
		sumVect.x += mag.x;
    1f6c:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <mag+0xc>
    1f70:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <mag+0xd>
    1f74:	40 91 ee 02 	lds	r20, 0x02EE	; 0x8002ee <mag+0xe>
    1f78:	50 91 ef 02 	lds	r21, 0x02EF	; 0x8002ef <mag+0xf>
    1f7c:	c3 01       	movw	r24, r6
    1f7e:	b2 01       	movw	r22, r4
    1f80:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__addsf3>
    1f84:	2b 01       	movw	r4, r22
    1f86:	3c 01       	movw	r6, r24
		sumVect.y += mag.y;
    1f88:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <mag+0x10>
    1f8c:	30 91 f1 02 	lds	r19, 0x02F1	; 0x8002f1 <mag+0x11>
    1f90:	40 91 f2 02 	lds	r20, 0x02F2	; 0x8002f2 <mag+0x12>
    1f94:	50 91 f3 02 	lds	r21, 0x02F3	; 0x8002f3 <mag+0x13>
    1f98:	c7 01       	movw	r24, r14
    1f9a:	b6 01       	movw	r22, r12
    1f9c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__addsf3>
    1fa0:	6b 01       	movw	r12, r22
    1fa2:	7c 01       	movw	r14, r24
		Serial.print(sumVect.x);
    1fa4:	22 e0       	ldi	r18, 0x02	; 2
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	b3 01       	movw	r22, r6
    1faa:	a2 01       	movw	r20, r4
    1fac:	87 e0       	ldi	r24, 0x07	; 7
    1fae:	93 e0       	ldi	r25, 0x03	; 3
    1fb0:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN5Print5printEdi>
		Serial.print(",");
    1fb4:	69 ed       	ldi	r22, 0xD9	; 217
    1fb6:	71 e0       	ldi	r23, 0x01	; 1
    1fb8:	87 e0       	ldi	r24, 0x07	; 7
    1fba:	93 e0       	ldi	r25, 0x03	; 3
    1fbc:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <_ZN5Print5printEPKc>
		Serial.print(sumVect.y);
    1fc0:	22 e0       	ldi	r18, 0x02	; 2
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	b7 01       	movw	r22, r14
    1fc6:	a6 01       	movw	r20, r12
    1fc8:	87 e0       	ldi	r24, 0x07	; 7
    1fca:	93 e0       	ldi	r25, 0x03	; 3
    1fcc:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN5Print5printEdi>
		Serial.print("|");
    1fd0:	6b ed       	ldi	r22, 0xDB	; 219
    1fd2:	71 e0       	ldi	r23, 0x01	; 1
    1fd4:	87 e0       	ldi	r24, 0x07	; 7
    1fd6:	93 e0       	ldi	r25, 0x03	; 3
    1fd8:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <_ZN5Print5printEPKc>
VECT averageMag(int of)
{
	VECT sumVect = {0};
		
	Serial.println("Mag data");
	for(int i = 0; i < of; i++)
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	a8 1a       	sub	r10, r24
    1fe0:	b8 0a       	sbc	r11, r24
    1fe2:	bc cf       	rjmp	.-136    	; 0x1f5c <_Z10averageMagi+0x4c>
		Serial.print(sumVect.x);
		Serial.print(",");
		Serial.print(sumVect.y);
		Serial.print("|");
	}
	sumVect.x = sumVect.x / of;
    1fe4:	b8 01       	movw	r22, r16
    1fe6:	11 0f       	add	r17, r17
    1fe8:	88 0b       	sbc	r24, r24
    1fea:	99 0b       	sbc	r25, r25
    1fec:	0e 94 2c 13 	call	0x2658	; 0x2658 <__floatsisf>
    1ff0:	4b 01       	movw	r8, r22
    1ff2:	5c 01       	movw	r10, r24
    1ff4:	9b 01       	movw	r18, r22
    1ff6:	ac 01       	movw	r20, r24
    1ff8:	c3 01       	movw	r24, r6
    1ffa:	b2 01       	movw	r22, r4
    1ffc:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    2000:	06 2f       	mov	r16, r22
    2002:	77 2e       	mov	r7, r23
    2004:	58 2e       	mov	r5, r24
    2006:	69 2e       	mov	r6, r25
	sumVect.y = sumVect.y / of;
    2008:	a5 01       	movw	r20, r10
    200a:	94 01       	movw	r18, r8
    200c:	c7 01       	movw	r24, r14
    200e:	b6 01       	movw	r22, r12
    2010:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    2014:	16 2f       	mov	r17, r22
    2016:	d7 2e       	mov	r13, r23
    2018:	7c 01       	movw	r14, r24
	Serial.println("Mag avg");
    201a:	6d ed       	ldi	r22, 0xDD	; 221
    201c:	71 e0       	ldi	r23, 0x01	; 1
    201e:	87 e0       	ldi	r24, 0x07	; 7
    2020:	93 e0       	ldi	r25, 0x03	; 3
    2022:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <_ZN5Print7printlnEPKc>
	Serial.print(sumVect.x);
    2026:	22 e0       	ldi	r18, 0x02	; 2
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 2f       	mov	r20, r16
    202c:	57 2d       	mov	r21, r7
    202e:	65 2d       	mov	r22, r5
    2030:	76 2d       	mov	r23, r6
    2032:	87 e0       	ldi	r24, 0x07	; 7
    2034:	93 e0       	ldi	r25, 0x03	; 3
    2036:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN5Print5printEdi>
	Serial.print(",");
    203a:	69 ed       	ldi	r22, 0xD9	; 217
    203c:	71 e0       	ldi	r23, 0x01	; 1
    203e:	87 e0       	ldi	r24, 0x07	; 7
    2040:	93 e0       	ldi	r25, 0x03	; 3
    2042:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <_ZN5Print5printEPKc>
	Serial.print(sumVect.y);
    2046:	22 e0       	ldi	r18, 0x02	; 2
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	41 2f       	mov	r20, r17
    204c:	5d 2d       	mov	r21, r13
    204e:	b7 01       	movw	r22, r14
    2050:	87 e0       	ldi	r24, 0x07	; 7
    2052:	93 e0       	ldi	r25, 0x03	; 3
    2054:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN5Print5printEdi>
	Serial.println();
    2058:	87 e0       	ldi	r24, 0x07	; 7
    205a:	93 e0       	ldi	r25, 0x03	; 3
    205c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN5Print7printlnEv>
	return sumVect;
    2060:	80 2f       	mov	r24, r16
    2062:	97 2d       	mov	r25, r7
    2064:	a5 2d       	mov	r26, r5
    2066:	b6 2d       	mov	r27, r6
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	ab 83       	std	Y+3, r26	; 0x03
    206e:	bc 83       	std	Y+4, r27	; 0x04
    2070:	81 2f       	mov	r24, r17
    2072:	9d 2d       	mov	r25, r13
    2074:	d7 01       	movw	r26, r14
    2076:	8d 83       	std	Y+5, r24	; 0x05
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	af 83       	std	Y+7, r26	; 0x07
    207c:	b8 87       	std	Y+8, r27	; 0x08
    207e:	20 2f       	mov	r18, r16
    2080:	3a 81       	ldd	r19, Y+2	; 0x02
    2082:	4b 81       	ldd	r20, Y+3	; 0x03
    2084:	5c 81       	ldd	r21, Y+4	; 0x04
    2086:	61 2f       	mov	r22, r17
    2088:	7e 81       	ldd	r23, Y+6	; 0x06
}
    208a:	8f 81       	ldd	r24, Y+7	; 0x07
    208c:	98 85       	ldd	r25, Y+8	; 0x08
    208e:	28 96       	adiw	r28, 0x08	; 8
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	df 90       	pop	r13
    20a8:	cf 90       	pop	r12
    20aa:	bf 90       	pop	r11
    20ac:	af 90       	pop	r10
    20ae:	9f 90       	pop	r9
    20b0:	8f 90       	pop	r8
    20b2:	7f 90       	pop	r7
    20b4:	6f 90       	pop	r6
    20b6:	5f 90       	pop	r5
    20b8:	4f 90       	pop	r4
    20ba:	08 95       	ret

000020bc <_Z10GetHeadingv>:


float GetHeading()
{
    20bc:	8f 92       	push	r8
    20be:	9f 92       	push	r9
    20c0:	af 92       	push	r10
    20c2:	bf 92       	push	r11
    20c4:	cf 92       	push	r12
    20c6:	df 92       	push	r13
    20c8:	ef 92       	push	r14
    20ca:	ff 92       	push	r15
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	28 97       	sbiw	r28, 0x08	; 8
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
	// Calculate the angle of the vector y,x
	auto avgVect = averageMag(20);
    20e0:	84 e1       	ldi	r24, 0x14	; 20
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_Z10averageMagi>
    20e8:	29 83       	std	Y+1, r18	; 0x01
    20ea:	3a 83       	std	Y+2, r19	; 0x02
    20ec:	4b 83       	std	Y+3, r20	; 0x03
    20ee:	5c 83       	std	Y+4, r21	; 0x04
    20f0:	6d 83       	std	Y+5, r22	; 0x05
    20f2:	7e 83       	std	Y+6, r23	; 0x06
    20f4:	8f 83       	std	Y+7, r24	; 0x07
    20f6:	98 87       	std	Y+8, r25	; 0x08
    20f8:	89 80       	ldd	r8, Y+1	; 0x01
    20fa:	9a 80       	ldd	r9, Y+2	; 0x02
    20fc:	ab 80       	ldd	r10, Y+3	; 0x03
    20fe:	bc 80       	ldd	r11, Y+4	; 0x04
    2100:	cd 80       	ldd	r12, Y+5	; 0x05
    2102:	de 80       	ldd	r13, Y+6	; 0x06
    2104:	ef 80       	ldd	r14, Y+7	; 0x07
    2106:	f8 84       	ldd	r15, Y+8	; 0x08

	float heading = 0.0;
	
	if(avgVect.y>0)
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	a9 01       	movw	r20, r18
    210e:	c7 01       	movw	r24, r14
    2110:	b6 01       	movw	r22, r12
    2112:	0e 94 03 14 	call	0x2806	; 0x2806 <__gesf2>
    2116:	18 16       	cp	r1, r24
    2118:	dc f4       	brge	.+54     	; 0x2150 <_Z10GetHeadingv+0x94>
	heading = 90 - atan(avgVect.x/avgVect.y)*180/PI;
    211a:	a7 01       	movw	r20, r14
    211c:	96 01       	movw	r18, r12
    211e:	c5 01       	movw	r24, r10
    2120:	b4 01       	movw	r22, r8
    2122:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    2126:	0e 94 4e 12 	call	0x249c	; 0x249c <atan>
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	44 e3       	ldi	r20, 0x34	; 52
    2130:	53 e4       	ldi	r21, 0x43	; 67
    2132:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
    2136:	2b ed       	ldi	r18, 0xDB	; 219
    2138:	3f e0       	ldi	r19, 0x0F	; 15
    213a:	49 e4       	ldi	r20, 0x49	; 73
    213c:	50 e4       	ldi	r21, 0x40	; 64
    213e:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    2142:	9b 01       	movw	r18, r22
    2144:	ac 01       	movw	r20, r24
    2146:	60 e0       	ldi	r22, 0x00	; 0
    2148:	70 e0       	ldi	r23, 0x00	; 0
    214a:	84 eb       	ldi	r24, 0xB4	; 180
    214c:	92 e4       	ldi	r25, 0x42	; 66
    214e:	23 c0       	rjmp	.+70     	; 0x2196 <_Z10GetHeadingv+0xda>
	else if(avgVect.y<0)
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	a9 01       	movw	r20, r18
    2156:	c7 01       	movw	r24, r14
    2158:	b6 01       	movw	r22, r12
    215a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    215e:	87 ff       	sbrs	r24, 7
    2160:	1d c0       	rjmp	.+58     	; 0x219c <_Z10GetHeadingv+0xe0>
	heading = 270 - atan(avgVect.x/avgVect.y)*180/PI;
    2162:	a7 01       	movw	r20, r14
    2164:	96 01       	movw	r18, r12
    2166:	c5 01       	movw	r24, r10
    2168:	b4 01       	movw	r22, r8
    216a:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    216e:	0e 94 4e 12 	call	0x249c	; 0x249c <atan>
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	44 e3       	ldi	r20, 0x34	; 52
    2178:	53 e4       	ldi	r21, 0x43	; 67
    217a:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
    217e:	2b ed       	ldi	r18, 0xDB	; 219
    2180:	3f e0       	ldi	r19, 0x0F	; 15
    2182:	49 e4       	ldi	r20, 0x49	; 73
    2184:	50 e4       	ldi	r21, 0x40	; 64
    2186:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
    218a:	9b 01       	movw	r18, r22
    218c:	ac 01       	movw	r20, r24
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	70 e0       	ldi	r23, 0x00	; 0
    2192:	87 e8       	ldi	r24, 0x87	; 135
    2194:	93 e4       	ldi	r25, 0x43	; 67
    2196:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__subsf3>
    219a:	1a c0       	rjmp	.+52     	; 0x21d0 <_Z10GetHeadingv+0x114>
	else if (avgVect.y==0 && avgVect.x < 0)
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	a9 01       	movw	r20, r18
    21a2:	c7 01       	movw	r24, r14
    21a4:	b6 01       	movw	r22, r12
    21a6:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    21aa:	81 11       	cpse	r24, r1
    21ac:	0e c0       	rjmp	.+28     	; 0x21ca <_Z10GetHeadingv+0x10e>
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	a9 01       	movw	r20, r18
    21b4:	c5 01       	movw	r24, r10
    21b6:	b4 01       	movw	r22, r8
    21b8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    21bc:	87 ff       	sbrs	r24, 7
    21be:	05 c0       	rjmp	.+10     	; 0x21ca <_Z10GetHeadingv+0x10e>
	heading = 180;
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	84 e3       	ldi	r24, 0x34	; 52
    21c6:	93 e4       	ldi	r25, 0x43	; 67
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <_Z10GetHeadingv+0x114>
float GetHeading()
{
	// Calculate the angle of the vector y,x
	auto avgVect = averageMag(20);

	float heading = 0.0;
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	cb 01       	movw	r24, r22
	else if (avgVect.y==0 && avgVect.x < 0)
	heading = 180;
	else if (avgVect.y==0 && avgVect.x > 0)
	heading = 0.0;
	return heading;
}
    21d0:	28 96       	adiw	r28, 0x08	; 8
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	ff 90       	pop	r15
    21e2:	ef 90       	pop	r14
    21e4:	df 90       	pop	r13
    21e6:	cf 90       	pop	r12
    21e8:	bf 90       	pop	r11
    21ea:	af 90       	pop	r10
    21ec:	9f 90       	pop	r9
    21ee:	8f 90       	pop	r8
    21f0:	08 95       	ret

000021f2 <loop>:

float setPoint = 0;
int loopCount = 0;
void loop(void)
{
    21f2:	4f 92       	push	r4
    21f4:	5f 92       	push	r5
    21f6:	6f 92       	push	r6
    21f8:	7f 92       	push	r7
    21fa:	af 92       	push	r10
    21fc:	bf 92       	push	r11
    21fe:	cf 92       	push	r12
    2200:	df 92       	push	r13
    2202:	ef 92       	push	r14
    2204:	ff 92       	push	r15
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	c4 56       	subi	r28, 0x64	; 100
    2214:	d1 09       	sbc	r29, r1
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
	/* Get a new sensor event */
	
// 		if((loopCount++ % 500) == 0)
// 			setPoint += 90;
		float heading = GetHeading();
    2220:	0e 94 5e 10 	call	0x20bc	; 0x20bc <_Z10GetHeadingv>
    2224:	2b 01       	movw	r4, r22
    2226:	3c 01       	movw	r6, r24
		
		char buffer[100];
		float dist = distance(heading,setPoint);
    2228:	20 91 9b 02 	lds	r18, 0x029B	; 0x80029b <setPoint>
    222c:	30 91 9c 02 	lds	r19, 0x029C	; 0x80029c <setPoint+0x1>
    2230:	40 91 9d 02 	lds	r20, 0x029D	; 0x80029d <setPoint+0x2>
    2234:	50 91 9e 02 	lds	r21, 0x029E	; 0x80029e <setPoint+0x3>
    2238:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_Z8distanceff>
    223c:	6b 01       	movw	r12, r22
    223e:	7c 01       	movw	r14, r24
		Serial.println(buffer);
    2240:	ce 01       	movw	r24, r28
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	5c 01       	movw	r10, r24
    2246:	bc 01       	movw	r22, r24
    2248:	87 e0       	ldi	r24, 0x07	; 7
    224a:	93 e0       	ldi	r25, 0x03	; 3
    224c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <_ZN5Print7printlnEPKc>
		int travelFor = max(min(abs(dist),100),2);
    2250:	c7 01       	movw	r24, r14
    2252:	b6 01       	movw	r22, r12
    2254:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    2258:	9b 01       	movw	r18, r22
    225a:	2d 59       	subi	r18, 0x9D	; 157
    225c:	3f 4f       	sbci	r19, 0xFF	; 255
    225e:	27 3c       	cpi	r18, 0xC7	; 199
    2260:	31 05       	cpc	r19, r1
    2262:	68 f4       	brcc	.+26     	; 0x227e <loop+0x8c>
    2264:	8b 01       	movw	r16, r22
    2266:	77 ff       	sbrs	r23, 7
    2268:	04 c0       	rjmp	.+8      	; 0x2272 <loop+0x80>
    226a:	00 27       	eor	r16, r16
    226c:	11 27       	eor	r17, r17
    226e:	06 1b       	sub	r16, r22
    2270:	17 0b       	sbc	r17, r23
    2272:	02 30       	cpi	r16, 0x02	; 2
    2274:	11 05       	cpc	r17, r1
    2276:	2c f4       	brge	.+10     	; 0x2282 <loop+0x90>
    2278:	02 e0       	ldi	r16, 0x02	; 2
    227a:	10 e0       	ldi	r17, 0x00	; 0
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <loop+0x90>
    227e:	04 e6       	ldi	r16, 0x64	; 100
    2280:	10 e0       	ldi	r17, 0x00	; 0
		sprintf(buffer,"H\t\t%i\t\tS\t\t%i\t\tD\t\t%i\t\tT\t\t%i", (int)heading,(int)setPoint,  (int)dist,(int)travelFor);
    2282:	1f 93       	push	r17
    2284:	0f 93       	push	r16
    2286:	7f 93       	push	r23
    2288:	6f 93       	push	r22
    228a:	60 91 9b 02 	lds	r22, 0x029B	; 0x80029b <setPoint>
    228e:	70 91 9c 02 	lds	r23, 0x029C	; 0x80029c <setPoint+0x1>
    2292:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <setPoint+0x2>
    2296:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <setPoint+0x3>
    229a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    229e:	7f 93       	push	r23
    22a0:	6f 93       	push	r22
    22a2:	c3 01       	movw	r24, r6
    22a4:	b2 01       	movw	r22, r4
    22a6:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fixsfsi>
    22aa:	7f 93       	push	r23
    22ac:	6f 93       	push	r22
    22ae:	85 ee       	ldi	r24, 0xE5	; 229
    22b0:	91 e0       	ldi	r25, 0x01	; 1
    22b2:	9f 93       	push	r25
    22b4:	8f 93       	push	r24
    22b6:	bf 92       	push	r11
    22b8:	af 92       	push	r10
    22ba:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <sprintf>
		if(dist < -5)
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 ea       	ldi	r20, 0xA0	; 160
    22ce:	50 ec       	ldi	r21, 0xC0	; 192
    22d0:	c7 01       	movw	r24, r14
    22d2:	b6 01       	movw	r22, r12
    22d4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    22d8:	87 ff       	sbrs	r24, 7
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <loop+0xf0>
			runFor(250, travelFor, 1);
    22dc:	41 e0       	ldi	r20, 0x01	; 1
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	0c c0       	rjmp	.+24     	; 0x22fa <loop+0x108>
		else if(dist > 5)
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 ea       	ldi	r20, 0xA0	; 160
    22e8:	50 e4       	ldi	r21, 0x40	; 64
    22ea:	c7 01       	movw	r24, r14
    22ec:	b6 01       	movw	r22, r12
    22ee:	0e 94 03 14 	call	0x2806	; 0x2806 <__gesf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	3c f4       	brge	.+14     	; 0x2304 <loop+0x112>
			runFor(250, travelFor, -1);
    22f6:	4f ef       	ldi	r20, 0xFF	; 255
    22f8:	5f ef       	ldi	r21, 0xFF	; 255
    22fa:	b8 01       	movw	r22, r16
    22fc:	8a ef       	ldi	r24, 0xFA	; 250
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_Z6runForiii>
			
		delay(80);
    2304:	60 e5       	ldi	r22, 0x50	; 80
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 c3 19 	call	0x3386	; 0x3386 <delay>
	
// 	runFor(200, 200, 1);
// 	runFor(250, 200, -1);
}
    2310:	cc 59       	subi	r28, 0x9C	; 156
    2312:	df 4f       	sbci	r29, 0xFF	; 255
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	bf 90       	pop	r11
    2330:	af 90       	pop	r10
    2332:	7f 90       	pop	r7
    2334:	6f 90       	pop	r6
    2336:	5f 90       	pop	r5
    2338:	4f 90       	pop	r4
    233a:	08 95       	ret

0000233c <_GLOBAL__sub_I_serialConnection>:
    233c:	af 92       	push	r10
    233e:	bf 92       	push	r11
    2340:	cf 92       	push	r12
    2342:	df 92       	push	r13
    2344:	ef 92       	push	r14
    2346:	ff 92       	push	r15
    2348:	0f 93       	push	r16
    234a:	1f 93       	push	r17
/*-----------------------------------------------------------------------------
*  Setup Software Serial to allow for both RF communication and USB communication
*    RX is digital pin 8 (connect to TX/DOUT of RF Device)
*    TX is digital pin 9 (connect to RX/DIN of RF Device)
*-----------------------------------------------------------------------------*/
ArdusatSerial serialConnection(SERIAL_MODE_HARDWARE_AND_SOFTWARE, 8, 9);
    234c:	00 e0       	ldi	r16, 0x00	; 0
    234e:	29 e0       	ldi	r18, 0x09	; 9
    2350:	48 e0       	ldi	r20, 0x08	; 8
    2352:	62 e0       	ldi	r22, 0x02	; 2
    2354:	88 ef       	ldi	r24, 0xF8	; 248
    2356:	92 e0       	ldi	r25, 0x02	; 2
    2358:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN13ArdusatSerialC1E10serialModehhb>

/*-----------------------------------------------------------------------------
*  Constant Definitions
*-----------------------------------------------------------------------------*/
Magnetic mag;
    235c:	80 ee       	ldi	r24, 0xE0	; 224
    235e:	92 e0       	ldi	r25, 0x02	; 2
    2360:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN8MagneticC1Ev>
	int sign = (a - b >= 0 && a - b <= 180) || (a - b <=-180 && a- b>= -360) ? 1 : -1;
	r *= sign;
	return r;
}
double Setpoint = 100, Input, Output;
PID myPID(&Input, &Output, &Setpoint,2,5,1, DIRECT);
    2364:	1f 92       	push	r1
    2366:	1f 92       	push	r1
    2368:	8f e3       	ldi	r24, 0x3F	; 63
    236a:	8f 93       	push	r24
    236c:	80 e8       	ldi	r24, 0x80	; 128
    236e:	8f 93       	push	r24
    2370:	1f 92       	push	r1
    2372:	1f 92       	push	r1
    2374:	a1 2c       	mov	r10, r1
    2376:	b1 2c       	mov	r11, r1
    2378:	80 ea       	ldi	r24, 0xA0	; 160
    237a:	c8 2e       	mov	r12, r24
    237c:	80 e4       	ldi	r24, 0x40	; 64
    237e:	d8 2e       	mov	r13, r24
    2380:	e1 2c       	mov	r14, r1
    2382:	f1 2c       	mov	r15, r1
    2384:	00 e0       	ldi	r16, 0x00	; 0
    2386:	10 e4       	ldi	r17, 0x40	; 64
    2388:	28 e0       	ldi	r18, 0x08	; 8
    238a:	31 e0       	ldi	r19, 0x01	; 1
    238c:	48 ed       	ldi	r20, 0xD8	; 216
    238e:	52 e0       	ldi	r21, 0x02	; 2
    2390:	6c ed       	ldi	r22, 0xDC	; 220
    2392:	72 e0       	ldi	r23, 0x02	; 2
    2394:	8f e9       	ldi	r24, 0x9F	; 159
    2396:	92 e0       	ldi	r25, 0x02	; 2
    2398:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN3PIDC1EPdS0_S0_dddi>
			
		delay(80);
	
// 	runFor(200, 200, 1);
// 	runFor(250, 200, -1);
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	1f 91       	pop	r17
    23aa:	0f 91       	pop	r16
    23ac:	ff 90       	pop	r15
    23ae:	ef 90       	pop	r14
    23b0:	df 90       	pop	r13
    23b2:	cf 90       	pop	r12
    23b4:	bf 90       	pop	r11
    23b6:	af 90       	pop	r10
    23b8:	08 95       	ret

000023ba <_GLOBAL__sub_D_serialConnection>:
/*-----------------------------------------------------------------------------
*  Setup Software Serial to allow for both RF communication and USB communication
*    RX is digital pin 8 (connect to TX/DOUT of RF Device)
*    TX is digital pin 9 (connect to RX/DIN of RF Device)
*-----------------------------------------------------------------------------*/
ArdusatSerial serialConnection(SERIAL_MODE_HARDWARE_AND_SOFTWARE, 8, 9);
    23ba:	88 ef       	ldi	r24, 0xF8	; 248
    23bc:	92 e0       	ldi	r25, 0x02	; 2
    23be:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <_ZN13ArdusatSerialD1Ev>

000023c2 <__subsf3>:
    23c2:	50 58       	subi	r21, 0x80	; 128

000023c4 <__addsf3>:
    23c4:	bb 27       	eor	r27, r27
    23c6:	aa 27       	eor	r26, r26
    23c8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__addsf3x>
    23cc:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__fp_round>
    23d0:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fp_pscA>
    23d4:	38 f0       	brcs	.+14     	; 0x23e4 <__addsf3+0x20>
    23d6:	0e 94 c2 13 	call	0x2784	; 0x2784 <__fp_pscB>
    23da:	20 f0       	brcs	.+8      	; 0x23e4 <__addsf3+0x20>
    23dc:	39 f4       	brne	.+14     	; 0x23ec <__addsf3+0x28>
    23de:	9f 3f       	cpi	r25, 0xFF	; 255
    23e0:	19 f4       	brne	.+6      	; 0x23e8 <__addsf3+0x24>
    23e2:	26 f4       	brtc	.+8      	; 0x23ec <__addsf3+0x28>
    23e4:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_nan>
    23e8:	0e f4       	brtc	.+2      	; 0x23ec <__addsf3+0x28>
    23ea:	e0 95       	com	r30
    23ec:	e7 fb       	bst	r30, 7
    23ee:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>

000023f2 <__addsf3x>:
    23f2:	e9 2f       	mov	r30, r25
    23f4:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__fp_split3>
    23f8:	58 f3       	brcs	.-42     	; 0x23d0 <__addsf3+0xc>
    23fa:	ba 17       	cp	r27, r26
    23fc:	62 07       	cpc	r22, r18
    23fe:	73 07       	cpc	r23, r19
    2400:	84 07       	cpc	r24, r20
    2402:	95 07       	cpc	r25, r21
    2404:	20 f0       	brcs	.+8      	; 0x240e <__addsf3x+0x1c>
    2406:	79 f4       	brne	.+30     	; 0x2426 <__addsf3x+0x34>
    2408:	a6 f5       	brtc	.+104    	; 0x2472 <__addsf3x+0x80>
    240a:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_zero>
    240e:	0e f4       	brtc	.+2      	; 0x2412 <__addsf3x+0x20>
    2410:	e0 95       	com	r30
    2412:	0b 2e       	mov	r0, r27
    2414:	ba 2f       	mov	r27, r26
    2416:	a0 2d       	mov	r26, r0
    2418:	0b 01       	movw	r0, r22
    241a:	b9 01       	movw	r22, r18
    241c:	90 01       	movw	r18, r0
    241e:	0c 01       	movw	r0, r24
    2420:	ca 01       	movw	r24, r20
    2422:	a0 01       	movw	r20, r0
    2424:	11 24       	eor	r1, r1
    2426:	ff 27       	eor	r31, r31
    2428:	59 1b       	sub	r21, r25
    242a:	99 f0       	breq	.+38     	; 0x2452 <__addsf3x+0x60>
    242c:	59 3f       	cpi	r21, 0xF9	; 249
    242e:	50 f4       	brcc	.+20     	; 0x2444 <__addsf3x+0x52>
    2430:	50 3e       	cpi	r21, 0xE0	; 224
    2432:	68 f1       	brcs	.+90     	; 0x248e <__addsf3x+0x9c>
    2434:	1a 16       	cp	r1, r26
    2436:	f0 40       	sbci	r31, 0x00	; 0
    2438:	a2 2f       	mov	r26, r18
    243a:	23 2f       	mov	r18, r19
    243c:	34 2f       	mov	r19, r20
    243e:	44 27       	eor	r20, r20
    2440:	58 5f       	subi	r21, 0xF8	; 248
    2442:	f3 cf       	rjmp	.-26     	; 0x242a <__addsf3x+0x38>
    2444:	46 95       	lsr	r20
    2446:	37 95       	ror	r19
    2448:	27 95       	ror	r18
    244a:	a7 95       	ror	r26
    244c:	f0 40       	sbci	r31, 0x00	; 0
    244e:	53 95       	inc	r21
    2450:	c9 f7       	brne	.-14     	; 0x2444 <__addsf3x+0x52>
    2452:	7e f4       	brtc	.+30     	; 0x2472 <__addsf3x+0x80>
    2454:	1f 16       	cp	r1, r31
    2456:	ba 0b       	sbc	r27, r26
    2458:	62 0b       	sbc	r22, r18
    245a:	73 0b       	sbc	r23, r19
    245c:	84 0b       	sbc	r24, r20
    245e:	ba f0       	brmi	.+46     	; 0x248e <__addsf3x+0x9c>
    2460:	91 50       	subi	r25, 0x01	; 1
    2462:	a1 f0       	breq	.+40     	; 0x248c <__addsf3x+0x9a>
    2464:	ff 0f       	add	r31, r31
    2466:	bb 1f       	adc	r27, r27
    2468:	66 1f       	adc	r22, r22
    246a:	77 1f       	adc	r23, r23
    246c:	88 1f       	adc	r24, r24
    246e:	c2 f7       	brpl	.-16     	; 0x2460 <__addsf3x+0x6e>
    2470:	0e c0       	rjmp	.+28     	; 0x248e <__addsf3x+0x9c>
    2472:	ba 0f       	add	r27, r26
    2474:	62 1f       	adc	r22, r18
    2476:	73 1f       	adc	r23, r19
    2478:	84 1f       	adc	r24, r20
    247a:	48 f4       	brcc	.+18     	; 0x248e <__addsf3x+0x9c>
    247c:	87 95       	ror	r24
    247e:	77 95       	ror	r23
    2480:	67 95       	ror	r22
    2482:	b7 95       	ror	r27
    2484:	f7 95       	ror	r31
    2486:	9e 3f       	cpi	r25, 0xFE	; 254
    2488:	08 f0       	brcs	.+2      	; 0x248c <__addsf3x+0x9a>
    248a:	b0 cf       	rjmp	.-160    	; 0x23ec <__addsf3+0x28>
    248c:	93 95       	inc	r25
    248e:	88 0f       	add	r24, r24
    2490:	08 f0       	brcs	.+2      	; 0x2494 <__addsf3x+0xa2>
    2492:	99 27       	eor	r25, r25
    2494:	ee 0f       	add	r30, r30
    2496:	97 95       	ror	r25
    2498:	87 95       	ror	r24
    249a:	08 95       	ret

0000249c <atan>:
    249c:	df 93       	push	r29
    249e:	dd 27       	eor	r29, r29
    24a0:	b9 2f       	mov	r27, r25
    24a2:	bf 77       	andi	r27, 0x7F	; 127
    24a4:	40 e8       	ldi	r20, 0x80	; 128
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	16 16       	cp	r1, r22
    24aa:	17 06       	cpc	r1, r23
    24ac:	48 07       	cpc	r20, r24
    24ae:	5b 07       	cpc	r21, r27
    24b0:	18 f4       	brcc	.+6      	; 0x24b8 <atan+0x1c>
    24b2:	d9 2f       	mov	r29, r25
    24b4:	0e 94 08 14 	call	0x2810	; 0x2810 <inverse>
    24b8:	9f 93       	push	r25
    24ba:	8f 93       	push	r24
    24bc:	7f 93       	push	r23
    24be:	6f 93       	push	r22
    24c0:	0e 94 b0 14 	call	0x2960	; 0x2960 <square>
    24c4:	e6 e9       	ldi	r30, 0x96	; 150
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	0e 94 94 13 	call	0x2728	; 0x2728 <__fp_powser>
    24cc:	0e 94 c9 13 	call	0x2792	; 0x2792 <__fp_round>
    24d0:	2f 91       	pop	r18
    24d2:	3f 91       	pop	r19
    24d4:	4f 91       	pop	r20
    24d6:	5f 91       	pop	r21
    24d8:	0e 94 56 14 	call	0x28ac	; 0x28ac <__mulsf3x>
    24dc:	dd 23       	and	r29, r29
    24de:	51 f0       	breq	.+20     	; 0x24f4 <atan+0x58>
    24e0:	90 58       	subi	r25, 0x80	; 128
    24e2:	a2 ea       	ldi	r26, 0xA2	; 162
    24e4:	2a ed       	ldi	r18, 0xDA	; 218
    24e6:	3f e0       	ldi	r19, 0x0F	; 15
    24e8:	49 ec       	ldi	r20, 0xC9	; 201
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	d0 78       	andi	r29, 0x80	; 128
    24ee:	5d 27       	eor	r21, r29
    24f0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__addsf3x>
    24f4:	df 91       	pop	r29
    24f6:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__fp_round>

000024fa <__cmpsf2>:
    24fa:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_cmp>
    24fe:	08 f4       	brcc	.+2      	; 0x2502 <__cmpsf2+0x8>
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	08 95       	ret

00002504 <__divsf3>:
    2504:	0e 94 96 12 	call	0x252c	; 0x252c <__divsf3x>
    2508:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__fp_round>
    250c:	0e 94 c2 13 	call	0x2784	; 0x2784 <__fp_pscB>
    2510:	58 f0       	brcs	.+22     	; 0x2528 <__divsf3+0x24>
    2512:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fp_pscA>
    2516:	40 f0       	brcs	.+16     	; 0x2528 <__divsf3+0x24>
    2518:	29 f4       	brne	.+10     	; 0x2524 <__divsf3+0x20>
    251a:	5f 3f       	cpi	r21, 0xFF	; 255
    251c:	29 f0       	breq	.+10     	; 0x2528 <__divsf3+0x24>
    251e:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>
    2522:	51 11       	cpse	r21, r1
    2524:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>
    2528:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_nan>

0000252c <__divsf3x>:
    252c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__fp_split3>
    2530:	68 f3       	brcs	.-38     	; 0x250c <__divsf3+0x8>

00002532 <__divsf3_pse>:
    2532:	99 23       	and	r25, r25
    2534:	b1 f3       	breq	.-20     	; 0x2522 <__divsf3+0x1e>
    2536:	55 23       	and	r21, r21
    2538:	91 f3       	breq	.-28     	; 0x251e <__divsf3+0x1a>
    253a:	95 1b       	sub	r25, r21
    253c:	55 0b       	sbc	r21, r21
    253e:	bb 27       	eor	r27, r27
    2540:	aa 27       	eor	r26, r26
    2542:	62 17       	cp	r22, r18
    2544:	73 07       	cpc	r23, r19
    2546:	84 07       	cpc	r24, r20
    2548:	38 f0       	brcs	.+14     	; 0x2558 <__divsf3_pse+0x26>
    254a:	9f 5f       	subi	r25, 0xFF	; 255
    254c:	5f 4f       	sbci	r21, 0xFF	; 255
    254e:	22 0f       	add	r18, r18
    2550:	33 1f       	adc	r19, r19
    2552:	44 1f       	adc	r20, r20
    2554:	aa 1f       	adc	r26, r26
    2556:	a9 f3       	breq	.-22     	; 0x2542 <__divsf3_pse+0x10>
    2558:	35 d0       	rcall	.+106    	; 0x25c4 <__divsf3_pse+0x92>
    255a:	0e 2e       	mov	r0, r30
    255c:	3a f0       	brmi	.+14     	; 0x256c <__divsf3_pse+0x3a>
    255e:	e0 e8       	ldi	r30, 0x80	; 128
    2560:	32 d0       	rcall	.+100    	; 0x25c6 <__divsf3_pse+0x94>
    2562:	91 50       	subi	r25, 0x01	; 1
    2564:	50 40       	sbci	r21, 0x00	; 0
    2566:	e6 95       	lsr	r30
    2568:	00 1c       	adc	r0, r0
    256a:	ca f7       	brpl	.-14     	; 0x255e <__divsf3_pse+0x2c>
    256c:	2b d0       	rcall	.+86     	; 0x25c4 <__divsf3_pse+0x92>
    256e:	fe 2f       	mov	r31, r30
    2570:	29 d0       	rcall	.+82     	; 0x25c4 <__divsf3_pse+0x92>
    2572:	66 0f       	add	r22, r22
    2574:	77 1f       	adc	r23, r23
    2576:	88 1f       	adc	r24, r24
    2578:	bb 1f       	adc	r27, r27
    257a:	26 17       	cp	r18, r22
    257c:	37 07       	cpc	r19, r23
    257e:	48 07       	cpc	r20, r24
    2580:	ab 07       	cpc	r26, r27
    2582:	b0 e8       	ldi	r27, 0x80	; 128
    2584:	09 f0       	breq	.+2      	; 0x2588 <__divsf3_pse+0x56>
    2586:	bb 0b       	sbc	r27, r27
    2588:	80 2d       	mov	r24, r0
    258a:	bf 01       	movw	r22, r30
    258c:	ff 27       	eor	r31, r31
    258e:	93 58       	subi	r25, 0x83	; 131
    2590:	5f 4f       	sbci	r21, 0xFF	; 255
    2592:	3a f0       	brmi	.+14     	; 0x25a2 <__divsf3_pse+0x70>
    2594:	9e 3f       	cpi	r25, 0xFE	; 254
    2596:	51 05       	cpc	r21, r1
    2598:	78 f0       	brcs	.+30     	; 0x25b8 <__divsf3_pse+0x86>
    259a:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>
    259e:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>
    25a2:	5f 3f       	cpi	r21, 0xFF	; 255
    25a4:	e4 f3       	brlt	.-8      	; 0x259e <__divsf3_pse+0x6c>
    25a6:	98 3e       	cpi	r25, 0xE8	; 232
    25a8:	d4 f3       	brlt	.-12     	; 0x259e <__divsf3_pse+0x6c>
    25aa:	86 95       	lsr	r24
    25ac:	77 95       	ror	r23
    25ae:	67 95       	ror	r22
    25b0:	b7 95       	ror	r27
    25b2:	f7 95       	ror	r31
    25b4:	9f 5f       	subi	r25, 0xFF	; 255
    25b6:	c9 f7       	brne	.-14     	; 0x25aa <__divsf3_pse+0x78>
    25b8:	88 0f       	add	r24, r24
    25ba:	91 1d       	adc	r25, r1
    25bc:	96 95       	lsr	r25
    25be:	87 95       	ror	r24
    25c0:	97 f9       	bld	r25, 7
    25c2:	08 95       	ret
    25c4:	e1 e0       	ldi	r30, 0x01	; 1
    25c6:	66 0f       	add	r22, r22
    25c8:	77 1f       	adc	r23, r23
    25ca:	88 1f       	adc	r24, r24
    25cc:	bb 1f       	adc	r27, r27
    25ce:	62 17       	cp	r22, r18
    25d0:	73 07       	cpc	r23, r19
    25d2:	84 07       	cpc	r24, r20
    25d4:	ba 07       	cpc	r27, r26
    25d6:	20 f0       	brcs	.+8      	; 0x25e0 <__divsf3_pse+0xae>
    25d8:	62 1b       	sub	r22, r18
    25da:	73 0b       	sbc	r23, r19
    25dc:	84 0b       	sbc	r24, r20
    25de:	ba 0b       	sbc	r27, r26
    25e0:	ee 1f       	adc	r30, r30
    25e2:	88 f7       	brcc	.-30     	; 0x25c6 <__divsf3_pse+0x94>
    25e4:	e0 95       	com	r30
    25e6:	08 95       	ret

000025e8 <__fixsfsi>:
    25e8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fixunssfsi>
    25ec:	68 94       	set
    25ee:	b1 11       	cpse	r27, r1
    25f0:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>
    25f4:	08 95       	ret

000025f6 <__fixunssfsi>:
    25f6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__fp_splitA>
    25fa:	88 f0       	brcs	.+34     	; 0x261e <__fixunssfsi+0x28>
    25fc:	9f 57       	subi	r25, 0x7F	; 127
    25fe:	98 f0       	brcs	.+38     	; 0x2626 <__fixunssfsi+0x30>
    2600:	b9 2f       	mov	r27, r25
    2602:	99 27       	eor	r25, r25
    2604:	b7 51       	subi	r27, 0x17	; 23
    2606:	b0 f0       	brcs	.+44     	; 0x2634 <__fixunssfsi+0x3e>
    2608:	e1 f0       	breq	.+56     	; 0x2642 <__fixunssfsi+0x4c>
    260a:	66 0f       	add	r22, r22
    260c:	77 1f       	adc	r23, r23
    260e:	88 1f       	adc	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	1a f0       	brmi	.+6      	; 0x261a <__fixunssfsi+0x24>
    2614:	ba 95       	dec	r27
    2616:	c9 f7       	brne	.-14     	; 0x260a <__fixunssfsi+0x14>
    2618:	14 c0       	rjmp	.+40     	; 0x2642 <__fixunssfsi+0x4c>
    261a:	b1 30       	cpi	r27, 0x01	; 1
    261c:	91 f0       	breq	.+36     	; 0x2642 <__fixunssfsi+0x4c>
    261e:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__fp_zero>
    2622:	b1 e0       	ldi	r27, 0x01	; 1
    2624:	08 95       	ret
    2626:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_zero>
    262a:	67 2f       	mov	r22, r23
    262c:	78 2f       	mov	r23, r24
    262e:	88 27       	eor	r24, r24
    2630:	b8 5f       	subi	r27, 0xF8	; 248
    2632:	39 f0       	breq	.+14     	; 0x2642 <__fixunssfsi+0x4c>
    2634:	b9 3f       	cpi	r27, 0xF9	; 249
    2636:	cc f3       	brlt	.-14     	; 0x262a <__fixunssfsi+0x34>
    2638:	86 95       	lsr	r24
    263a:	77 95       	ror	r23
    263c:	67 95       	ror	r22
    263e:	b3 95       	inc	r27
    2640:	d9 f7       	brne	.-10     	; 0x2638 <__fixunssfsi+0x42>
    2642:	3e f4       	brtc	.+14     	; 0x2652 <__fixunssfsi+0x5c>
    2644:	90 95       	com	r25
    2646:	80 95       	com	r24
    2648:	70 95       	com	r23
    264a:	61 95       	neg	r22
    264c:	7f 4f       	sbci	r23, 0xFF	; 255
    264e:	8f 4f       	sbci	r24, 0xFF	; 255
    2650:	9f 4f       	sbci	r25, 0xFF	; 255
    2652:	08 95       	ret

00002654 <__floatunsisf>:
    2654:	e8 94       	clt
    2656:	09 c0       	rjmp	.+18     	; 0x266a <__floatsisf+0x12>

00002658 <__floatsisf>:
    2658:	97 fb       	bst	r25, 7
    265a:	3e f4       	brtc	.+14     	; 0x266a <__floatsisf+0x12>
    265c:	90 95       	com	r25
    265e:	80 95       	com	r24
    2660:	70 95       	com	r23
    2662:	61 95       	neg	r22
    2664:	7f 4f       	sbci	r23, 0xFF	; 255
    2666:	8f 4f       	sbci	r24, 0xFF	; 255
    2668:	9f 4f       	sbci	r25, 0xFF	; 255
    266a:	99 23       	and	r25, r25
    266c:	a9 f0       	breq	.+42     	; 0x2698 <__floatsisf+0x40>
    266e:	f9 2f       	mov	r31, r25
    2670:	96 e9       	ldi	r25, 0x96	; 150
    2672:	bb 27       	eor	r27, r27
    2674:	93 95       	inc	r25
    2676:	f6 95       	lsr	r31
    2678:	87 95       	ror	r24
    267a:	77 95       	ror	r23
    267c:	67 95       	ror	r22
    267e:	b7 95       	ror	r27
    2680:	f1 11       	cpse	r31, r1
    2682:	f8 cf       	rjmp	.-16     	; 0x2674 <__floatsisf+0x1c>
    2684:	fa f4       	brpl	.+62     	; 0x26c4 <__floatsisf+0x6c>
    2686:	bb 0f       	add	r27, r27
    2688:	11 f4       	brne	.+4      	; 0x268e <__floatsisf+0x36>
    268a:	60 ff       	sbrs	r22, 0
    268c:	1b c0       	rjmp	.+54     	; 0x26c4 <__floatsisf+0x6c>
    268e:	6f 5f       	subi	r22, 0xFF	; 255
    2690:	7f 4f       	sbci	r23, 0xFF	; 255
    2692:	8f 4f       	sbci	r24, 0xFF	; 255
    2694:	9f 4f       	sbci	r25, 0xFF	; 255
    2696:	16 c0       	rjmp	.+44     	; 0x26c4 <__floatsisf+0x6c>
    2698:	88 23       	and	r24, r24
    269a:	11 f0       	breq	.+4      	; 0x26a0 <__floatsisf+0x48>
    269c:	96 e9       	ldi	r25, 0x96	; 150
    269e:	11 c0       	rjmp	.+34     	; 0x26c2 <__floatsisf+0x6a>
    26a0:	77 23       	and	r23, r23
    26a2:	21 f0       	breq	.+8      	; 0x26ac <__floatsisf+0x54>
    26a4:	9e e8       	ldi	r25, 0x8E	; 142
    26a6:	87 2f       	mov	r24, r23
    26a8:	76 2f       	mov	r23, r22
    26aa:	05 c0       	rjmp	.+10     	; 0x26b6 <__floatsisf+0x5e>
    26ac:	66 23       	and	r22, r22
    26ae:	71 f0       	breq	.+28     	; 0x26cc <__floatsisf+0x74>
    26b0:	96 e8       	ldi	r25, 0x86	; 134
    26b2:	86 2f       	mov	r24, r22
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	2a f0       	brmi	.+10     	; 0x26c4 <__floatsisf+0x6c>
    26ba:	9a 95       	dec	r25
    26bc:	66 0f       	add	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	da f7       	brpl	.-10     	; 0x26ba <__floatsisf+0x62>
    26c4:	88 0f       	add	r24, r24
    26c6:	96 95       	lsr	r25
    26c8:	87 95       	ror	r24
    26ca:	97 f9       	bld	r25, 7
    26cc:	08 95       	ret

000026ce <__fp_cmp>:
    26ce:	99 0f       	add	r25, r25
    26d0:	00 08       	sbc	r0, r0
    26d2:	55 0f       	add	r21, r21
    26d4:	aa 0b       	sbc	r26, r26
    26d6:	e0 e8       	ldi	r30, 0x80	; 128
    26d8:	fe ef       	ldi	r31, 0xFE	; 254
    26da:	16 16       	cp	r1, r22
    26dc:	17 06       	cpc	r1, r23
    26de:	e8 07       	cpc	r30, r24
    26e0:	f9 07       	cpc	r31, r25
    26e2:	c0 f0       	brcs	.+48     	; 0x2714 <__fp_cmp+0x46>
    26e4:	12 16       	cp	r1, r18
    26e6:	13 06       	cpc	r1, r19
    26e8:	e4 07       	cpc	r30, r20
    26ea:	f5 07       	cpc	r31, r21
    26ec:	98 f0       	brcs	.+38     	; 0x2714 <__fp_cmp+0x46>
    26ee:	62 1b       	sub	r22, r18
    26f0:	73 0b       	sbc	r23, r19
    26f2:	84 0b       	sbc	r24, r20
    26f4:	95 0b       	sbc	r25, r21
    26f6:	39 f4       	brne	.+14     	; 0x2706 <__fp_cmp+0x38>
    26f8:	0a 26       	eor	r0, r26
    26fa:	61 f0       	breq	.+24     	; 0x2714 <__fp_cmp+0x46>
    26fc:	23 2b       	or	r18, r19
    26fe:	24 2b       	or	r18, r20
    2700:	25 2b       	or	r18, r21
    2702:	21 f4       	brne	.+8      	; 0x270c <__fp_cmp+0x3e>
    2704:	08 95       	ret
    2706:	0a 26       	eor	r0, r26
    2708:	09 f4       	brne	.+2      	; 0x270c <__fp_cmp+0x3e>
    270a:	a1 40       	sbci	r26, 0x01	; 1
    270c:	a6 95       	lsr	r26
    270e:	8f ef       	ldi	r24, 0xFF	; 255
    2710:	81 1d       	adc	r24, r1
    2712:	81 1d       	adc	r24, r1
    2714:	08 95       	ret

00002716 <__fp_inf>:
    2716:	97 f9       	bld	r25, 7
    2718:	9f 67       	ori	r25, 0x7F	; 127
    271a:	80 e8       	ldi	r24, 0x80	; 128
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	08 95       	ret

00002722 <__fp_nan>:
    2722:	9f ef       	ldi	r25, 0xFF	; 255
    2724:	80 ec       	ldi	r24, 0xC0	; 192
    2726:	08 95       	ret

00002728 <__fp_powser>:
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	1f 93       	push	r17
    272e:	0f 93       	push	r16
    2730:	ff 92       	push	r15
    2732:	ef 92       	push	r14
    2734:	df 92       	push	r13
    2736:	7b 01       	movw	r14, r22
    2738:	8c 01       	movw	r16, r24
    273a:	68 94       	set
    273c:	06 c0       	rjmp	.+12     	; 0x274a <__fp_powser+0x22>
    273e:	da 2e       	mov	r13, r26
    2740:	ef 01       	movw	r28, r30
    2742:	0e 94 56 14 	call	0x28ac	; 0x28ac <__mulsf3x>
    2746:	fe 01       	movw	r30, r28
    2748:	e8 94       	clt
    274a:	a5 91       	lpm	r26, Z+
    274c:	25 91       	lpm	r18, Z+
    274e:	35 91       	lpm	r19, Z+
    2750:	45 91       	lpm	r20, Z+
    2752:	55 91       	lpm	r21, Z+
    2754:	a6 f3       	brts	.-24     	; 0x273e <__fp_powser+0x16>
    2756:	ef 01       	movw	r28, r30
    2758:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__addsf3x>
    275c:	fe 01       	movw	r30, r28
    275e:	97 01       	movw	r18, r14
    2760:	a8 01       	movw	r20, r16
    2762:	da 94       	dec	r13
    2764:	69 f7       	brne	.-38     	; 0x2740 <__fp_powser+0x18>
    2766:	df 90       	pop	r13
    2768:	ef 90       	pop	r14
    276a:	ff 90       	pop	r15
    276c:	0f 91       	pop	r16
    276e:	1f 91       	pop	r17
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <__fp_pscA>:
    2776:	00 24       	eor	r0, r0
    2778:	0a 94       	dec	r0
    277a:	16 16       	cp	r1, r22
    277c:	17 06       	cpc	r1, r23
    277e:	18 06       	cpc	r1, r24
    2780:	09 06       	cpc	r0, r25
    2782:	08 95       	ret

00002784 <__fp_pscB>:
    2784:	00 24       	eor	r0, r0
    2786:	0a 94       	dec	r0
    2788:	12 16       	cp	r1, r18
    278a:	13 06       	cpc	r1, r19
    278c:	14 06       	cpc	r1, r20
    278e:	05 06       	cpc	r0, r21
    2790:	08 95       	ret

00002792 <__fp_round>:
    2792:	09 2e       	mov	r0, r25
    2794:	03 94       	inc	r0
    2796:	00 0c       	add	r0, r0
    2798:	11 f4       	brne	.+4      	; 0x279e <__fp_round+0xc>
    279a:	88 23       	and	r24, r24
    279c:	52 f0       	brmi	.+20     	; 0x27b2 <__fp_round+0x20>
    279e:	bb 0f       	add	r27, r27
    27a0:	40 f4       	brcc	.+16     	; 0x27b2 <__fp_round+0x20>
    27a2:	bf 2b       	or	r27, r31
    27a4:	11 f4       	brne	.+4      	; 0x27aa <__fp_round+0x18>
    27a6:	60 ff       	sbrs	r22, 0
    27a8:	04 c0       	rjmp	.+8      	; 0x27b2 <__fp_round+0x20>
    27aa:	6f 5f       	subi	r22, 0xFF	; 255
    27ac:	7f 4f       	sbci	r23, 0xFF	; 255
    27ae:	8f 4f       	sbci	r24, 0xFF	; 255
    27b0:	9f 4f       	sbci	r25, 0xFF	; 255
    27b2:	08 95       	ret

000027b4 <__fp_split3>:
    27b4:	57 fd       	sbrc	r21, 7
    27b6:	90 58       	subi	r25, 0x80	; 128
    27b8:	44 0f       	add	r20, r20
    27ba:	55 1f       	adc	r21, r21
    27bc:	59 f0       	breq	.+22     	; 0x27d4 <__fp_splitA+0x10>
    27be:	5f 3f       	cpi	r21, 0xFF	; 255
    27c0:	71 f0       	breq	.+28     	; 0x27de <__fp_splitA+0x1a>
    27c2:	47 95       	ror	r20

000027c4 <__fp_splitA>:
    27c4:	88 0f       	add	r24, r24
    27c6:	97 fb       	bst	r25, 7
    27c8:	99 1f       	adc	r25, r25
    27ca:	61 f0       	breq	.+24     	; 0x27e4 <__fp_splitA+0x20>
    27cc:	9f 3f       	cpi	r25, 0xFF	; 255
    27ce:	79 f0       	breq	.+30     	; 0x27ee <__fp_splitA+0x2a>
    27d0:	87 95       	ror	r24
    27d2:	08 95       	ret
    27d4:	12 16       	cp	r1, r18
    27d6:	13 06       	cpc	r1, r19
    27d8:	14 06       	cpc	r1, r20
    27da:	55 1f       	adc	r21, r21
    27dc:	f2 cf       	rjmp	.-28     	; 0x27c2 <__fp_split3+0xe>
    27de:	46 95       	lsr	r20
    27e0:	f1 df       	rcall	.-30     	; 0x27c4 <__fp_splitA>
    27e2:	08 c0       	rjmp	.+16     	; 0x27f4 <__fp_splitA+0x30>
    27e4:	16 16       	cp	r1, r22
    27e6:	17 06       	cpc	r1, r23
    27e8:	18 06       	cpc	r1, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	f1 cf       	rjmp	.-30     	; 0x27d0 <__fp_splitA+0xc>
    27ee:	86 95       	lsr	r24
    27f0:	71 05       	cpc	r23, r1
    27f2:	61 05       	cpc	r22, r1
    27f4:	08 94       	sec
    27f6:	08 95       	ret

000027f8 <__fp_zero>:
    27f8:	e8 94       	clt

000027fa <__fp_szero>:
    27fa:	bb 27       	eor	r27, r27
    27fc:	66 27       	eor	r22, r22
    27fe:	77 27       	eor	r23, r23
    2800:	cb 01       	movw	r24, r22
    2802:	97 f9       	bld	r25, 7
    2804:	08 95       	ret

00002806 <__gesf2>:
    2806:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_cmp>
    280a:	08 f4       	brcc	.+2      	; 0x280e <__gesf2+0x8>
    280c:	8f ef       	ldi	r24, 0xFF	; 255
    280e:	08 95       	ret

00002810 <inverse>:
    2810:	9b 01       	movw	r18, r22
    2812:	ac 01       	movw	r20, r24
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	80 e8       	ldi	r24, 0x80	; 128
    281a:	9f e3       	ldi	r25, 0x3F	; 63
    281c:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__divsf3>

00002820 <lround>:
    2820:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__fp_splitA>
    2824:	58 f1       	brcs	.+86     	; 0x287c <lround+0x5c>
    2826:	9e 57       	subi	r25, 0x7E	; 126
    2828:	60 f1       	brcs	.+88     	; 0x2882 <lround+0x62>
    282a:	98 51       	subi	r25, 0x18	; 24
    282c:	a0 f0       	brcs	.+40     	; 0x2856 <lround+0x36>
    282e:	e9 f0       	breq	.+58     	; 0x286a <lround+0x4a>
    2830:	98 30       	cpi	r25, 0x08	; 8
    2832:	20 f5       	brcc	.+72     	; 0x287c <lround+0x5c>
    2834:	09 2e       	mov	r0, r25
    2836:	99 27       	eor	r25, r25
    2838:	66 0f       	add	r22, r22
    283a:	77 1f       	adc	r23, r23
    283c:	88 1f       	adc	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	0a 94       	dec	r0
    2842:	d1 f7       	brne	.-12     	; 0x2838 <lround+0x18>
    2844:	12 c0       	rjmp	.+36     	; 0x286a <lround+0x4a>
    2846:	06 2e       	mov	r0, r22
    2848:	67 2f       	mov	r22, r23
    284a:	78 2f       	mov	r23, r24
    284c:	88 27       	eor	r24, r24
    284e:	98 5f       	subi	r25, 0xF8	; 248
    2850:	11 f4       	brne	.+4      	; 0x2856 <lround+0x36>
    2852:	00 0c       	add	r0, r0
    2854:	07 c0       	rjmp	.+14     	; 0x2864 <lround+0x44>
    2856:	99 3f       	cpi	r25, 0xF9	; 249
    2858:	b4 f3       	brlt	.-20     	; 0x2846 <lround+0x26>
    285a:	86 95       	lsr	r24
    285c:	77 95       	ror	r23
    285e:	67 95       	ror	r22
    2860:	93 95       	inc	r25
    2862:	d9 f7       	brne	.-10     	; 0x285a <lround+0x3a>
    2864:	61 1d       	adc	r22, r1
    2866:	71 1d       	adc	r23, r1
    2868:	81 1d       	adc	r24, r1
    286a:	3e f4       	brtc	.+14     	; 0x287a <lround+0x5a>
    286c:	90 95       	com	r25
    286e:	80 95       	com	r24
    2870:	70 95       	com	r23
    2872:	61 95       	neg	r22
    2874:	7f 4f       	sbci	r23, 0xFF	; 255
    2876:	8f 4f       	sbci	r24, 0xFF	; 255
    2878:	9f 4f       	sbci	r25, 0xFF	; 255
    287a:	08 95       	ret
    287c:	68 94       	set
    287e:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>
    2882:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_zero>

00002886 <__mulsf3>:
    2886:	0e 94 56 14 	call	0x28ac	; 0x28ac <__mulsf3x>
    288a:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__fp_round>
    288e:	0e 94 bb 13 	call	0x2776	; 0x2776 <__fp_pscA>
    2892:	38 f0       	brcs	.+14     	; 0x28a2 <__mulsf3+0x1c>
    2894:	0e 94 c2 13 	call	0x2784	; 0x2784 <__fp_pscB>
    2898:	20 f0       	brcs	.+8      	; 0x28a2 <__mulsf3+0x1c>
    289a:	95 23       	and	r25, r21
    289c:	11 f0       	breq	.+4      	; 0x28a2 <__mulsf3+0x1c>
    289e:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>
    28a2:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__fp_nan>
    28a6:	11 24       	eor	r1, r1
    28a8:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>

000028ac <__mulsf3x>:
    28ac:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__fp_split3>
    28b0:	70 f3       	brcs	.-36     	; 0x288e <__mulsf3+0x8>

000028b2 <__mulsf3_pse>:
    28b2:	95 9f       	mul	r25, r21
    28b4:	c1 f3       	breq	.-16     	; 0x28a6 <__mulsf3+0x20>
    28b6:	95 0f       	add	r25, r21
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	55 1f       	adc	r21, r21
    28bc:	62 9f       	mul	r22, r18
    28be:	f0 01       	movw	r30, r0
    28c0:	72 9f       	mul	r23, r18
    28c2:	bb 27       	eor	r27, r27
    28c4:	f0 0d       	add	r31, r0
    28c6:	b1 1d       	adc	r27, r1
    28c8:	63 9f       	mul	r22, r19
    28ca:	aa 27       	eor	r26, r26
    28cc:	f0 0d       	add	r31, r0
    28ce:	b1 1d       	adc	r27, r1
    28d0:	aa 1f       	adc	r26, r26
    28d2:	64 9f       	mul	r22, r20
    28d4:	66 27       	eor	r22, r22
    28d6:	b0 0d       	add	r27, r0
    28d8:	a1 1d       	adc	r26, r1
    28da:	66 1f       	adc	r22, r22
    28dc:	82 9f       	mul	r24, r18
    28de:	22 27       	eor	r18, r18
    28e0:	b0 0d       	add	r27, r0
    28e2:	a1 1d       	adc	r26, r1
    28e4:	62 1f       	adc	r22, r18
    28e6:	73 9f       	mul	r23, r19
    28e8:	b0 0d       	add	r27, r0
    28ea:	a1 1d       	adc	r26, r1
    28ec:	62 1f       	adc	r22, r18
    28ee:	83 9f       	mul	r24, r19
    28f0:	a0 0d       	add	r26, r0
    28f2:	61 1d       	adc	r22, r1
    28f4:	22 1f       	adc	r18, r18
    28f6:	74 9f       	mul	r23, r20
    28f8:	33 27       	eor	r19, r19
    28fa:	a0 0d       	add	r26, r0
    28fc:	61 1d       	adc	r22, r1
    28fe:	23 1f       	adc	r18, r19
    2900:	84 9f       	mul	r24, r20
    2902:	60 0d       	add	r22, r0
    2904:	21 1d       	adc	r18, r1
    2906:	82 2f       	mov	r24, r18
    2908:	76 2f       	mov	r23, r22
    290a:	6a 2f       	mov	r22, r26
    290c:	11 24       	eor	r1, r1
    290e:	9f 57       	subi	r25, 0x7F	; 127
    2910:	50 40       	sbci	r21, 0x00	; 0
    2912:	9a f0       	brmi	.+38     	; 0x293a <__mulsf3_pse+0x88>
    2914:	f1 f0       	breq	.+60     	; 0x2952 <__mulsf3_pse+0xa0>
    2916:	88 23       	and	r24, r24
    2918:	4a f0       	brmi	.+18     	; 0x292c <__mulsf3_pse+0x7a>
    291a:	ee 0f       	add	r30, r30
    291c:	ff 1f       	adc	r31, r31
    291e:	bb 1f       	adc	r27, r27
    2920:	66 1f       	adc	r22, r22
    2922:	77 1f       	adc	r23, r23
    2924:	88 1f       	adc	r24, r24
    2926:	91 50       	subi	r25, 0x01	; 1
    2928:	50 40       	sbci	r21, 0x00	; 0
    292a:	a9 f7       	brne	.-22     	; 0x2916 <__mulsf3_pse+0x64>
    292c:	9e 3f       	cpi	r25, 0xFE	; 254
    292e:	51 05       	cpc	r21, r1
    2930:	80 f0       	brcs	.+32     	; 0x2952 <__mulsf3_pse+0xa0>
    2932:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__fp_inf>
    2936:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__fp_szero>
    293a:	5f 3f       	cpi	r21, 0xFF	; 255
    293c:	e4 f3       	brlt	.-8      	; 0x2936 <__mulsf3_pse+0x84>
    293e:	98 3e       	cpi	r25, 0xE8	; 232
    2940:	d4 f3       	brlt	.-12     	; 0x2936 <__mulsf3_pse+0x84>
    2942:	86 95       	lsr	r24
    2944:	77 95       	ror	r23
    2946:	67 95       	ror	r22
    2948:	b7 95       	ror	r27
    294a:	f7 95       	ror	r31
    294c:	e7 95       	ror	r30
    294e:	9f 5f       	subi	r25, 0xFF	; 255
    2950:	c1 f7       	brne	.-16     	; 0x2942 <__mulsf3_pse+0x90>
    2952:	fe 2b       	or	r31, r30
    2954:	88 0f       	add	r24, r24
    2956:	91 1d       	adc	r25, r1
    2958:	96 95       	lsr	r25
    295a:	87 95       	ror	r24
    295c:	97 f9       	bld	r25, 7
    295e:	08 95       	ret

00002960 <square>:
    2960:	9b 01       	movw	r18, r22
    2962:	ac 01       	movw	r20, r24
    2964:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__mulsf3>

00002968 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2968:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    296a:	91 8d       	ldd	r25, Z+25	; 0x19
    296c:	22 8d       	ldd	r18, Z+26	; 0x1a
    296e:	89 2f       	mov	r24, r25
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	80 5c       	subi	r24, 0xC0	; 192
    2974:	9f 4f       	sbci	r25, 0xFF	; 255
    2976:	82 1b       	sub	r24, r18
    2978:	91 09       	sbc	r25, r1
}
    297a:	8f 73       	andi	r24, 0x3F	; 63
    297c:	99 27       	eor	r25, r25
    297e:	08 95       	ret

00002980 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2980:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2982:	91 8d       	ldd	r25, Z+25	; 0x19
    2984:	82 8d       	ldd	r24, Z+26	; 0x1a
    2986:	98 17       	cp	r25, r24
    2988:	31 f0       	breq	.+12     	; 0x2996 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    298a:	82 8d       	ldd	r24, Z+26	; 0x1a
    298c:	e8 0f       	add	r30, r24
    298e:	f1 1d       	adc	r31, r1
    2990:	85 8d       	ldd	r24, Z+29	; 0x1d
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2996:	8f ef       	ldi	r24, 0xFF	; 255
    2998:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    299a:	08 95       	ret

0000299c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    299c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    299e:	91 8d       	ldd	r25, Z+25	; 0x19
    29a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    29a2:	98 17       	cp	r25, r24
    29a4:	61 f0       	breq	.+24     	; 0x29be <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    29a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    29a8:	df 01       	movw	r26, r30
    29aa:	a8 0f       	add	r26, r24
    29ac:	b1 1d       	adc	r27, r1
    29ae:	5d 96       	adiw	r26, 0x1d	; 29
    29b0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    29b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    29b4:	9f 5f       	subi	r25, 0xFF	; 255
    29b6:	9f 73       	andi	r25, 0x3F	; 63
    29b8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    29be:	8f ef       	ldi	r24, 0xFF	; 255
    29c0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    29c2:	08 95       	ret

000029c4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    29c4:	87 e3       	ldi	r24, 0x37	; 55
    29c6:	96 e1       	ldi	r25, 0x16	; 22
    29c8:	89 2b       	or	r24, r25
    29ca:	49 f0       	breq	.+18     	; 0x29de <_Z14serialEventRunv+0x1a>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	89 2b       	or	r24, r25
    29d2:	29 f0       	breq	.+10     	; 0x29de <_Z14serialEventRunv+0x1a>
    29d4:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <_Z17Serial0_availablev>
    29d8:	81 11       	cpse	r24, r1
    29da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    29de:	08 95       	ret

000029e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    29e0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    29e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    29e4:	df 01       	movw	r26, r30
    29e6:	a8 0f       	add	r26, r24
    29e8:	b1 1d       	adc	r27, r1
    29ea:	a3 5a       	subi	r26, 0xA3	; 163
    29ec:	bf 4f       	sbci	r27, 0xFF	; 255
    29ee:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    29f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	01 96       	adiw	r24, 0x01	; 1
    29f6:	8f 73       	andi	r24, 0x3F	; 63
    29f8:	99 27       	eor	r25, r25
    29fa:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    29fc:	a6 89       	ldd	r26, Z+22	; 0x16
    29fe:	b7 89       	ldd	r27, Z+23	; 0x17
    2a00:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2a02:	a0 89       	ldd	r26, Z+16	; 0x10
    2a04:	b1 89       	ldd	r27, Z+17	; 0x11
    2a06:	8c 91       	ld	r24, X
    2a08:	80 64       	ori	r24, 0x40	; 64
    2a0a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2a0c:	93 8d       	ldd	r25, Z+27	; 0x1b
    2a0e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a10:	98 13       	cpse	r25, r24
    2a12:	06 c0       	rjmp	.+12     	; 0x2a20 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2a14:	02 88       	ldd	r0, Z+18	; 0x12
    2a16:	f3 89       	ldd	r31, Z+19	; 0x13
    2a18:	e0 2d       	mov	r30, r0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	8f 7d       	andi	r24, 0xDF	; 223
    2a1e:	80 83       	st	Z, r24
    2a20:	08 95       	ret

00002a22 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2a22:	ef 92       	push	r14
    2a24:	ff 92       	push	r15
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29
    2a2e:	ec 01       	movw	r28, r24
  _written = true;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2a34:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a36:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a38:	98 13       	cpse	r25, r24
    2a3a:	05 c0       	rjmp	.+10     	; 0x2a46 <_ZN14HardwareSerial5writeEh+0x24>
    2a3c:	e8 89       	ldd	r30, Y+16	; 0x10
    2a3e:	f9 89       	ldd	r31, Y+17	; 0x11
    2a40:	80 81       	ld	r24, Z
    2a42:	85 fd       	sbrc	r24, 5
    2a44:	24 c0       	rjmp	.+72     	; 0x2a8e <_ZN14HardwareSerial5writeEh+0x6c>
    2a46:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2a48:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2a4a:	10 e0       	ldi	r17, 0x00	; 0
    2a4c:	0f 5f       	subi	r16, 0xFF	; 255
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	0f 73       	andi	r16, 0x3F	; 63
    2a52:	11 27       	eor	r17, r17
    2a54:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2a56:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a58:	e8 12       	cpse	r14, r24
    2a5a:	0c c0       	rjmp	.+24     	; 0x2a74 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	07 fc       	sbrc	r0, 7
    2a60:	fa cf       	rjmp	.-12     	; 0x2a56 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2a62:	e8 89       	ldd	r30, Y+16	; 0x10
    2a64:	f9 89       	ldd	r31, Y+17	; 0x11
    2a66:	80 81       	ld	r24, Z
    2a68:	85 ff       	sbrs	r24, 5
    2a6a:	f5 cf       	rjmp	.-22     	; 0x2a56 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2a72:	f1 cf       	rjmp	.-30     	; 0x2a56 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a76:	fe 01       	movw	r30, r28
    2a78:	e8 0f       	add	r30, r24
    2a7a:	f1 1d       	adc	r31, r1
    2a7c:	e3 5a       	subi	r30, 0xA3	; 163
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    2a82:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    2a84:	ea 89       	ldd	r30, Y+18	; 0x12
    2a86:	fb 89       	ldd	r31, Y+19	; 0x13
    2a88:	80 81       	ld	r24, Z
    2a8a:	80 62       	ori	r24, 0x20	; 32
    2a8c:	07 c0       	rjmp	.+14     	; 0x2a9c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2a8e:	ee 89       	ldd	r30, Y+22	; 0x16
    2a90:	ff 89       	ldd	r31, Y+23	; 0x17
    2a92:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2a94:	e8 89       	ldd	r30, Y+16	; 0x10
    2a96:	f9 89       	ldd	r31, Y+17	; 0x11
    2a98:	80 81       	ld	r24, Z
    2a9a:	80 64       	ori	r24, 0x40	; 64
    2a9c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	1f 91       	pop	r17
    2aa8:	0f 91       	pop	r16
    2aaa:	ff 90       	pop	r15
    2aac:	ef 90       	pop	r14
    2aae:	08 95       	ret

00002ab0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2ab0:	cf 93       	push	r28
    2ab2:	df 93       	push	r29
    2ab4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2ab6:	88 8d       	ldd	r24, Y+24	; 0x18
    2ab8:	88 23       	and	r24, r24
    2aba:	c9 f0       	breq	.+50     	; 0x2aee <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2abc:	ea 89       	ldd	r30, Y+18	; 0x12
    2abe:	fb 89       	ldd	r31, Y+19	; 0x13
    2ac0:	80 81       	ld	r24, Z
    2ac2:	85 fd       	sbrc	r24, 5
    2ac4:	05 c0       	rjmp	.+10     	; 0x2ad0 <_ZN14HardwareSerial5flushEv+0x20>
    2ac6:	a8 89       	ldd	r26, Y+16	; 0x10
    2ac8:	b9 89       	ldd	r27, Y+17	; 0x11
    2aca:	8c 91       	ld	r24, X
    2acc:	86 fd       	sbrc	r24, 6
    2ace:	0f c0       	rjmp	.+30     	; 0x2aee <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	07 fc       	sbrc	r0, 7
    2ad4:	f5 cf       	rjmp	.-22     	; 0x2ac0 <_ZN14HardwareSerial5flushEv+0x10>
    2ad6:	80 81       	ld	r24, Z
    2ad8:	85 ff       	sbrs	r24, 5
    2ada:	f2 cf       	rjmp	.-28     	; 0x2ac0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2adc:	a8 89       	ldd	r26, Y+16	; 0x10
    2ade:	b9 89       	ldd	r27, Y+17	; 0x11
    2ae0:	8c 91       	ld	r24, X
    2ae2:	85 ff       	sbrs	r24, 5
    2ae4:	ed cf       	rjmp	.-38     	; 0x2ac0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2aec:	e7 cf       	rjmp	.-50     	; 0x2abc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	08 95       	ret

00002af4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2af4:	cf 92       	push	r12
    2af6:	df 92       	push	r13
    2af8:	ef 92       	push	r14
    2afa:	ff 92       	push	r15
    2afc:	1f 93       	push	r17
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	ec 01       	movw	r28, r24
    2b04:	6a 01       	movw	r12, r20
    2b06:	7b 01       	movw	r14, r22
    2b08:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2b0a:	e8 89       	ldd	r30, Y+16	; 0x10
    2b0c:	f9 89       	ldd	r31, Y+17	; 0x11
    2b0e:	82 e0       	ldi	r24, 0x02	; 2
    2b10:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2b12:	41 15       	cp	r20, r1
    2b14:	51 4e       	sbci	r21, 0xE1	; 225
    2b16:	61 05       	cpc	r22, r1
    2b18:	71 05       	cpc	r23, r1
    2b1a:	b1 f0       	breq	.+44     	; 0x2b48 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	79 e0       	ldi	r23, 0x09	; 9
    2b20:	8d e3       	ldi	r24, 0x3D	; 61
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	a7 01       	movw	r20, r14
    2b26:	96 01       	movw	r18, r12
    2b28:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <__udivmodsi4>
    2b2c:	da 01       	movw	r26, r20
    2b2e:	c9 01       	movw	r24, r18
    2b30:	01 97       	sbiw	r24, 0x01	; 1
    2b32:	a1 09       	sbc	r26, r1
    2b34:	b1 09       	sbc	r27, r1
    2b36:	b6 95       	lsr	r27
    2b38:	a7 95       	ror	r26
    2b3a:	97 95       	ror	r25
    2b3c:	87 95       	ror	r24
    2b3e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2b40:	21 15       	cp	r18, r1
    2b42:	80 e1       	ldi	r24, 0x10	; 16
    2b44:	38 07       	cpc	r19, r24
    2b46:	a8 f0       	brcs	.+42     	; 0x2b72 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2b48:	e8 89       	ldd	r30, Y+16	; 0x10
    2b4a:	f9 89       	ldd	r31, Y+17	; 0x11
    2b4c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2b4e:	60 e8       	ldi	r22, 0x80	; 128
    2b50:	74 e8       	ldi	r23, 0x84	; 132
    2b52:	8e e1       	ldi	r24, 0x1E	; 30
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	a7 01       	movw	r20, r14
    2b58:	96 01       	movw	r18, r12
    2b5a:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <__udivmodsi4>
    2b5e:	da 01       	movw	r26, r20
    2b60:	c9 01       	movw	r24, r18
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	a1 09       	sbc	r26, r1
    2b66:	b1 09       	sbc	r27, r1
    2b68:	b6 95       	lsr	r27
    2b6a:	a7 95       	ror	r26
    2b6c:	97 95       	ror	r25
    2b6e:	87 95       	ror	r24
    2b70:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2b72:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b74:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b76:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2b78:	ee 85       	ldd	r30, Y+14	; 0x0e
    2b7a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2b7c:	20 83       	st	Z, r18

  _written = false;
    2b7e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2b80:	ec 89       	ldd	r30, Y+20	; 0x14
    2b82:	fd 89       	ldd	r31, Y+21	; 0x15
    2b84:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2b86:	ea 89       	ldd	r30, Y+18	; 0x12
    2b88:	fb 89       	ldd	r31, Y+19	; 0x13
    2b8a:	80 81       	ld	r24, Z
    2b8c:	80 61       	ori	r24, 0x10	; 16
    2b8e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2b90:	ea 89       	ldd	r30, Y+18	; 0x12
    2b92:	fb 89       	ldd	r31, Y+19	; 0x13
    2b94:	80 81       	ld	r24, Z
    2b96:	88 60       	ori	r24, 0x08	; 8
    2b98:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2b9a:	ea 89       	ldd	r30, Y+18	; 0x12
    2b9c:	fb 89       	ldd	r31, Y+19	; 0x13
    2b9e:	80 81       	ld	r24, Z
    2ba0:	80 68       	ori	r24, 0x80	; 128
    2ba2:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2ba4:	ea 89       	ldd	r30, Y+18	; 0x12
    2ba6:	fb 89       	ldd	r31, Y+19	; 0x13
    2ba8:	80 81       	ld	r24, Z
    2baa:	8f 7d       	andi	r24, 0xDF	; 223
    2bac:	80 83       	st	Z, r24
}
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	1f 91       	pop	r17
    2bb4:	ff 90       	pop	r15
    2bb6:	ef 90       	pop	r14
    2bb8:	df 90       	pop	r13
    2bba:	cf 90       	pop	r12
    2bbc:	08 95       	ret

00002bbe <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2bbe:	1f 92       	push	r1
    2bc0:	0f 92       	push	r0
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	0f 92       	push	r0
    2bc6:	11 24       	eor	r1, r1
    2bc8:	2f 93       	push	r18
    2bca:	8f 93       	push	r24
    2bcc:	9f 93       	push	r25
    2bce:	ef 93       	push	r30
    2bd0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2bd2:	e0 91 17 03 	lds	r30, 0x0317	; 0x800317 <Serial+0x10>
    2bd6:	f0 91 18 03 	lds	r31, 0x0318	; 0x800318 <Serial+0x11>
    2bda:	80 81       	ld	r24, Z
    2bdc:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <Serial+0x16>
    2be0:	f0 91 1e 03 	lds	r31, 0x031E	; 0x80031e <Serial+0x17>
    2be4:	82 fd       	sbrc	r24, 2
    2be6:	12 c0       	rjmp	.+36     	; 0x2c0c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2be8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2bea:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <Serial+0x19>
    2bee:	8f 5f       	subi	r24, 0xFF	; 255
    2bf0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2bf2:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <Serial+0x1a>
    2bf6:	82 17       	cp	r24, r18
    2bf8:	51 f0       	breq	.+20     	; 0x2c0e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2bfa:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <Serial+0x19>
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	e9 5f       	subi	r30, 0xF9	; 249
    2c02:	fc 4f       	sbci	r31, 0xFC	; 252
    2c04:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2c06:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <Serial+0x19>
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2c0c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2c0e:	ff 91       	pop	r31
    2c10:	ef 91       	pop	r30
    2c12:	9f 91       	pop	r25
    2c14:	8f 91       	pop	r24
    2c16:	2f 91       	pop	r18
    2c18:	0f 90       	pop	r0
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	0f 90       	pop	r0
    2c1e:	1f 90       	pop	r1
    2c20:	18 95       	reti

00002c22 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2c22:	1f 92       	push	r1
    2c24:	0f 92       	push	r0
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	0f 92       	push	r0
    2c2a:	11 24       	eor	r1, r1
    2c2c:	2f 93       	push	r18
    2c2e:	3f 93       	push	r19
    2c30:	4f 93       	push	r20
    2c32:	5f 93       	push	r21
    2c34:	6f 93       	push	r22
    2c36:	7f 93       	push	r23
    2c38:	8f 93       	push	r24
    2c3a:	9f 93       	push	r25
    2c3c:	af 93       	push	r26
    2c3e:	bf 93       	push	r27
    2c40:	ef 93       	push	r30
    2c42:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2c44:	87 e0       	ldi	r24, 0x07	; 7
    2c46:	93 e0       	ldi	r25, 0x03	; 3
    2c48:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2c4c:	ff 91       	pop	r31
    2c4e:	ef 91       	pop	r30
    2c50:	bf 91       	pop	r27
    2c52:	af 91       	pop	r26
    2c54:	9f 91       	pop	r25
    2c56:	8f 91       	pop	r24
    2c58:	7f 91       	pop	r23
    2c5a:	6f 91       	pop	r22
    2c5c:	5f 91       	pop	r21
    2c5e:	4f 91       	pop	r20
    2c60:	3f 91       	pop	r19
    2c62:	2f 91       	pop	r18
    2c64:	0f 90       	pop	r0
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	0f 90       	pop	r0
    2c6a:	1f 90       	pop	r1
    2c6c:	18 95       	reti

00002c6e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2c6e:	87 e0       	ldi	r24, 0x07	; 7
    2c70:	93 e0       	ldi	r25, 0x03	; 3
    2c72:	0e 94 b4 14 	call	0x2968	; 0x2968 <_ZN14HardwareSerial9availableEv>
    2c76:	21 e0       	ldi	r18, 0x01	; 1
    2c78:	89 2b       	or	r24, r25
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <_Z17Serial0_availablev+0x10>
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
}
    2c7e:	82 2f       	mov	r24, r18
    2c80:	08 95       	ret

00002c82 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2c82:	e7 e0       	ldi	r30, 0x07	; 7
    2c84:	f3 e0       	ldi	r31, 0x03	; 3
    2c86:	13 82       	std	Z+3, r1	; 0x03
    2c88:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2c8a:	88 ee       	ldi	r24, 0xE8	; 232
    2c8c:	93 e0       	ldi	r25, 0x03	; 3
    2c8e:	a0 e0       	ldi	r26, 0x00	; 0
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	84 83       	std	Z+4, r24	; 0x04
    2c94:	95 83       	std	Z+5, r25	; 0x05
    2c96:	a6 83       	std	Z+6, r26	; 0x06
    2c98:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2c9a:	84 e0       	ldi	r24, 0x04	; 4
    2c9c:	92 e0       	ldi	r25, 0x02	; 2
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	80 83       	st	Z, r24
    2ca2:	85 ec       	ldi	r24, 0xC5	; 197
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	95 87       	std	Z+13, r25	; 0x0d
    2ca8:	84 87       	std	Z+12, r24	; 0x0c
    2caa:	84 ec       	ldi	r24, 0xC4	; 196
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	97 87       	std	Z+15, r25	; 0x0f
    2cb0:	86 87       	std	Z+14, r24	; 0x0e
    2cb2:	80 ec       	ldi	r24, 0xC0	; 192
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	91 8b       	std	Z+17, r25	; 0x11
    2cb8:	80 8b       	std	Z+16, r24	; 0x10
    2cba:	81 ec       	ldi	r24, 0xC1	; 193
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	93 8b       	std	Z+19, r25	; 0x13
    2cc0:	82 8b       	std	Z+18, r24	; 0x12
    2cc2:	82 ec       	ldi	r24, 0xC2	; 194
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	95 8b       	std	Z+21, r25	; 0x15
    2cc8:	84 8b       	std	Z+20, r24	; 0x14
    2cca:	86 ec       	ldi	r24, 0xC6	; 198
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	97 8b       	std	Z+23, r25	; 0x17
    2cd0:	86 8b       	std	Z+22, r24	; 0x16
    2cd2:	11 8e       	std	Z+25, r1	; 0x19
    2cd4:	12 8e       	std	Z+26, r1	; 0x1a
    2cd6:	13 8e       	std	Z+27, r1	; 0x1b
    2cd8:	14 8e       	std	Z+28, r1	; 0x1c
    2cda:	08 95       	ret

00002cdc <initVariant>:
    2cdc:	08 95       	ret

00002cde <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2cde:	0e 94 ff 19 	call	0x33fe	; 0x33fe <init>

	initVariant();
    2ce2:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2ce6:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2cea:	c2 ee       	ldi	r28, 0xE2	; 226
    2cec:	d4 e1       	ldi	r29, 0x14	; 20
#endif
	
	setup();
    
	for (;;) {
		loop();
    2cee:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <loop>
		if (serialEventRun) serialEventRun();
    2cf2:	20 97       	sbiw	r28, 0x00	; 0
    2cf4:	e1 f3       	breq	.-8      	; 0x2cee <main+0x10>
    2cf6:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_Z14serialEventRunv>
    2cfa:	f9 cf       	rjmp	.-14     	; 0x2cee <main+0x10>

00002cfc <_Znwj>:
    2cfc:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <malloc>

00002d00 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
    2d00:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <malloc>

00002d04 <_ZdlPv>:
    2d04:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <free>

00002d08 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2d08:	cf 92       	push	r12
    2d0a:	df 92       	push	r13
    2d0c:	ef 92       	push	r14
    2d0e:	ff 92       	push	r15
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	6c 01       	movw	r12, r24
    2d1a:	7a 01       	movw	r14, r20
    2d1c:	8b 01       	movw	r16, r22
    2d1e:	c0 e0       	ldi	r28, 0x00	; 0
    2d20:	d0 e0       	ldi	r29, 0x00	; 0
    2d22:	ce 15       	cp	r28, r14
    2d24:	df 05       	cpc	r29, r15
    2d26:	81 f0       	breq	.+32     	; 0x2d48 <_ZN5Print5writeEPKhj+0x40>
    2d28:	d8 01       	movw	r26, r16
    2d2a:	6d 91       	ld	r22, X+
    2d2c:	8d 01       	movw	r16, r26
    2d2e:	d6 01       	movw	r26, r12
    2d30:	ed 91       	ld	r30, X+
    2d32:	fc 91       	ld	r31, X
    2d34:	01 90       	ld	r0, Z+
    2d36:	f0 81       	ld	r31, Z
    2d38:	e0 2d       	mov	r30, r0
    2d3a:	c6 01       	movw	r24, r12
    2d3c:	09 95       	icall
    2d3e:	89 2b       	or	r24, r25
    2d40:	11 f0       	breq	.+4      	; 0x2d46 <_ZN5Print5writeEPKhj+0x3e>
    2d42:	21 96       	adiw	r28, 0x01	; 1
    2d44:	ee cf       	rjmp	.-36     	; 0x2d22 <_ZN5Print5writeEPKhj+0x1a>
    2d46:	7e 01       	movw	r14, r28
    2d48:	c7 01       	movw	r24, r14
    2d4a:	df 91       	pop	r29
    2d4c:	cf 91       	pop	r28
    2d4e:	1f 91       	pop	r17
    2d50:	0f 91       	pop	r16
    2d52:	ff 90       	pop	r15
    2d54:	ef 90       	pop	r14
    2d56:	df 90       	pop	r13
    2d58:	cf 90       	pop	r12
    2d5a:	08 95       	ret

00002d5c <_ZN5Print5writeEPKc>:
    2d5c:	61 15       	cp	r22, r1
    2d5e:	71 05       	cpc	r23, r1
    2d60:	79 f0       	breq	.+30     	; 0x2d80 <_ZN5Print5writeEPKc+0x24>
    2d62:	fb 01       	movw	r30, r22
    2d64:	01 90       	ld	r0, Z+
    2d66:	00 20       	and	r0, r0
    2d68:	e9 f7       	brne	.-6      	; 0x2d64 <_ZN5Print5writeEPKc+0x8>
    2d6a:	31 97       	sbiw	r30, 0x01	; 1
    2d6c:	af 01       	movw	r20, r30
    2d6e:	46 1b       	sub	r20, r22
    2d70:	57 0b       	sbc	r21, r23
    2d72:	dc 01       	movw	r26, r24
    2d74:	ed 91       	ld	r30, X+
    2d76:	fc 91       	ld	r31, X
    2d78:	02 80       	ldd	r0, Z+2	; 0x02
    2d7a:	f3 81       	ldd	r31, Z+3	; 0x03
    2d7c:	e0 2d       	mov	r30, r0
    2d7e:	09 94       	ijmp
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	08 95       	ret

00002d86 <_ZN5Print5printEPKc>:
    2d86:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <_ZN5Print5writeEPKc>

00002d8a <_ZN5Print5printEc>:
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	ed 91       	ld	r30, X+
    2d8e:	fc 91       	ld	r31, X
    2d90:	01 90       	ld	r0, Z+
    2d92:	f0 81       	ld	r31, Z
    2d94:	e0 2d       	mov	r30, r0
    2d96:	09 94       	ijmp

00002d98 <_ZN5Print7printlnEv>:
    2d98:	60 e1       	ldi	r22, 0x10	; 16
    2d9a:	72 e0       	ldi	r23, 0x02	; 2
    2d9c:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <_ZN5Print5writeEPKc>

00002da0 <_ZN5Print7printlnEPKc>:
    2da0:	0f 93       	push	r16
    2da2:	1f 93       	push	r17
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	ec 01       	movw	r28, r24
    2daa:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZN5Print5writeEPKc>
    2dae:	8c 01       	movw	r16, r24
    2db0:	ce 01       	movw	r24, r28
    2db2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN5Print7printlnEv>
    2db6:	80 0f       	add	r24, r16
    2db8:	91 1f       	adc	r25, r17
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	1f 91       	pop	r17
    2dc0:	0f 91       	pop	r16
    2dc2:	08 95       	ret

00002dc4 <_ZN5Print11printNumberEmh>:
    2dc4:	8f 92       	push	r8
    2dc6:	9f 92       	push	r9
    2dc8:	af 92       	push	r10
    2dca:	bf 92       	push	r11
    2dcc:	ef 92       	push	r14
    2dce:	ff 92       	push	r15
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	a1 97       	sbiw	r28, 0x21	; 33
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	7c 01       	movw	r14, r24
    2dea:	fa 01       	movw	r30, r20
    2dec:	cb 01       	movw	r24, r22
    2dee:	19 a2       	std	Y+33, r1	; 0x21
    2df0:	22 30       	cpi	r18, 0x02	; 2
    2df2:	08 f4       	brcc	.+2      	; 0x2df6 <_ZN5Print11printNumberEmh+0x32>
    2df4:	2a e0       	ldi	r18, 0x0A	; 10
    2df6:	8e 01       	movw	r16, r28
    2df8:	0f 5d       	subi	r16, 0xDF	; 223
    2dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfc:	82 2e       	mov	r8, r18
    2dfe:	91 2c       	mov	r9, r1
    2e00:	a1 2c       	mov	r10, r1
    2e02:	b1 2c       	mov	r11, r1
    2e04:	bf 01       	movw	r22, r30
    2e06:	a5 01       	movw	r20, r10
    2e08:	94 01       	movw	r18, r8
    2e0a:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <__udivmodsi4>
    2e0e:	f9 01       	movw	r30, r18
    2e10:	ca 01       	movw	r24, r20
    2e12:	01 50       	subi	r16, 0x01	; 1
    2e14:	11 09       	sbc	r17, r1
    2e16:	6a 30       	cpi	r22, 0x0A	; 10
    2e18:	10 f4       	brcc	.+4      	; 0x2e1e <_ZN5Print11printNumberEmh+0x5a>
    2e1a:	60 5d       	subi	r22, 0xD0	; 208
    2e1c:	01 c0       	rjmp	.+2      	; 0x2e20 <_ZN5Print11printNumberEmh+0x5c>
    2e1e:	69 5c       	subi	r22, 0xC9	; 201
    2e20:	d8 01       	movw	r26, r16
    2e22:	6c 93       	st	X, r22
    2e24:	23 2b       	or	r18, r19
    2e26:	24 2b       	or	r18, r20
    2e28:	25 2b       	or	r18, r21
    2e2a:	61 f7       	brne	.-40     	; 0x2e04 <_ZN5Print11printNumberEmh+0x40>
    2e2c:	b8 01       	movw	r22, r16
    2e2e:	c7 01       	movw	r24, r14
    2e30:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <_ZN5Print5writeEPKc>
    2e34:	a1 96       	adiw	r28, 0x21	; 33
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	1f 91       	pop	r17
    2e46:	0f 91       	pop	r16
    2e48:	ff 90       	pop	r15
    2e4a:	ef 90       	pop	r14
    2e4c:	bf 90       	pop	r11
    2e4e:	af 90       	pop	r10
    2e50:	9f 90       	pop	r9
    2e52:	8f 90       	pop	r8
    2e54:	08 95       	ret

00002e56 <_ZN5Print5printEmi>:
    2e56:	21 15       	cp	r18, r1
    2e58:	31 05       	cpc	r19, r1
    2e5a:	41 f4       	brne	.+16     	; 0x2e6c <_ZN5Print5printEmi+0x16>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	ed 91       	ld	r30, X+
    2e60:	fc 91       	ld	r31, X
    2e62:	01 90       	ld	r0, Z+
    2e64:	f0 81       	ld	r31, Z
    2e66:	e0 2d       	mov	r30, r0
    2e68:	64 2f       	mov	r22, r20
    2e6a:	09 94       	ijmp
    2e6c:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <_ZN5Print11printNumberEmh>

00002e70 <_ZN5Print5printEji>:
    2e70:	9a 01       	movw	r18, r20
    2e72:	ab 01       	movw	r20, r22
    2e74:	60 e0       	ldi	r22, 0x00	; 0
    2e76:	70 e0       	ldi	r23, 0x00	; 0
    2e78:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <_ZN5Print5printEmi>

00002e7c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2e7c:	7f 92       	push	r7
    2e7e:	8f 92       	push	r8
    2e80:	9f 92       	push	r9
    2e82:	af 92       	push	r10
    2e84:	bf 92       	push	r11
    2e86:	cf 92       	push	r12
    2e88:	df 92       	push	r13
    2e8a:	ef 92       	push	r14
    2e8c:	ff 92       	push	r15
    2e8e:	0f 93       	push	r16
    2e90:	1f 93       	push	r17
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	8c 01       	movw	r16, r24
    2e98:	6a 01       	movw	r12, r20
    2e9a:	7b 01       	movw	r14, r22
    2e9c:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2e9e:	9a 01       	movw	r18, r20
    2ea0:	ab 01       	movw	r20, r22
    2ea2:	c7 01       	movw	r24, r14
    2ea4:	b6 01       	movw	r22, r12
    2ea6:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__unordsf2>
    2eaa:	88 23       	and	r24, r24
    2eac:	19 f0       	breq	.+6      	; 0x2eb4 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2eae:	63 e1       	ldi	r22, 0x13	; 19
    2eb0:	72 e0       	ldi	r23, 0x02	; 2
    2eb2:	27 c0       	rjmp	.+78     	; 0x2f02 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    2eb4:	46 01       	movw	r8, r12
    2eb6:	57 01       	movw	r10, r14
    2eb8:	e8 94       	clt
    2eba:	b7 f8       	bld	r11, 7
    2ebc:	2f ef       	ldi	r18, 0xFF	; 255
    2ebe:	3f ef       	ldi	r19, 0xFF	; 255
    2ec0:	4f e7       	ldi	r20, 0x7F	; 127
    2ec2:	5f e7       	ldi	r21, 0x7F	; 127
    2ec4:	c5 01       	movw	r24, r10
    2ec6:	b4 01       	movw	r22, r8
    2ec8:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__unordsf2>
    2ecc:	81 11       	cpse	r24, r1
    2ece:	0d c0       	rjmp	.+26     	; 0x2eea <_ZN5Print10printFloatEdh+0x6e>
    2ed0:	2f ef       	ldi	r18, 0xFF	; 255
    2ed2:	3f ef       	ldi	r19, 0xFF	; 255
    2ed4:	4f e7       	ldi	r20, 0x7F	; 127
    2ed6:	5f e7       	ldi	r21, 0x7F	; 127
    2ed8:	c5 01       	movw	r24, r10
    2eda:	b4 01       	movw	r22, r8
    2edc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	1c f4       	brge	.+6      	; 0x2eea <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2ee4:	67 e1       	ldi	r22, 0x17	; 23
    2ee6:	72 e0       	ldi	r23, 0x02	; 2
    2ee8:	0c c0       	rjmp	.+24     	; 0x2f02 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2eea:	2f ef       	ldi	r18, 0xFF	; 255
    2eec:	3f ef       	ldi	r19, 0xFF	; 255
    2eee:	4f e7       	ldi	r20, 0x7F	; 127
    2ef0:	5f e4       	ldi	r21, 0x4F	; 79
    2ef2:	c7 01       	movw	r24, r14
    2ef4:	b6 01       	movw	r22, r12
    2ef6:	0e 94 03 14 	call	0x2806	; 0x2806 <__gesf2>
    2efa:	18 16       	cp	r1, r24
    2efc:	94 f4       	brge	.+36     	; 0x2f22 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2efe:	6b e1       	ldi	r22, 0x1B	; 27
    2f00:	72 e0       	ldi	r23, 0x02	; 2
    2f02:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	ff 90       	pop	r15
    2f0e:	ef 90       	pop	r14
    2f10:	df 90       	pop	r13
    2f12:	cf 90       	pop	r12
    2f14:	bf 90       	pop	r11
    2f16:	af 90       	pop	r10
    2f18:	9f 90       	pop	r9
    2f1a:	8f 90       	pop	r8
    2f1c:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2f1e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2f22:	2f ef       	ldi	r18, 0xFF	; 255
    2f24:	3f ef       	ldi	r19, 0xFF	; 255
    2f26:	4f e7       	ldi	r20, 0x7F	; 127
    2f28:	5f ec       	ldi	r21, 0xCF	; 207
    2f2a:	c7 01       	movw	r24, r14
    2f2c:	b6 01       	movw	r22, r12
    2f2e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    2f32:	87 fd       	sbrc	r24, 7
    2f34:	e4 cf       	rjmp	.-56     	; 0x2efe <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	a9 01       	movw	r20, r18
    2f3c:	c7 01       	movw	r24, r14
    2f3e:	b6 01       	movw	r22, r12
    2f40:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__cmpsf2>
    2f44:	87 ff       	sbrs	r24, 7
    2f46:	0a c0       	rjmp	.+20     	; 0x2f5c <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2f48:	6d e2       	ldi	r22, 0x2D	; 45
    2f4a:	c8 01       	movw	r24, r16
    2f4c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN5Print5printEc>
    2f50:	ec 01       	movw	r28, r24
     number = -number;
    2f52:	f7 fa       	bst	r15, 7
    2f54:	f0 94       	com	r15
    2f56:	f7 f8       	bld	r15, 7
    2f58:	f0 94       	com	r15
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2f5c:	c0 e0       	ldi	r28, 0x00	; 0
    2f5e:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2f60:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2f62:	60 e0       	ldi	r22, 0x00	; 0
    2f64:	70 e0       	ldi	r23, 0x00	; 0
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2f6a:	7b 14       	cp	r7, r11
    2f6c:	41 f0       	breq	.+16     	; 0x2f7e <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e2       	ldi	r20, 0x20	; 32
    2f74:	51 e4       	ldi	r21, 0x41	; 65
    2f76:	0e 94 82 12 	call	0x2504	; 0x2504 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2f7a:	b3 94       	inc	r11
    2f7c:	f6 cf       	rjmp	.-20     	; 0x2f6a <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2f7e:	a7 01       	movw	r20, r14
    2f80:	96 01       	movw	r18, r12
    2f82:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__addsf3>
    2f86:	6b 01       	movw	r12, r22
    2f88:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2f8a:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fixunssfsi>
    2f8e:	4b 01       	movw	r8, r22
    2f90:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2f92:	2a e0       	ldi	r18, 0x0A	; 10
    2f94:	ab 01       	movw	r20, r22
    2f96:	bc 01       	movw	r22, r24
    2f98:	c8 01       	movw	r24, r16
    2f9a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2f9e:	c8 0f       	add	r28, r24
    2fa0:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2fa2:	77 20       	and	r7, r7
    2fa4:	b9 f1       	breq	.+110    	; 0x3014 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2fa6:	c5 01       	movw	r24, r10
    2fa8:	b4 01       	movw	r22, r8
    2faa:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatunsisf>
    2fae:	9b 01       	movw	r18, r22
    2fb0:	ac 01       	movw	r20, r24
    2fb2:	c7 01       	movw	r24, r14
    2fb4:	b6 01       	movw	r22, r12
    2fb6:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__subsf3>
    2fba:	6b 01       	movw	r12, r22
    2fbc:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2fbe:	6e e2       	ldi	r22, 0x2E	; 46
    2fc0:	c8 01       	movw	r24, r16
    2fc2:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN5Print5printEc>
    2fc6:	c8 0f       	add	r28, r24
    2fc8:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	40 e2       	ldi	r20, 0x20	; 32
    2fd0:	51 e4       	ldi	r21, 0x41	; 65
    2fd2:	c7 01       	movw	r24, r14
    2fd4:	b6 01       	movw	r22, r12
    2fd6:	0e 94 43 14 	call	0x2886	; 0x2886 <__mulsf3>
    2fda:	4b 01       	movw	r8, r22
    2fdc:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    2fde:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__fixunssfsi>
    2fe2:	6b 01       	movw	r12, r22
    2fe4:	7c 01       	movw	r14, r24
    n += print(toPrint);
    2fe6:	4a e0       	ldi	r20, 0x0A	; 10
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	c8 01       	movw	r24, r16
    2fec:	0e 94 38 17 	call	0x2e70	; 0x2e70 <_ZN5Print5printEji>
    2ff0:	c8 0f       	add	r28, r24
    2ff2:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2ff4:	b6 01       	movw	r22, r12
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	0e 94 2a 13 	call	0x2654	; 0x2654 <__floatunsisf>
    2ffe:	9b 01       	movw	r18, r22
    3000:	ac 01       	movw	r20, r24
    3002:	c5 01       	movw	r24, r10
    3004:	b4 01       	movw	r22, r8
    3006:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__subsf3>
    300a:	6b 01       	movw	r12, r22
    300c:	7c 01       	movw	r14, r24
    300e:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3010:	71 10       	cpse	r7, r1
    3012:	db cf       	rjmp	.-74     	; 0x2fca <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3014:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	ff 90       	pop	r15
    3020:	ef 90       	pop	r14
    3022:	df 90       	pop	r13
    3024:	cf 90       	pop	r12
    3026:	bf 90       	pop	r11
    3028:	af 90       	pop	r10
    302a:	9f 90       	pop	r9
    302c:	8f 90       	pop	r8
    302e:	7f 90       	pop	r7
    3030:	08 95       	ret

00003032 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3032:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <_ZN5Print10printFloatEdh>

00003036 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3036:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <_ZN7TwoWire14rxBufferLengthE>
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	20 91 d5 03 	lds	r18, 0x03D5	; 0x8003d5 <_ZN7TwoWire13rxBufferIndexE>
    3040:	82 1b       	sub	r24, r18
    3042:	91 09       	sbc	r25, r1
    3044:	08 95       	ret

00003046 <_ZN7TwoWire4readEv>:
    3046:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <_ZN7TwoWire13rxBufferIndexE>
    304a:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <_ZN7TwoWire14rxBufferLengthE>
    304e:	98 17       	cp	r25, r24
    3050:	50 f4       	brcc	.+20     	; 0x3066 <_ZN7TwoWire4readEv+0x20>
    3052:	e9 2f       	mov	r30, r25
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	ea 52       	subi	r30, 0x2A	; 42
    3058:	fc 4f       	sbci	r31, 0xFC	; 252
    305a:	20 81       	ld	r18, Z
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	9f 5f       	subi	r25, 0xFF	; 255
    3060:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <_ZN7TwoWire13rxBufferIndexE>
    3064:	02 c0       	rjmp	.+4      	; 0x306a <_ZN7TwoWire4readEv+0x24>
    3066:	2f ef       	ldi	r18, 0xFF	; 255
    3068:	3f ef       	ldi	r19, 0xFF	; 255
    306a:	c9 01       	movw	r24, r18
    306c:	08 95       	ret

0000306e <_ZN7TwoWire4peekEv>:
    306e:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <_ZN7TwoWire13rxBufferIndexE>
    3072:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <_ZN7TwoWire14rxBufferLengthE>
    3076:	e8 17       	cp	r30, r24
    3078:	30 f4       	brcc	.+12     	; 0x3086 <_ZN7TwoWire4peekEv+0x18>
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	ea 52       	subi	r30, 0x2A	; 42
    307e:	fc 4f       	sbci	r31, 0xFC	; 252
    3080:	80 81       	ld	r24, Z
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	08 95       	ret
    3086:	8f ef       	ldi	r24, 0xFF	; 255
    3088:	9f ef       	ldi	r25, 0xFF	; 255
    308a:	08 95       	ret

0000308c <_ZN7TwoWire5flushEv>:
    308c:	08 95       	ret

0000308e <_ZN7TwoWire5writeEPKhj>:
    308e:	cf 92       	push	r12
    3090:	df 92       	push	r13
    3092:	ef 92       	push	r14
    3094:	ff 92       	push	r15
    3096:	0f 93       	push	r16
    3098:	1f 93       	push	r17
    309a:	cf 93       	push	r28
    309c:	df 93       	push	r29
    309e:	7c 01       	movw	r14, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	8a 01       	movw	r16, r20
    30a4:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <_ZN7TwoWire12transmittingE>
    30a8:	22 23       	and	r18, r18
    30aa:	89 f0       	breq	.+34     	; 0x30ce <_ZN7TwoWire5writeEPKhj+0x40>
    30ac:	eb 01       	movw	r28, r22
    30ae:	6b 01       	movw	r12, r22
    30b0:	c4 0e       	add	r12, r20
    30b2:	d5 1e       	adc	r13, r21
    30b4:	cc 15       	cp	r28, r12
    30b6:	dd 05       	cpc	r29, r13
    30b8:	69 f0       	breq	.+26     	; 0x30d4 <_ZN7TwoWire5writeEPKhj+0x46>
    30ba:	69 91       	ld	r22, Y+
    30bc:	d7 01       	movw	r26, r14
    30be:	ed 91       	ld	r30, X+
    30c0:	fc 91       	ld	r31, X
    30c2:	01 90       	ld	r0, Z+
    30c4:	f0 81       	ld	r31, Z
    30c6:	e0 2d       	mov	r30, r0
    30c8:	c7 01       	movw	r24, r14
    30ca:	09 95       	icall
    30cc:	f3 cf       	rjmp	.-26     	; 0x30b4 <_ZN7TwoWire5writeEPKhj+0x26>
    30ce:	64 2f       	mov	r22, r20
    30d0:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <twi_transmit>
    30d4:	c8 01       	movw	r24, r16
    30d6:	df 91       	pop	r29
    30d8:	cf 91       	pop	r28
    30da:	1f 91       	pop	r17
    30dc:	0f 91       	pop	r16
    30de:	ff 90       	pop	r15
    30e0:	ef 90       	pop	r14
    30e2:	df 90       	pop	r13
    30e4:	cf 90       	pop	r12
    30e6:	08 95       	ret

000030e8 <_ZN7TwoWire5writeEh>:
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
    30ec:	1f 92       	push	r1
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	69 83       	std	Y+1, r22	; 0x01
    30f4:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <_ZN7TwoWire12transmittingE>
    30f8:	22 23       	and	r18, r18
    30fa:	d1 f0       	breq	.+52     	; 0x3130 <_ZN7TwoWire5writeEh+0x48>
    30fc:	20 91 b1 03 	lds	r18, 0x03B1	; 0x8003b1 <_ZN7TwoWire14txBufferLengthE>
    3100:	20 32       	cpi	r18, 0x20	; 32
    3102:	40 f0       	brcs	.+16     	; 0x3114 <_ZN7TwoWire5writeEh+0x2c>
    3104:	21 e0       	ldi	r18, 0x01	; 1
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	fc 01       	movw	r30, r24
    310a:	33 83       	std	Z+3, r19	; 0x03
    310c:	22 83       	std	Z+2, r18	; 0x02
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	15 c0       	rjmp	.+42     	; 0x313e <_ZN7TwoWire5writeEh+0x56>
    3114:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <_ZN7TwoWire13txBufferIndexE>
    3118:	e8 2f       	mov	r30, r24
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	ed 54       	subi	r30, 0x4D	; 77
    311e:	fc 4f       	sbci	r31, 0xFC	; 252
    3120:	99 81       	ldd	r25, Y+1	; 0x01
    3122:	90 83       	st	Z, r25
    3124:	8f 5f       	subi	r24, 0xFF	; 255
    3126:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <_ZN7TwoWire13txBufferIndexE>
    312a:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <_ZN7TwoWire14txBufferLengthE>
    312e:	05 c0       	rjmp	.+10     	; 0x313a <_ZN7TwoWire5writeEh+0x52>
    3130:	61 e0       	ldi	r22, 0x01	; 1
    3132:	ce 01       	movw	r24, r28
    3134:	01 96       	adiw	r24, 0x01	; 1
    3136:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <twi_transmit>
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0f 90       	pop	r0
    3140:	df 91       	pop	r29
    3142:	cf 91       	pop	r28
    3144:	08 95       	ret

00003146 <_ZN7TwoWireC1Ev>:
    3146:	fc 01       	movw	r30, r24
    3148:	13 82       	std	Z+3, r1	; 0x03
    314a:	12 82       	std	Z+2, r1	; 0x02
    314c:	88 ee       	ldi	r24, 0xE8	; 232
    314e:	93 e0       	ldi	r25, 0x03	; 3
    3150:	a0 e0       	ldi	r26, 0x00	; 0
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	84 83       	std	Z+4, r24	; 0x04
    3156:	95 83       	std	Z+5, r25	; 0x05
    3158:	a6 83       	std	Z+6, r26	; 0x06
    315a:	b7 83       	std	Z+7, r27	; 0x07
    315c:	83 e2       	ldi	r24, 0x23	; 35
    315e:	92 e0       	ldi	r25, 0x02	; 2
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24
    3164:	08 95       	ret

00003166 <_ZN7TwoWire5beginEv>:
    3166:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <_ZN7TwoWire13rxBufferIndexE>
    316a:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <_ZN7TwoWire14rxBufferLengthE>
    316e:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <_ZN7TwoWire13txBufferIndexE>
    3172:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <_ZN7TwoWire14txBufferLengthE>
    3176:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <twi_init>

0000317a <_ZN7TwoWire17beginTransmissionEh>:
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <_ZN7TwoWire12transmittingE>
    3180:	60 93 d3 03 	sts	0x03D3, r22	; 0x8003d3 <_ZN7TwoWire9txAddressE>
    3184:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <_ZN7TwoWire13txBufferIndexE>
    3188:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <_ZN7TwoWire14txBufferLengthE>
    318c:	08 95       	ret

0000318e <_ZN7TwoWire15endTransmissionEh>:
    318e:	0f 93       	push	r16
    3190:	06 2f       	mov	r16, r22
    3192:	21 e0       	ldi	r18, 0x01	; 1
    3194:	40 91 b1 03 	lds	r20, 0x03B1	; 0x8003b1 <_ZN7TwoWire14txBufferLengthE>
    3198:	63 eb       	ldi	r22, 0xB3	; 179
    319a:	73 e0       	ldi	r23, 0x03	; 3
    319c:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <_ZN7TwoWire9txAddressE>
    31a0:	0e 94 94 1b 	call	0x3728	; 0x3728 <twi_writeTo>
    31a4:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <_ZN7TwoWire13txBufferIndexE>
    31a8:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <_ZN7TwoWire14txBufferLengthE>
    31ac:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <_ZN7TwoWire12transmittingE>
    31b0:	0f 91       	pop	r16
    31b2:	08 95       	ret

000031b4 <_ZN7TwoWire11requestFromEhhmhh>:
    31b4:	4f 92       	push	r4
    31b6:	5f 92       	push	r5
    31b8:	6f 92       	push	r6
    31ba:	7f 92       	push	r7
    31bc:	af 92       	push	r10
    31be:	bf 92       	push	r11
    31c0:	cf 92       	push	r12
    31c2:	ef 92       	push	r14
    31c4:	ff 92       	push	r15
    31c6:	0f 93       	push	r16
    31c8:	1f 93       	push	r17
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	5c 01       	movw	r10, r24
    31d0:	f6 2e       	mov	r15, r22
    31d2:	d4 2f       	mov	r29, r20
    31d4:	28 01       	movw	r4, r16
    31d6:	39 01       	movw	r6, r18
    31d8:	ee 20       	and	r14, r14
    31da:	21 f1       	breq	.+72     	; 0x3224 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    31dc:	0e 94 bd 18 	call	0x317a	; 0x317a <_ZN7TwoWire17beginTransmissionEh>
    31e0:	ce 2d       	mov	r28, r14
    31e2:	c4 30       	cpi	r28, 0x04	; 4
    31e4:	08 f0       	brcs	.+2      	; 0x31e8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    31e6:	c3 e0       	ldi	r28, 0x03	; 3
    31e8:	c1 50       	subi	r28, 0x01	; 1
    31ea:	c0 f0       	brcs	.+48     	; 0x321c <_ZN7TwoWire11requestFromEhhmhh+0x68>
    31ec:	28 e0       	ldi	r18, 0x08	; 8
    31ee:	c2 9f       	mul	r28, r18
    31f0:	c0 01       	movw	r24, r0
    31f2:	11 24       	eor	r1, r1
    31f4:	a3 01       	movw	r20, r6
    31f6:	92 01       	movw	r18, r4
    31f8:	04 c0       	rjmp	.+8      	; 0x3202 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    31fa:	56 95       	lsr	r21
    31fc:	47 95       	ror	r20
    31fe:	37 95       	ror	r19
    3200:	27 95       	ror	r18
    3202:	8a 95       	dec	r24
    3204:	d2 f7       	brpl	.-12     	; 0x31fa <_ZN7TwoWire11requestFromEhhmhh+0x46>
    3206:	ca 01       	movw	r24, r20
    3208:	b9 01       	movw	r22, r18
    320a:	d5 01       	movw	r26, r10
    320c:	ed 91       	ld	r30, X+
    320e:	fc 91       	ld	r31, X
    3210:	01 90       	ld	r0, Z+
    3212:	f0 81       	ld	r31, Z
    3214:	e0 2d       	mov	r30, r0
    3216:	c5 01       	movw	r24, r10
    3218:	09 95       	icall
    321a:	e6 cf       	rjmp	.-52     	; 0x31e8 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	c5 01       	movw	r24, r10
    3220:	0e 94 c7 18 	call	0x318e	; 0x318e <_ZN7TwoWire15endTransmissionEh>
    3224:	4d 2f       	mov	r20, r29
    3226:	d1 32       	cpi	r29, 0x21	; 33
    3228:	08 f0       	brcs	.+2      	; 0x322c <_ZN7TwoWire11requestFromEhhmhh+0x78>
    322a:	40 e2       	ldi	r20, 0x20	; 32
    322c:	2c 2d       	mov	r18, r12
    322e:	66 ed       	ldi	r22, 0xD6	; 214
    3230:	73 e0       	ldi	r23, 0x03	; 3
    3232:	8f 2d       	mov	r24, r15
    3234:	0e 94 4c 1b 	call	0x3698	; 0x3698 <twi_readFrom>
    3238:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <_ZN7TwoWire13rxBufferIndexE>
    323c:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <_ZN7TwoWire14rxBufferLengthE>
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	1f 91       	pop	r17
    3246:	0f 91       	pop	r16
    3248:	ff 90       	pop	r15
    324a:	ef 90       	pop	r14
    324c:	cf 90       	pop	r12
    324e:	bf 90       	pop	r11
    3250:	af 90       	pop	r10
    3252:	7f 90       	pop	r7
    3254:	6f 90       	pop	r6
    3256:	5f 90       	pop	r5
    3258:	4f 90       	pop	r4
    325a:	08 95       	ret

0000325c <_ZN7TwoWire11requestFromEhhh>:
    325c:	cf 92       	push	r12
    325e:	ef 92       	push	r14
    3260:	0f 93       	push	r16
    3262:	1f 93       	push	r17
    3264:	c2 2e       	mov	r12, r18
    3266:	e1 2c       	mov	r14, r1
    3268:	00 e0       	ldi	r16, 0x00	; 0
    326a:	10 e0       	ldi	r17, 0x00	; 0
    326c:	98 01       	movw	r18, r16
    326e:	0e 94 da 18 	call	0x31b4	; 0x31b4 <_ZN7TwoWire11requestFromEhhmhh>
    3272:	1f 91       	pop	r17
    3274:	0f 91       	pop	r16
    3276:	ef 90       	pop	r14
    3278:	cf 90       	pop	r12
    327a:	08 95       	ret

0000327c <_ZN7TwoWire11requestFromEhh>:
    327c:	21 e0       	ldi	r18, 0x01	; 1
    327e:	0c 94 2e 19 	jmp	0x325c	; 0x325c <_ZN7TwoWire11requestFromEhhh>

00003282 <_ZN7TwoWire15endTransmissionEv>:
    3282:	61 e0       	ldi	r22, 0x01	; 1
    3284:	0c 94 c7 18 	jmp	0x318e	; 0x318e <_ZN7TwoWire15endTransmissionEh>

00003288 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3288:	84 ea       	ldi	r24, 0xA4	; 164
    328a:	93 e0       	ldi	r25, 0x03	; 3
    328c:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <_ZN7TwoWireC1Ev>

00003290 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3290:	1f 92       	push	r1
    3292:	0f 92       	push	r0
    3294:	0f b6       	in	r0, 0x3f	; 63
    3296:	0f 92       	push	r0
    3298:	11 24       	eor	r1, r1
    329a:	2f 93       	push	r18
    329c:	3f 93       	push	r19
    329e:	8f 93       	push	r24
    32a0:	9f 93       	push	r25
    32a2:	af 93       	push	r26
    32a4:	bf 93       	push	r27
    32a6:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <timer0_millis>
    32aa:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <timer0_millis+0x1>
    32ae:	a0 91 f9 03 	lds	r26, 0x03F9	; 0x8003f9 <timer0_millis+0x2>
    32b2:	b0 91 fa 03 	lds	r27, 0x03FA	; 0x8003fa <timer0_millis+0x3>
    32b6:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <timer0_fract>
    32ba:	23 e0       	ldi	r18, 0x03	; 3
    32bc:	23 0f       	add	r18, r19
    32be:	2d 37       	cpi	r18, 0x7D	; 125
    32c0:	20 f4       	brcc	.+8      	; 0x32ca <__vector_16+0x3a>
    32c2:	01 96       	adiw	r24, 0x01	; 1
    32c4:	a1 1d       	adc	r26, r1
    32c6:	b1 1d       	adc	r27, r1
    32c8:	05 c0       	rjmp	.+10     	; 0x32d4 <__vector_16+0x44>
    32ca:	26 e8       	ldi	r18, 0x86	; 134
    32cc:	23 0f       	add	r18, r19
    32ce:	02 96       	adiw	r24, 0x02	; 2
    32d0:	a1 1d       	adc	r26, r1
    32d2:	b1 1d       	adc	r27, r1
    32d4:	20 93 f6 03 	sts	0x03F6, r18	; 0x8003f6 <timer0_fract>
    32d8:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <timer0_millis>
    32dc:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <timer0_millis+0x1>
    32e0:	a0 93 f9 03 	sts	0x03F9, r26	; 0x8003f9 <timer0_millis+0x2>
    32e4:	b0 93 fa 03 	sts	0x03FA, r27	; 0x8003fa <timer0_millis+0x3>
    32e8:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <timer0_overflow_count>
    32ec:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <timer0_overflow_count+0x1>
    32f0:	a0 91 fd 03 	lds	r26, 0x03FD	; 0x8003fd <timer0_overflow_count+0x2>
    32f4:	b0 91 fe 03 	lds	r27, 0x03FE	; 0x8003fe <timer0_overflow_count+0x3>
    32f8:	01 96       	adiw	r24, 0x01	; 1
    32fa:	a1 1d       	adc	r26, r1
    32fc:	b1 1d       	adc	r27, r1
    32fe:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <timer0_overflow_count>
    3302:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <timer0_overflow_count+0x1>
    3306:	a0 93 fd 03 	sts	0x03FD, r26	; 0x8003fd <timer0_overflow_count+0x2>
    330a:	b0 93 fe 03 	sts	0x03FE, r27	; 0x8003fe <timer0_overflow_count+0x3>
    330e:	bf 91       	pop	r27
    3310:	af 91       	pop	r26
    3312:	9f 91       	pop	r25
    3314:	8f 91       	pop	r24
    3316:	3f 91       	pop	r19
    3318:	2f 91       	pop	r18
    331a:	0f 90       	pop	r0
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	0f 90       	pop	r0
    3320:	1f 90       	pop	r1
    3322:	18 95       	reti

00003324 <millis>:
    3324:	2f b7       	in	r18, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	60 91 f7 03 	lds	r22, 0x03F7	; 0x8003f7 <timer0_millis>
    332c:	70 91 f8 03 	lds	r23, 0x03F8	; 0x8003f8 <timer0_millis+0x1>
    3330:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <timer0_millis+0x2>
    3334:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <timer0_millis+0x3>
    3338:	2f bf       	out	0x3f, r18	; 63
    333a:	08 95       	ret

0000333c <micros>:
    333c:	3f b7       	in	r19, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <timer0_overflow_count>
    3344:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <timer0_overflow_count+0x1>
    3348:	a0 91 fd 03 	lds	r26, 0x03FD	; 0x8003fd <timer0_overflow_count+0x2>
    334c:	b0 91 fe 03 	lds	r27, 0x03FE	; 0x8003fe <timer0_overflow_count+0x3>
    3350:	26 b5       	in	r18, 0x26	; 38
    3352:	a8 9b       	sbis	0x15, 0	; 21
    3354:	05 c0       	rjmp	.+10     	; 0x3360 <micros+0x24>
    3356:	2f 3f       	cpi	r18, 0xFF	; 255
    3358:	19 f0       	breq	.+6      	; 0x3360 <micros+0x24>
    335a:	01 96       	adiw	r24, 0x01	; 1
    335c:	a1 1d       	adc	r26, r1
    335e:	b1 1d       	adc	r27, r1
    3360:	3f bf       	out	0x3f, r19	; 63
    3362:	ba 2f       	mov	r27, r26
    3364:	a9 2f       	mov	r26, r25
    3366:	98 2f       	mov	r25, r24
    3368:	88 27       	eor	r24, r24
    336a:	82 0f       	add	r24, r18
    336c:	91 1d       	adc	r25, r1
    336e:	a1 1d       	adc	r26, r1
    3370:	b1 1d       	adc	r27, r1
    3372:	bc 01       	movw	r22, r24
    3374:	cd 01       	movw	r24, r26
    3376:	42 e0       	ldi	r20, 0x02	; 2
    3378:	66 0f       	add	r22, r22
    337a:	77 1f       	adc	r23, r23
    337c:	88 1f       	adc	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	4a 95       	dec	r20
    3382:	d1 f7       	brne	.-12     	; 0x3378 <micros+0x3c>
    3384:	08 95       	ret

00003386 <delay>:
    3386:	8f 92       	push	r8
    3388:	9f 92       	push	r9
    338a:	af 92       	push	r10
    338c:	bf 92       	push	r11
    338e:	cf 92       	push	r12
    3390:	df 92       	push	r13
    3392:	ef 92       	push	r14
    3394:	ff 92       	push	r15
    3396:	6b 01       	movw	r12, r22
    3398:	7c 01       	movw	r14, r24
    339a:	0e 94 9e 19 	call	0x333c	; 0x333c <micros>
    339e:	4b 01       	movw	r8, r22
    33a0:	5c 01       	movw	r10, r24
    33a2:	c1 14       	cp	r12, r1
    33a4:	d1 04       	cpc	r13, r1
    33a6:	e1 04       	cpc	r14, r1
    33a8:	f1 04       	cpc	r15, r1
    33aa:	01 f1       	breq	.+64     	; 0x33ec <delay+0x66>
    33ac:	0e 94 2d 1b 	call	0x365a	; 0x365a <yield>
    33b0:	0e 94 9e 19 	call	0x333c	; 0x333c <micros>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	88 19       	sub	r24, r8
    33ba:	99 09       	sbc	r25, r9
    33bc:	aa 09       	sbc	r26, r10
    33be:	bb 09       	sbc	r27, r11
    33c0:	88 3e       	cpi	r24, 0xE8	; 232
    33c2:	93 40       	sbci	r25, 0x03	; 3
    33c4:	a1 05       	cpc	r26, r1
    33c6:	b1 05       	cpc	r27, r1
    33c8:	60 f3       	brcs	.-40     	; 0x33a2 <delay+0x1c>
    33ca:	21 e0       	ldi	r18, 0x01	; 1
    33cc:	c2 1a       	sub	r12, r18
    33ce:	d1 08       	sbc	r13, r1
    33d0:	e1 08       	sbc	r14, r1
    33d2:	f1 08       	sbc	r15, r1
    33d4:	88 ee       	ldi	r24, 0xE8	; 232
    33d6:	88 0e       	add	r8, r24
    33d8:	83 e0       	ldi	r24, 0x03	; 3
    33da:	98 1e       	adc	r9, r24
    33dc:	a1 1c       	adc	r10, r1
    33de:	b1 1c       	adc	r11, r1
    33e0:	c1 14       	cp	r12, r1
    33e2:	d1 04       	cpc	r13, r1
    33e4:	e1 04       	cpc	r14, r1
    33e6:	f1 04       	cpc	r15, r1
    33e8:	19 f7       	brne	.-58     	; 0x33b0 <delay+0x2a>
    33ea:	db cf       	rjmp	.-74     	; 0x33a2 <delay+0x1c>
    33ec:	ff 90       	pop	r15
    33ee:	ef 90       	pop	r14
    33f0:	df 90       	pop	r13
    33f2:	cf 90       	pop	r12
    33f4:	bf 90       	pop	r11
    33f6:	af 90       	pop	r10
    33f8:	9f 90       	pop	r9
    33fa:	8f 90       	pop	r8
    33fc:	08 95       	ret

000033fe <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    33fe:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3400:	84 b5       	in	r24, 0x24	; 36
    3402:	82 60       	ori	r24, 0x02	; 2
    3404:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3406:	84 b5       	in	r24, 0x24	; 36
    3408:	81 60       	ori	r24, 0x01	; 1
    340a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    340c:	85 b5       	in	r24, 0x25	; 37
    340e:	82 60       	ori	r24, 0x02	; 2
    3410:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3412:	85 b5       	in	r24, 0x25	; 37
    3414:	81 60       	ori	r24, 0x01	; 1
    3416:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3418:	ee e6       	ldi	r30, 0x6E	; 110
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	81 60       	ori	r24, 0x01	; 1
    3420:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3422:	e1 e8       	ldi	r30, 0x81	; 129
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3428:	80 81       	ld	r24, Z
    342a:	82 60       	ori	r24, 0x02	; 2
    342c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    342e:	80 81       	ld	r24, Z
    3430:	81 60       	ori	r24, 0x01	; 1
    3432:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3434:	e0 e8       	ldi	r30, 0x80	; 128
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	81 60       	ori	r24, 0x01	; 1
    343c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    343e:	e1 eb       	ldi	r30, 0xB1	; 177
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	84 60       	ori	r24, 0x04	; 4
    3446:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3448:	e0 eb       	ldi	r30, 0xB0	; 176
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	81 60       	ori	r24, 0x01	; 1
    3450:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3452:	ea e7       	ldi	r30, 0x7A	; 122
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	80 81       	ld	r24, Z
    3458:	84 60       	ori	r24, 0x04	; 4
    345a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    345c:	80 81       	ld	r24, Z
    345e:	82 60       	ori	r24, 0x02	; 2
    3460:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3462:	80 81       	ld	r24, Z
    3464:	81 60       	ori	r24, 0x01	; 1
    3466:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3468:	80 81       	ld	r24, Z
    346a:	80 68       	ori	r24, 0x80	; 128
    346c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    346e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3472:	08 95       	ret

00003474 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    3474:	1f 93       	push	r17
    3476:	cf 93       	push	r28
    3478:	df 93       	push	r29
    347a:	18 2f       	mov	r17, r24
    347c:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    347e:	61 e0       	ldi	r22, 0x01	; 1
    3480:	0e 94 c2 1a 	call	0x3584	; 0x3584 <pinMode>
	if (val == 0)
    3484:	20 97       	sbiw	r28, 0x00	; 0
    3486:	11 f4       	brne	.+4      	; 0x348c <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	04 c0       	rjmp	.+8      	; 0x3494 <analogWrite+0x20>
	}
	else if (val == 255)
    348c:	cf 3f       	cpi	r28, 0xFF	; 255
    348e:	d1 05       	cpc	r29, r1
    3490:	39 f4       	brne	.+14     	; 0x34a0 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    3492:	61 e0       	ldi	r22, 0x01	; 1
    3494:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    349c:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    34a0:	e1 2f       	mov	r30, r17
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	ed 5d       	subi	r30, 0xDD	; 221
    34a6:	fd 4f       	sbci	r31, 0xFD	; 253
    34a8:	e4 91       	lpm	r30, Z
    34aa:	e3 30       	cpi	r30, 0x03	; 3
    34ac:	f9 f0       	breq	.+62     	; 0x34ec <analogWrite+0x78>
    34ae:	48 f4       	brcc	.+18     	; 0x34c2 <analogWrite+0x4e>
    34b0:	e1 30       	cpi	r30, 0x01	; 1
    34b2:	b9 f0       	breq	.+46     	; 0x34e2 <analogWrite+0x6e>
    34b4:	e2 30       	cpi	r30, 0x02	; 2
    34b6:	a1 f5       	brne	.+104    	; 0x3520 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    34b8:	84 b5       	in	r24, 0x24	; 36
    34ba:	80 62       	ori	r24, 0x20	; 32
    34bc:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    34be:	c8 bd       	out	0x28, r28	; 40
				break;
    34c0:	34 c0       	rjmp	.+104    	; 0x352a <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    34c2:	e7 30       	cpi	r30, 0x07	; 7
    34c4:	e9 f0       	breq	.+58     	; 0x3500 <analogWrite+0x8c>
    34c6:	e8 30       	cpi	r30, 0x08	; 8
    34c8:	19 f1       	breq	.+70     	; 0x3510 <analogWrite+0x9c>
    34ca:	e4 30       	cpi	r30, 0x04	; 4
    34cc:	49 f5       	brne	.+82     	; 0x3520 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    34ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    34d2:	80 62       	ori	r24, 0x20	; 32
    34d4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    34d8:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    34dc:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    34e0:	24 c0       	rjmp	.+72     	; 0x352a <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    34e2:	84 b5       	in	r24, 0x24	; 36
    34e4:	80 68       	ori	r24, 0x80	; 128
    34e6:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    34e8:	c7 bd       	out	0x27, r28	; 39
				break;
    34ea:	1f c0       	rjmp	.+62     	; 0x352a <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    34ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    34f0:	80 68       	ori	r24, 0x80	; 128
    34f2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    34f6:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    34fa:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    34fe:	15 c0       	rjmp	.+42     	; 0x352a <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    3500:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3504:	80 68       	ori	r24, 0x80	; 128
    3506:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    350a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    350e:	0d c0       	rjmp	.+26     	; 0x352a <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    3510:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3514:	80 62       	ori	r24, 0x20	; 32
    3516:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    351a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    351e:	05 c0       	rjmp	.+10     	; 0x352a <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    3520:	c0 38       	cpi	r28, 0x80	; 128
    3522:	d1 05       	cpc	r29, r1
    3524:	0c f0       	brlt	.+2      	; 0x3528 <analogWrite+0xb4>
    3526:	b5 cf       	rjmp	.-150    	; 0x3492 <analogWrite+0x1e>
    3528:	af cf       	rjmp	.-162    	; 0x3488 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    352a:	df 91       	pop	r29
    352c:	cf 91       	pop	r28
    352e:	1f 91       	pop	r17
    3530:	08 95       	ret

00003532 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3532:	83 30       	cpi	r24, 0x03	; 3
    3534:	81 f0       	breq	.+32     	; 0x3556 <turnOffPWM+0x24>
    3536:	28 f4       	brcc	.+10     	; 0x3542 <turnOffPWM+0x10>
    3538:	81 30       	cpi	r24, 0x01	; 1
    353a:	99 f0       	breq	.+38     	; 0x3562 <turnOffPWM+0x30>
    353c:	82 30       	cpi	r24, 0x02	; 2
    353e:	a1 f0       	breq	.+40     	; 0x3568 <turnOffPWM+0x36>
    3540:	08 95       	ret
    3542:	87 30       	cpi	r24, 0x07	; 7
    3544:	a9 f0       	breq	.+42     	; 0x3570 <turnOffPWM+0x3e>
    3546:	88 30       	cpi	r24, 0x08	; 8
    3548:	b9 f0       	breq	.+46     	; 0x3578 <turnOffPWM+0x46>
    354a:	84 30       	cpi	r24, 0x04	; 4
    354c:	d1 f4       	brne	.+52     	; 0x3582 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    354e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3552:	8f 7d       	andi	r24, 0xDF	; 223
    3554:	03 c0       	rjmp	.+6      	; 0x355c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3556:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    355a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    355c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3560:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3562:	84 b5       	in	r24, 0x24	; 36
    3564:	8f 77       	andi	r24, 0x7F	; 127
    3566:	02 c0       	rjmp	.+4      	; 0x356c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3568:	84 b5       	in	r24, 0x24	; 36
    356a:	8f 7d       	andi	r24, 0xDF	; 223
    356c:	84 bd       	out	0x24, r24	; 36
    356e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3570:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3574:	8f 77       	andi	r24, 0x7F	; 127
    3576:	03 c0       	rjmp	.+6      	; 0x357e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3578:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    357c:	8f 7d       	andi	r24, 0xDF	; 223
    357e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3582:	08 95       	ret

00003584 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3584:	cf 93       	push	r28
    3586:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	fc 01       	movw	r30, r24
    358c:	e9 5c       	subi	r30, 0xC9	; 201
    358e:	fd 4f       	sbci	r31, 0xFD	; 253
    3590:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3592:	fc 01       	movw	r30, r24
    3594:	e5 5b       	subi	r30, 0xB5	; 181
    3596:	fd 4f       	sbci	r31, 0xFD	; 253
    3598:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    359a:	88 23       	and	r24, r24
    359c:	61 f1       	breq	.+88     	; 0x35f6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	fc 01       	movw	r30, r24
    35a6:	ed 58       	subi	r30, 0x8D	; 141
    35a8:	fd 4f       	sbci	r31, 0xFD	; 253
    35aa:	c5 91       	lpm	r28, Z+
    35ac:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    35ae:	fc 01       	movw	r30, r24
    35b0:	e7 59       	subi	r30, 0x97	; 151
    35b2:	fd 4f       	sbci	r31, 0xFD	; 253
    35b4:	a5 91       	lpm	r26, Z+
    35b6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    35b8:	61 11       	cpse	r22, r1
    35ba:	09 c0       	rjmp	.+18     	; 0x35ce <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    35bc:	9f b7       	in	r25, 0x3f	; 63
                cli();
    35be:	f8 94       	cli
		*reg &= ~bit;
    35c0:	88 81       	ld	r24, Y
    35c2:	20 95       	com	r18
    35c4:	82 23       	and	r24, r18
    35c6:	88 83       	st	Y, r24
		*out &= ~bit;
    35c8:	ec 91       	ld	r30, X
    35ca:	2e 23       	and	r18, r30
    35cc:	0b c0       	rjmp	.+22     	; 0x35e4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    35ce:	62 30       	cpi	r22, 0x02	; 2
    35d0:	61 f4       	brne	.+24     	; 0x35ea <pinMode+0x66>
		uint8_t oldSREG = SREG;
    35d2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    35d4:	f8 94       	cli
		*reg &= ~bit;
    35d6:	88 81       	ld	r24, Y
    35d8:	32 2f       	mov	r19, r18
    35da:	30 95       	com	r19
    35dc:	83 23       	and	r24, r19
    35de:	88 83       	st	Y, r24
		*out |= bit;
    35e0:	ec 91       	ld	r30, X
    35e2:	2e 2b       	or	r18, r30
    35e4:	2c 93       	st	X, r18
		SREG = oldSREG;
    35e6:	9f bf       	out	0x3f, r25	; 63
    35e8:	06 c0       	rjmp	.+12     	; 0x35f6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    35ea:	8f b7       	in	r24, 0x3f	; 63
                cli();
    35ec:	f8 94       	cli
		*reg |= bit;
    35ee:	e8 81       	ld	r30, Y
    35f0:	2e 2b       	or	r18, r30
    35f2:	28 83       	st	Y, r18
		SREG = oldSREG;
    35f4:	8f bf       	out	0x3f, r24	; 63
	}
}
    35f6:	df 91       	pop	r29
    35f8:	cf 91       	pop	r28
    35fa:	08 95       	ret

000035fc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3602:	28 2f       	mov	r18, r24
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	f9 01       	movw	r30, r18
    3608:	ed 5d       	subi	r30, 0xDD	; 221
    360a:	fd 4f       	sbci	r31, 0xFD	; 253
    360c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    360e:	f9 01       	movw	r30, r18
    3610:	e9 5c       	subi	r30, 0xC9	; 201
    3612:	fd 4f       	sbci	r31, 0xFD	; 253
    3614:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3616:	f9 01       	movw	r30, r18
    3618:	e5 5b       	subi	r30, 0xB5	; 181
    361a:	fd 4f       	sbci	r31, 0xFD	; 253
    361c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    361e:	cc 23       	and	r28, r28
    3620:	c1 f0       	breq	.+48     	; 0x3652 <digitalWrite+0x56>
    3622:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3624:	81 11       	cpse	r24, r1
    3626:	0e 94 99 1a 	call	0x3532	; 0x3532 <turnOffPWM>

	out = portOutputRegister(port);
    362a:	ec 2f       	mov	r30, r28
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	ee 0f       	add	r30, r30
    3630:	ff 1f       	adc	r31, r31
    3632:	e7 59       	subi	r30, 0x97	; 151
    3634:	fd 4f       	sbci	r31, 0xFD	; 253
    3636:	a5 91       	lpm	r26, Z+
    3638:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    363a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    363c:	f8 94       	cli

	if (val == LOW) {
    363e:	11 11       	cpse	r17, r1
    3640:	04 c0       	rjmp	.+8      	; 0x364a <digitalWrite+0x4e>
		*out &= ~bit;
    3642:	8c 91       	ld	r24, X
    3644:	d0 95       	com	r29
    3646:	d8 23       	and	r29, r24
    3648:	02 c0       	rjmp	.+4      	; 0x364e <digitalWrite+0x52>
	} else {
		*out |= bit;
    364a:	ec 91       	ld	r30, X
    364c:	de 2b       	or	r29, r30
    364e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3650:	9f bf       	out	0x3f, r25	; 63
}
    3652:	df 91       	pop	r29
    3654:	cf 91       	pop	r28
    3656:	1f 91       	pop	r17
    3658:	08 95       	ret

0000365a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    365a:	08 95       	ret

0000365c <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    365c:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <twi_state>
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <twi_sendStop>
    3666:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <twi_inRepStart>
    366a:	61 e0       	ldi	r22, 0x01	; 1
    366c:	82 e1       	ldi	r24, 0x12	; 18
    366e:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <digitalWrite>
    3672:	61 e0       	ldi	r22, 0x01	; 1
    3674:	83 e1       	ldi	r24, 0x13	; 19
    3676:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <digitalWrite>
    367a:	e9 eb       	ldi	r30, 0xB9	; 185
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	80 81       	ld	r24, Z
    3680:	8e 7f       	andi	r24, 0xFE	; 254
    3682:	80 83       	st	Z, r24
    3684:	80 81       	ld	r24, Z
    3686:	8d 7f       	andi	r24, 0xFD	; 253
    3688:	80 83       	st	Z, r24
    368a:	88 e4       	ldi	r24, 0x48	; 72
    368c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3690:	85 e4       	ldi	r24, 0x45	; 69
    3692:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3696:	08 95       	ret

00003698 <twi_readFrom>:
    3698:	41 32       	cpi	r20, 0x21	; 33
    369a:	08 f0       	brcs	.+2      	; 0x369e <twi_readFrom+0x6>
    369c:	43 c0       	rjmp	.+134    	; 0x3724 <twi_readFrom+0x8c>
    369e:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <twi_state>
    36a2:	91 11       	cpse	r25, r1
    36a4:	fc cf       	rjmp	.-8      	; 0x369e <twi_readFrom+0x6>
    36a6:	91 e0       	ldi	r25, 0x01	; 1
    36a8:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <twi_state>
    36ac:	20 93 6a 04 	sts	0x046A, r18	; 0x80046a <twi_sendStop>
    36b0:	2f ef       	ldi	r18, 0xFF	; 255
    36b2:	20 93 ff 03 	sts	0x03FF, r18	; 0x8003ff <twi_error>
    36b6:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_masterBufferIndex>
    36ba:	24 0f       	add	r18, r20
    36bc:	20 93 43 04 	sts	0x0443, r18	; 0x800443 <twi_masterBufferLength>
    36c0:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <twi_slarw>
    36c4:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <twi_slarw>
    36c8:	88 0f       	add	r24, r24
    36ca:	89 2b       	or	r24, r25
    36cc:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <twi_slarw>
    36d0:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <twi_inRepStart>
    36d4:	81 30       	cpi	r24, 0x01	; 1
    36d6:	61 f4       	brne	.+24     	; 0x36f0 <twi_readFrom+0x58>
    36d8:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <twi_inRepStart>
    36dc:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <twi_slarw>
    36e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    36e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    36e8:	83 fd       	sbrc	r24, 3
    36ea:	f8 cf       	rjmp	.-16     	; 0x36dc <twi_readFrom+0x44>
    36ec:	85 ec       	ldi	r24, 0xC5	; 197
    36ee:	01 c0       	rjmp	.+2      	; 0x36f2 <twi_readFrom+0x5a>
    36f0:	85 ee       	ldi	r24, 0xE5	; 229
    36f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    36f6:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_state>
    36fa:	81 30       	cpi	r24, 0x01	; 1
    36fc:	e1 f3       	breq	.-8      	; 0x36f6 <twi_readFrom+0x5e>
    36fe:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <twi_masterBufferIndex>
    3702:	84 17       	cp	r24, r20
    3704:	10 f4       	brcc	.+4      	; 0x370a <twi_readFrom+0x72>
    3706:	40 91 44 04 	lds	r20, 0x0444	; 0x800444 <twi_masterBufferIndex>
    370a:	a5 e4       	ldi	r26, 0x45	; 69
    370c:	b4 e0       	ldi	r27, 0x04	; 4
    370e:	96 2f       	mov	r25, r22
    3710:	fb 01       	movw	r30, r22
    3712:	8e 2f       	mov	r24, r30
    3714:	89 1b       	sub	r24, r25
    3716:	84 17       	cp	r24, r20
    3718:	18 f4       	brcc	.+6      	; 0x3720 <twi_readFrom+0x88>
    371a:	8d 91       	ld	r24, X+
    371c:	81 93       	st	Z+, r24
    371e:	f9 cf       	rjmp	.-14     	; 0x3712 <twi_readFrom+0x7a>
    3720:	84 2f       	mov	r24, r20
    3722:	08 95       	ret
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	08 95       	ret

00003728 <twi_writeTo>:
    3728:	0f 93       	push	r16
    372a:	41 32       	cpi	r20, 0x21	; 33
    372c:	08 f0       	brcs	.+2      	; 0x3730 <twi_writeTo+0x8>
    372e:	4a c0       	rjmp	.+148    	; 0x37c4 <twi_writeTo+0x9c>
    3730:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <twi_state>
    3734:	91 11       	cpse	r25, r1
    3736:	fc cf       	rjmp	.-8      	; 0x3730 <twi_writeTo+0x8>
    3738:	32 e0       	ldi	r19, 0x02	; 2
    373a:	30 93 6c 04 	sts	0x046C, r19	; 0x80046c <twi_state>
    373e:	00 93 6a 04 	sts	0x046A, r16	; 0x80046a <twi_sendStop>
    3742:	3f ef       	ldi	r19, 0xFF	; 255
    3744:	30 93 ff 03 	sts	0x03FF, r19	; 0x8003ff <twi_error>
    3748:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <twi_masterBufferIndex>
    374c:	40 93 43 04 	sts	0x0443, r20	; 0x800443 <twi_masterBufferLength>
    3750:	56 2f       	mov	r21, r22
    3752:	a5 e4       	ldi	r26, 0x45	; 69
    3754:	b4 e0       	ldi	r27, 0x04	; 4
    3756:	fb 01       	movw	r30, r22
    3758:	3e 2f       	mov	r19, r30
    375a:	35 1b       	sub	r19, r21
    375c:	34 17       	cp	r19, r20
    375e:	18 f4       	brcc	.+6      	; 0x3766 <twi_writeTo+0x3e>
    3760:	31 91       	ld	r19, Z+
    3762:	3d 93       	st	X+, r19
    3764:	f9 cf       	rjmp	.-14     	; 0x3758 <twi_writeTo+0x30>
    3766:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <twi_slarw>
    376a:	30 91 6b 04 	lds	r19, 0x046B	; 0x80046b <twi_slarw>
    376e:	88 0f       	add	r24, r24
    3770:	83 2b       	or	r24, r19
    3772:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <twi_slarw>
    3776:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <twi_inRepStart>
    377a:	81 30       	cpi	r24, 0x01	; 1
    377c:	61 f4       	brne	.+24     	; 0x3796 <twi_writeTo+0x6e>
    377e:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <twi_inRepStart>
    3782:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <twi_slarw>
    3786:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    378a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    378e:	83 fd       	sbrc	r24, 3
    3790:	f8 cf       	rjmp	.-16     	; 0x3782 <twi_writeTo+0x5a>
    3792:	85 ec       	ldi	r24, 0xC5	; 197
    3794:	01 c0       	rjmp	.+2      	; 0x3798 <twi_writeTo+0x70>
    3796:	85 ee       	ldi	r24, 0xE5	; 229
    3798:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    379c:	22 23       	and	r18, r18
    379e:	21 f0       	breq	.+8      	; 0x37a8 <twi_writeTo+0x80>
    37a0:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_state>
    37a4:	82 30       	cpi	r24, 0x02	; 2
    37a6:	d1 f3       	breq	.-12     	; 0x379c <twi_writeTo+0x74>
    37a8:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <twi_error>
    37ac:	8f 3f       	cpi	r24, 0xFF	; 255
    37ae:	79 f0       	breq	.+30     	; 0x37ce <twi_writeTo+0xa6>
    37b0:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <twi_error>
    37b4:	80 32       	cpi	r24, 0x20	; 32
    37b6:	41 f0       	breq	.+16     	; 0x37c8 <twi_writeTo+0xa0>
    37b8:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <twi_error>
    37bc:	80 33       	cpi	r24, 0x30	; 48
    37be:	31 f0       	breq	.+12     	; 0x37cc <twi_writeTo+0xa4>
    37c0:	94 e0       	ldi	r25, 0x04	; 4
    37c2:	05 c0       	rjmp	.+10     	; 0x37ce <twi_writeTo+0xa6>
    37c4:	91 e0       	ldi	r25, 0x01	; 1
    37c6:	03 c0       	rjmp	.+6      	; 0x37ce <twi_writeTo+0xa6>
    37c8:	92 e0       	ldi	r25, 0x02	; 2
    37ca:	01 c0       	rjmp	.+2      	; 0x37ce <twi_writeTo+0xa6>
    37cc:	93 e0       	ldi	r25, 0x03	; 3
    37ce:	89 2f       	mov	r24, r25
    37d0:	0f 91       	pop	r16
    37d2:	08 95       	ret

000037d4 <twi_transmit>:
    37d4:	40 91 21 04 	lds	r20, 0x0421	; 0x800421 <twi_txBufferLength>
    37d8:	26 2f       	mov	r18, r22
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	24 0f       	add	r18, r20
    37de:	31 1d       	adc	r19, r1
    37e0:	21 32       	cpi	r18, 0x21	; 33
    37e2:	31 05       	cpc	r19, r1
    37e4:	dc f4       	brge	.+54     	; 0x381c <twi_transmit+0x48>
    37e6:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <twi_state>
    37ea:	24 30       	cpi	r18, 0x04	; 4
    37ec:	c9 f4       	brne	.+50     	; 0x3820 <twi_transmit+0x4c>
    37ee:	fc 01       	movw	r30, r24
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	86 17       	cp	r24, r22
    37f6:	58 f4       	brcc	.+22     	; 0x380e <twi_transmit+0x3a>
    37f8:	30 91 21 04 	lds	r19, 0x0421	; 0x800421 <twi_txBufferLength>
    37fc:	21 91       	ld	r18, Z+
    37fe:	dc 01       	movw	r26, r24
    3800:	ad 5d       	subi	r26, 0xDD	; 221
    3802:	bb 4f       	sbci	r27, 0xFB	; 251
    3804:	a3 0f       	add	r26, r19
    3806:	b1 1d       	adc	r27, r1
    3808:	2c 93       	st	X, r18
    380a:	01 96       	adiw	r24, 0x01	; 1
    380c:	f3 cf       	rjmp	.-26     	; 0x37f4 <twi_transmit+0x20>
    380e:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <twi_txBufferLength>
    3812:	68 0f       	add	r22, r24
    3814:	60 93 21 04 	sts	0x0421, r22	; 0x800421 <twi_txBufferLength>
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	08 95       	ret
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	08 95       	ret
    3820:	82 e0       	ldi	r24, 0x02	; 2
    3822:	08 95       	ret

00003824 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3824:	85 ed       	ldi	r24, 0xD5	; 213
    3826:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    382a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    382e:	84 fd       	sbrc	r24, 4
    3830:	fc cf       	rjmp	.-8      	; 0x382a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3832:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <twi_state>
    3836:	08 95       	ret

00003838 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3838:	85 ec       	ldi	r24, 0xC5	; 197
    383a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    383e:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <twi_state>
    3842:	08 95       	ret

00003844 <__vector_24>:
}

ISR(TWI_vect)
{
    3844:	1f 92       	push	r1
    3846:	0f 92       	push	r0
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	0f 92       	push	r0
    384c:	11 24       	eor	r1, r1
    384e:	2f 93       	push	r18
    3850:	3f 93       	push	r19
    3852:	4f 93       	push	r20
    3854:	5f 93       	push	r21
    3856:	6f 93       	push	r22
    3858:	7f 93       	push	r23
    385a:	8f 93       	push	r24
    385c:	9f 93       	push	r25
    385e:	af 93       	push	r26
    3860:	bf 93       	push	r27
    3862:	ef 93       	push	r30
    3864:	ff 93       	push	r31
  switch(TW_STATUS){
    3866:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    386a:	88 7f       	andi	r24, 0xF8	; 248
    386c:	80 36       	cpi	r24, 0x60	; 96
    386e:	09 f4       	brne	.+2      	; 0x3872 <__vector_24+0x2e>
    3870:	9e c0       	rjmp	.+316    	; 0x39ae <__vector_24+0x16a>
    3872:	78 f5       	brcc	.+94     	; 0x38d2 <__vector_24+0x8e>
    3874:	88 32       	cpi	r24, 0x28	; 40
    3876:	09 f4       	brne	.+2      	; 0x387a <__vector_24+0x36>
    3878:	5d c0       	rjmp	.+186    	; 0x3934 <__vector_24+0xf0>
    387a:	90 f4       	brcc	.+36     	; 0x38a0 <__vector_24+0x5c>
    387c:	80 31       	cpi	r24, 0x10	; 16
    387e:	09 f4       	brne	.+2      	; 0x3882 <__vector_24+0x3e>
    3880:	56 c0       	rjmp	.+172    	; 0x392e <__vector_24+0xea>
    3882:	38 f4       	brcc	.+14     	; 0x3892 <__vector_24+0x4e>
    3884:	88 23       	and	r24, r24
    3886:	09 f4       	brne	.+2      	; 0x388a <__vector_24+0x46>
    3888:	f5 c0       	rjmp	.+490    	; 0x3a74 <__vector_24+0x230>
    388a:	88 30       	cpi	r24, 0x08	; 8
    388c:	09 f4       	brne	.+2      	; 0x3890 <__vector_24+0x4c>
    388e:	4f c0       	rjmp	.+158    	; 0x392e <__vector_24+0xea>
    3890:	f5 c0       	rjmp	.+490    	; 0x3a7c <__vector_24+0x238>
    3892:	88 31       	cpi	r24, 0x18	; 24
    3894:	09 f4       	brne	.+2      	; 0x3898 <__vector_24+0x54>
    3896:	4e c0       	rjmp	.+156    	; 0x3934 <__vector_24+0xf0>
    3898:	80 32       	cpi	r24, 0x20	; 32
    389a:	09 f4       	brne	.+2      	; 0x389e <__vector_24+0x5a>
    389c:	5f c0       	rjmp	.+190    	; 0x395c <__vector_24+0x118>
    389e:	ee c0       	rjmp	.+476    	; 0x3a7c <__vector_24+0x238>
    38a0:	80 34       	cpi	r24, 0x40	; 64
    38a2:	09 f4       	brne	.+2      	; 0x38a6 <__vector_24+0x62>
    38a4:	6a c0       	rjmp	.+212    	; 0x397a <__vector_24+0x136>
    38a6:	58 f4       	brcc	.+22     	; 0x38be <__vector_24+0x7a>
    38a8:	80 33       	cpi	r24, 0x30	; 48
    38aa:	09 f4       	brne	.+2      	; 0x38ae <__vector_24+0x6a>
    38ac:	57 c0       	rjmp	.+174    	; 0x395c <__vector_24+0x118>
    38ae:	88 33       	cpi	r24, 0x38	; 56
    38b0:	09 f0       	breq	.+2      	; 0x38b4 <__vector_24+0x70>
    38b2:	e4 c0       	rjmp	.+456    	; 0x3a7c <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    38b4:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <twi_error>
      twi_releaseBus();
    38b8:	0e 94 1c 1c 	call	0x3838	; 0x3838 <twi_releaseBus>
      break;
    38bc:	df c0       	rjmp	.+446    	; 0x3a7c <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    38be:	80 35       	cpi	r24, 0x50	; 80
    38c0:	09 f4       	brne	.+2      	; 0x38c4 <__vector_24+0x80>
    38c2:	4f c0       	rjmp	.+158    	; 0x3962 <__vector_24+0x11e>
    38c4:	88 35       	cpi	r24, 0x58	; 88
    38c6:	09 f4       	brne	.+2      	; 0x38ca <__vector_24+0x86>
    38c8:	5d c0       	rjmp	.+186    	; 0x3984 <__vector_24+0x140>
    38ca:	88 34       	cpi	r24, 0x48	; 72
    38cc:	09 f0       	breq	.+2      	; 0x38d0 <__vector_24+0x8c>
    38ce:	d6 c0       	rjmp	.+428    	; 0x3a7c <__vector_24+0x238>
    38d0:	d3 c0       	rjmp	.+422    	; 0x3a78 <__vector_24+0x234>
    38d2:	88 39       	cpi	r24, 0x98	; 152
    38d4:	09 f4       	brne	.+2      	; 0x38d8 <__vector_24+0x94>
    38d6:	c4 c0       	rjmp	.+392    	; 0x3a60 <__vector_24+0x21c>
    38d8:	a8 f4       	brcc	.+42     	; 0x3904 <__vector_24+0xc0>
    38da:	88 37       	cpi	r24, 0x78	; 120
    38dc:	09 f4       	brne	.+2      	; 0x38e0 <__vector_24+0x9c>
    38de:	67 c0       	rjmp	.+206    	; 0x39ae <__vector_24+0x16a>
    38e0:	38 f4       	brcc	.+14     	; 0x38f0 <__vector_24+0xac>
    38e2:	88 36       	cpi	r24, 0x68	; 104
    38e4:	09 f4       	brne	.+2      	; 0x38e8 <__vector_24+0xa4>
    38e6:	63 c0       	rjmp	.+198    	; 0x39ae <__vector_24+0x16a>
    38e8:	80 37       	cpi	r24, 0x70	; 112
    38ea:	09 f4       	brne	.+2      	; 0x38ee <__vector_24+0xaa>
    38ec:	60 c0       	rjmp	.+192    	; 0x39ae <__vector_24+0x16a>
    38ee:	c6 c0       	rjmp	.+396    	; 0x3a7c <__vector_24+0x238>
    38f0:	88 38       	cpi	r24, 0x88	; 136
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <__vector_24+0xb2>
    38f4:	b5 c0       	rjmp	.+362    	; 0x3a60 <__vector_24+0x21c>
    38f6:	80 39       	cpi	r24, 0x90	; 144
    38f8:	09 f4       	brne	.+2      	; 0x38fc <__vector_24+0xb8>
    38fa:	5f c0       	rjmp	.+190    	; 0x39ba <__vector_24+0x176>
    38fc:	80 38       	cpi	r24, 0x80	; 128
    38fe:	09 f0       	breq	.+2      	; 0x3902 <__vector_24+0xbe>
    3900:	bd c0       	rjmp	.+378    	; 0x3a7c <__vector_24+0x238>
    3902:	5b c0       	rjmp	.+182    	; 0x39ba <__vector_24+0x176>
    3904:	80 3b       	cpi	r24, 0xB0	; 176
    3906:	09 f4       	brne	.+2      	; 0x390a <__vector_24+0xc6>
    3908:	83 c0       	rjmp	.+262    	; 0x3a10 <__vector_24+0x1cc>
    390a:	38 f4       	brcc	.+14     	; 0x391a <__vector_24+0xd6>
    390c:	80 3a       	cpi	r24, 0xA0	; 160
    390e:	09 f4       	brne	.+2      	; 0x3912 <__vector_24+0xce>
    3910:	66 c0       	rjmp	.+204    	; 0x39de <__vector_24+0x19a>
    3912:	88 3a       	cpi	r24, 0xA8	; 168
    3914:	09 f4       	brne	.+2      	; 0x3918 <__vector_24+0xd4>
    3916:	7c c0       	rjmp	.+248    	; 0x3a10 <__vector_24+0x1cc>
    3918:	b1 c0       	rjmp	.+354    	; 0x3a7c <__vector_24+0x238>
    391a:	80 3c       	cpi	r24, 0xC0	; 192
    391c:	09 f4       	brne	.+2      	; 0x3920 <__vector_24+0xdc>
    391e:	a4 c0       	rjmp	.+328    	; 0x3a68 <__vector_24+0x224>
    3920:	88 3c       	cpi	r24, 0xC8	; 200
    3922:	09 f4       	brne	.+2      	; 0x3926 <__vector_24+0xe2>
    3924:	a1 c0       	rjmp	.+322    	; 0x3a68 <__vector_24+0x224>
    3926:	88 3b       	cpi	r24, 0xB8	; 184
    3928:	09 f4       	brne	.+2      	; 0x392c <__vector_24+0xe8>
    392a:	87 c0       	rjmp	.+270    	; 0x3a3a <__vector_24+0x1f6>
    392c:	a7 c0       	rjmp	.+334    	; 0x3a7c <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    392e:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <twi_slarw>
    3932:	10 c0       	rjmp	.+32     	; 0x3954 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3934:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <twi_masterBufferIndex>
    3938:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_masterBufferLength>
    393c:	98 17       	cp	r25, r24
    393e:	70 f5       	brcc	.+92     	; 0x399c <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3940:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <twi_masterBufferIndex>
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	8e 0f       	add	r24, r30
    3948:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_masterBufferIndex>
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	eb 5b       	subi	r30, 0xBB	; 187
    3950:	fb 4f       	sbci	r31, 0xFB	; 251
    3952:	80 81       	ld	r24, Z
    3954:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3958:	85 ec       	ldi	r24, 0xC5	; 197
    395a:	83 c0       	rjmp	.+262    	; 0x3a62 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    395c:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <twi_error>
    3960:	8b c0       	rjmp	.+278    	; 0x3a78 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3962:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <twi_masterBufferIndex>
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	8e 0f       	add	r24, r30
    396a:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_masterBufferIndex>
    396e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	eb 5b       	subi	r30, 0xBB	; 187
    3976:	fb 4f       	sbci	r31, 0xFB	; 251
    3978:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    397a:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <twi_masterBufferIndex>
    397e:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <twi_masterBufferLength>
    3982:	6b c0       	rjmp	.+214    	; 0x3a5a <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3984:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <twi_masterBufferIndex>
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	8e 0f       	add	r24, r30
    398c:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <twi_masterBufferIndex>
    3990:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3994:	f0 e0       	ldi	r31, 0x00	; 0
    3996:	eb 5b       	subi	r30, 0xBB	; 187
    3998:	fb 4f       	sbci	r31, 0xFB	; 251
    399a:	80 83       	st	Z, r24
	if (twi_sendStop)
    399c:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <twi_sendStop>
    39a0:	81 11       	cpse	r24, r1
    39a2:	6a c0       	rjmp	.+212    	; 0x3a78 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    39aa:	84 ea       	ldi	r24, 0xA4	; 164
    39ac:	5e c0       	rjmp	.+188    	; 0x3a6a <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    39ae:	83 e0       	ldi	r24, 0x03	; 3
    39b0:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    39b4:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <twi_rxBufferIndex>
    39b8:	cf cf       	rjmp	.-98     	; 0x3958 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    39ba:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_rxBufferIndex>
    39be:	80 32       	cpi	r24, 0x20	; 32
    39c0:	08 f0       	brcs	.+2      	; 0x39c4 <__vector_24+0x180>
    39c2:	4e c0       	rjmp	.+156    	; 0x3a60 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    39c4:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <twi_rxBufferIndex>
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	8e 0f       	add	r24, r30
    39cc:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <twi_rxBufferIndex>
    39d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    39d4:	f0 e0       	ldi	r31, 0x00	; 0
    39d6:	ef 5f       	subi	r30, 0xFF	; 255
    39d8:	fb 4f       	sbci	r31, 0xFB	; 251
    39da:	80 83       	st	Z, r24
    39dc:	bd cf       	rjmp	.-134    	; 0x3958 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    39de:	0e 94 1c 1c 	call	0x3838	; 0x3838 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    39e2:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <twi_rxBufferIndex>
    39e6:	80 32       	cpi	r24, 0x20	; 32
    39e8:	30 f4       	brcc	.+12     	; 0x39f6 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    39ea:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <twi_rxBufferIndex>
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	ef 5f       	subi	r30, 0xFF	; 255
    39f2:	fb 4f       	sbci	r31, 0xFB	; 251
    39f4:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    39f6:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <twi_rxBufferIndex>
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	e0 91 65 04 	lds	r30, 0x0465	; 0x800465 <twi_onSlaveReceive>
    3a00:	f0 91 66 04 	lds	r31, 0x0466	; 0x800466 <twi_onSlaveReceive+0x1>
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	94 e0       	ldi	r25, 0x04	; 4
    3a08:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3a0a:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <twi_rxBufferIndex>
      break;
    3a0e:	36 c0       	rjmp	.+108    	; 0x3a7c <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3a10:	84 e0       	ldi	r24, 0x04	; 4
    3a12:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3a16:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3a1a:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3a1e:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <twi_onSlaveTransmit>
    3a22:	f0 91 68 04 	lds	r31, 0x0468	; 0x800468 <twi_onSlaveTransmit+0x1>
    3a26:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3a28:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <twi_txBufferLength>
    3a2c:	81 11       	cpse	r24, r1
    3a2e:	05 c0       	rjmp	.+10     	; 0x3a3a <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3a36:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3a3a:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <twi_txBufferIndex>
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	8e 0f       	add	r24, r30
    3a42:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <twi_txBufferIndex>
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	ed 5d       	subi	r30, 0xDD	; 221
    3a4a:	fb 4f       	sbci	r31, 0xFB	; 251
    3a4c:	80 81       	ld	r24, Z
    3a4e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3a52:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <twi_txBufferIndex>
    3a56:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <twi_txBufferLength>
    3a5a:	98 17       	cp	r25, r24
    3a5c:	08 f4       	brcc	.+2      	; 0x3a60 <__vector_24+0x21c>
    3a5e:	7c cf       	rjmp	.-264    	; 0x3958 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3a60:	85 e8       	ldi	r24, 0x85	; 133
    3a62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3a66:	0a c0       	rjmp	.+20     	; 0x3a7c <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3a68:	85 ec       	ldi	r24, 0xC5	; 197
    3a6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3a6e:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <twi_state>
      break;
    3a72:	04 c0       	rjmp	.+8      	; 0x3a7c <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3a74:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <twi_error>
      twi_stop();
    3a78:	0e 94 12 1c 	call	0x3824	; 0x3824 <twi_stop>
      break;
  }
}
    3a7c:	ff 91       	pop	r31
    3a7e:	ef 91       	pop	r30
    3a80:	bf 91       	pop	r27
    3a82:	af 91       	pop	r26
    3a84:	9f 91       	pop	r25
    3a86:	8f 91       	pop	r24
    3a88:	7f 91       	pop	r23
    3a8a:	6f 91       	pop	r22
    3a8c:	5f 91       	pop	r21
    3a8e:	4f 91       	pop	r20
    3a90:	3f 91       	pop	r19
    3a92:	2f 91       	pop	r18
    3a94:	0f 90       	pop	r0
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	0f 90       	pop	r0
    3a9a:	1f 90       	pop	r1
    3a9c:	18 95       	reti

00003a9e <__unordsf2>:
    3a9e:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_cmp>
    3aa2:	88 0b       	sbc	r24, r24
    3aa4:	99 0b       	sbc	r25, r25
    3aa6:	08 95       	ret

00003aa8 <__divmodhi4>:
    3aa8:	97 fb       	bst	r25, 7
    3aaa:	07 2e       	mov	r0, r23
    3aac:	16 f4       	brtc	.+4      	; 0x3ab2 <__divmodhi4+0xa>
    3aae:	00 94       	com	r0
    3ab0:	07 d0       	rcall	.+14     	; 0x3ac0 <__divmodhi4_neg1>
    3ab2:	77 fd       	sbrc	r23, 7
    3ab4:	09 d0       	rcall	.+18     	; 0x3ac8 <__divmodhi4_neg2>
    3ab6:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <__udivmodhi4>
    3aba:	07 fc       	sbrc	r0, 7
    3abc:	05 d0       	rcall	.+10     	; 0x3ac8 <__divmodhi4_neg2>
    3abe:	3e f4       	brtc	.+14     	; 0x3ace <__divmodhi4_exit>

00003ac0 <__divmodhi4_neg1>:
    3ac0:	90 95       	com	r25
    3ac2:	81 95       	neg	r24
    3ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac6:	08 95       	ret

00003ac8 <__divmodhi4_neg2>:
    3ac8:	70 95       	com	r23
    3aca:	61 95       	neg	r22
    3acc:	7f 4f       	sbci	r23, 0xFF	; 255

00003ace <__divmodhi4_exit>:
    3ace:	08 95       	ret

00003ad0 <__udivmodsi4>:
    3ad0:	a1 e2       	ldi	r26, 0x21	; 33
    3ad2:	1a 2e       	mov	r1, r26
    3ad4:	aa 1b       	sub	r26, r26
    3ad6:	bb 1b       	sub	r27, r27
    3ad8:	fd 01       	movw	r30, r26
    3ada:	0d c0       	rjmp	.+26     	; 0x3af6 <__udivmodsi4_ep>

00003adc <__udivmodsi4_loop>:
    3adc:	aa 1f       	adc	r26, r26
    3ade:	bb 1f       	adc	r27, r27
    3ae0:	ee 1f       	adc	r30, r30
    3ae2:	ff 1f       	adc	r31, r31
    3ae4:	a2 17       	cp	r26, r18
    3ae6:	b3 07       	cpc	r27, r19
    3ae8:	e4 07       	cpc	r30, r20
    3aea:	f5 07       	cpc	r31, r21
    3aec:	20 f0       	brcs	.+8      	; 0x3af6 <__udivmodsi4_ep>
    3aee:	a2 1b       	sub	r26, r18
    3af0:	b3 0b       	sbc	r27, r19
    3af2:	e4 0b       	sbc	r30, r20
    3af4:	f5 0b       	sbc	r31, r21

00003af6 <__udivmodsi4_ep>:
    3af6:	66 1f       	adc	r22, r22
    3af8:	77 1f       	adc	r23, r23
    3afa:	88 1f       	adc	r24, r24
    3afc:	99 1f       	adc	r25, r25
    3afe:	1a 94       	dec	r1
    3b00:	69 f7       	brne	.-38     	; 0x3adc <__udivmodsi4_loop>
    3b02:	60 95       	com	r22
    3b04:	70 95       	com	r23
    3b06:	80 95       	com	r24
    3b08:	90 95       	com	r25
    3b0a:	9b 01       	movw	r18, r22
    3b0c:	ac 01       	movw	r20, r24
    3b0e:	bd 01       	movw	r22, r26
    3b10:	cf 01       	movw	r24, r30
    3b12:	08 95       	ret

00003b14 <__tablejump2__>:
    3b14:	ee 0f       	add	r30, r30
    3b16:	ff 1f       	adc	r31, r31
    3b18:	05 90       	lpm	r0, Z+
    3b1a:	f4 91       	lpm	r31, Z
    3b1c:	e0 2d       	mov	r30, r0
    3b1e:	09 94       	ijmp

00003b20 <__udivmodhi4>:
    3b20:	aa 1b       	sub	r26, r26
    3b22:	bb 1b       	sub	r27, r27
    3b24:	51 e1       	ldi	r21, 0x11	; 17
    3b26:	07 c0       	rjmp	.+14     	; 0x3b36 <__udivmodhi4_ep>

00003b28 <__udivmodhi4_loop>:
    3b28:	aa 1f       	adc	r26, r26
    3b2a:	bb 1f       	adc	r27, r27
    3b2c:	a6 17       	cp	r26, r22
    3b2e:	b7 07       	cpc	r27, r23
    3b30:	10 f0       	brcs	.+4      	; 0x3b36 <__udivmodhi4_ep>
    3b32:	a6 1b       	sub	r26, r22
    3b34:	b7 0b       	sbc	r27, r23

00003b36 <__udivmodhi4_ep>:
    3b36:	88 1f       	adc	r24, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	5a 95       	dec	r21
    3b3c:	a9 f7       	brne	.-22     	; 0x3b28 <__udivmodhi4_loop>
    3b3e:	80 95       	com	r24
    3b40:	90 95       	com	r25
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	08 95       	ret

00003b48 <dtostrf>:
    3b48:	ef 92       	push	r14
    3b4a:	0f 93       	push	r16
    3b4c:	1f 93       	push	r17
    3b4e:	cf 93       	push	r28
    3b50:	df 93       	push	r29
    3b52:	e8 01       	movw	r28, r16
    3b54:	47 fd       	sbrc	r20, 7
    3b56:	02 c0       	rjmp	.+4      	; 0x3b5c <dtostrf+0x14>
    3b58:	34 e0       	ldi	r19, 0x04	; 4
    3b5a:	01 c0       	rjmp	.+2      	; 0x3b5e <dtostrf+0x16>
    3b5c:	34 e1       	ldi	r19, 0x14	; 20
    3b5e:	04 2e       	mov	r0, r20
    3b60:	00 0c       	add	r0, r0
    3b62:	55 0b       	sbc	r21, r21
    3b64:	57 ff       	sbrs	r21, 7
    3b66:	03 c0       	rjmp	.+6      	; 0x3b6e <dtostrf+0x26>
    3b68:	51 95       	neg	r21
    3b6a:	41 95       	neg	r20
    3b6c:	51 09       	sbc	r21, r1
    3b6e:	e3 2e       	mov	r14, r19
    3b70:	02 2f       	mov	r16, r18
    3b72:	24 2f       	mov	r18, r20
    3b74:	ae 01       	movw	r20, r28
    3b76:	0e 94 46 21 	call	0x428c	; 0x428c <dtoa_prf>
    3b7a:	ce 01       	movw	r24, r28
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    3b84:	ef 90       	pop	r14
    3b86:	08 95       	ret

00003b88 <malloc>:
    3b88:	0f 93       	push	r16
    3b8a:	1f 93       	push	r17
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29
    3b90:	82 30       	cpi	r24, 0x02	; 2
    3b92:	91 05       	cpc	r25, r1
    3b94:	10 f4       	brcc	.+4      	; 0x3b9a <malloc+0x12>
    3b96:	82 e0       	ldi	r24, 0x02	; 2
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	e0 91 6f 04 	lds	r30, 0x046F	; 0x80046f <__flp>
    3b9e:	f0 91 70 04 	lds	r31, 0x0470	; 0x800470 <__flp+0x1>
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	a0 e0       	ldi	r26, 0x00	; 0
    3ba8:	b0 e0       	ldi	r27, 0x00	; 0
    3baa:	30 97       	sbiw	r30, 0x00	; 0
    3bac:	19 f1       	breq	.+70     	; 0x3bf4 <malloc+0x6c>
    3bae:	40 81       	ld	r20, Z
    3bb0:	51 81       	ldd	r21, Z+1	; 0x01
    3bb2:	02 81       	ldd	r16, Z+2	; 0x02
    3bb4:	13 81       	ldd	r17, Z+3	; 0x03
    3bb6:	48 17       	cp	r20, r24
    3bb8:	59 07       	cpc	r21, r25
    3bba:	c8 f0       	brcs	.+50     	; 0x3bee <malloc+0x66>
    3bbc:	84 17       	cp	r24, r20
    3bbe:	95 07       	cpc	r25, r21
    3bc0:	69 f4       	brne	.+26     	; 0x3bdc <malloc+0x54>
    3bc2:	10 97       	sbiw	r26, 0x00	; 0
    3bc4:	31 f0       	breq	.+12     	; 0x3bd2 <malloc+0x4a>
    3bc6:	12 96       	adiw	r26, 0x02	; 2
    3bc8:	0c 93       	st	X, r16
    3bca:	12 97       	sbiw	r26, 0x02	; 2
    3bcc:	13 96       	adiw	r26, 0x03	; 3
    3bce:	1c 93       	st	X, r17
    3bd0:	27 c0       	rjmp	.+78     	; 0x3c20 <malloc+0x98>
    3bd2:	00 93 6f 04 	sts	0x046F, r16	; 0x80046f <__flp>
    3bd6:	10 93 70 04 	sts	0x0470, r17	; 0x800470 <__flp+0x1>
    3bda:	22 c0       	rjmp	.+68     	; 0x3c20 <malloc+0x98>
    3bdc:	21 15       	cp	r18, r1
    3bde:	31 05       	cpc	r19, r1
    3be0:	19 f0       	breq	.+6      	; 0x3be8 <malloc+0x60>
    3be2:	42 17       	cp	r20, r18
    3be4:	53 07       	cpc	r21, r19
    3be6:	18 f4       	brcc	.+6      	; 0x3bee <malloc+0x66>
    3be8:	9a 01       	movw	r18, r20
    3bea:	bd 01       	movw	r22, r26
    3bec:	ef 01       	movw	r28, r30
    3bee:	df 01       	movw	r26, r30
    3bf0:	f8 01       	movw	r30, r16
    3bf2:	db cf       	rjmp	.-74     	; 0x3baa <malloc+0x22>
    3bf4:	21 15       	cp	r18, r1
    3bf6:	31 05       	cpc	r19, r1
    3bf8:	f9 f0       	breq	.+62     	; 0x3c38 <malloc+0xb0>
    3bfa:	28 1b       	sub	r18, r24
    3bfc:	39 0b       	sbc	r19, r25
    3bfe:	24 30       	cpi	r18, 0x04	; 4
    3c00:	31 05       	cpc	r19, r1
    3c02:	80 f4       	brcc	.+32     	; 0x3c24 <malloc+0x9c>
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	9b 81       	ldd	r25, Y+3	; 0x03
    3c08:	61 15       	cp	r22, r1
    3c0a:	71 05       	cpc	r23, r1
    3c0c:	21 f0       	breq	.+8      	; 0x3c16 <malloc+0x8e>
    3c0e:	fb 01       	movw	r30, r22
    3c10:	93 83       	std	Z+3, r25	; 0x03
    3c12:	82 83       	std	Z+2, r24	; 0x02
    3c14:	04 c0       	rjmp	.+8      	; 0x3c1e <malloc+0x96>
    3c16:	90 93 70 04 	sts	0x0470, r25	; 0x800470 <__flp+0x1>
    3c1a:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <__flp>
    3c1e:	fe 01       	movw	r30, r28
    3c20:	32 96       	adiw	r30, 0x02	; 2
    3c22:	44 c0       	rjmp	.+136    	; 0x3cac <malloc+0x124>
    3c24:	fe 01       	movw	r30, r28
    3c26:	e2 0f       	add	r30, r18
    3c28:	f3 1f       	adc	r31, r19
    3c2a:	81 93       	st	Z+, r24
    3c2c:	91 93       	st	Z+, r25
    3c2e:	22 50       	subi	r18, 0x02	; 2
    3c30:	31 09       	sbc	r19, r1
    3c32:	39 83       	std	Y+1, r19	; 0x01
    3c34:	28 83       	st	Y, r18
    3c36:	3a c0       	rjmp	.+116    	; 0x3cac <malloc+0x124>
    3c38:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <__brkval>
    3c3c:	30 91 6e 04 	lds	r19, 0x046E	; 0x80046e <__brkval+0x1>
    3c40:	23 2b       	or	r18, r19
    3c42:	41 f4       	brne	.+16     	; 0x3c54 <malloc+0xcc>
    3c44:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3c48:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3c4c:	30 93 6e 04 	sts	0x046E, r19	; 0x80046e <__brkval+0x1>
    3c50:	20 93 6d 04 	sts	0x046D, r18	; 0x80046d <__brkval>
    3c54:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3c58:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3c5c:	21 15       	cp	r18, r1
    3c5e:	31 05       	cpc	r19, r1
    3c60:	41 f4       	brne	.+16     	; 0x3c72 <malloc+0xea>
    3c62:	2d b7       	in	r18, 0x3d	; 61
    3c64:	3e b7       	in	r19, 0x3e	; 62
    3c66:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3c6a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3c6e:	24 1b       	sub	r18, r20
    3c70:	35 0b       	sbc	r19, r21
    3c72:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <__brkval>
    3c76:	f0 91 6e 04 	lds	r31, 0x046E	; 0x80046e <__brkval+0x1>
    3c7a:	e2 17       	cp	r30, r18
    3c7c:	f3 07       	cpc	r31, r19
    3c7e:	a0 f4       	brcc	.+40     	; 0x3ca8 <malloc+0x120>
    3c80:	2e 1b       	sub	r18, r30
    3c82:	3f 0b       	sbc	r19, r31
    3c84:	28 17       	cp	r18, r24
    3c86:	39 07       	cpc	r19, r25
    3c88:	78 f0       	brcs	.+30     	; 0x3ca8 <malloc+0x120>
    3c8a:	ac 01       	movw	r20, r24
    3c8c:	4e 5f       	subi	r20, 0xFE	; 254
    3c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3c90:	24 17       	cp	r18, r20
    3c92:	35 07       	cpc	r19, r21
    3c94:	48 f0       	brcs	.+18     	; 0x3ca8 <malloc+0x120>
    3c96:	4e 0f       	add	r20, r30
    3c98:	5f 1f       	adc	r21, r31
    3c9a:	50 93 6e 04 	sts	0x046E, r21	; 0x80046e <__brkval+0x1>
    3c9e:	40 93 6d 04 	sts	0x046D, r20	; 0x80046d <__brkval>
    3ca2:	81 93       	st	Z+, r24
    3ca4:	91 93       	st	Z+, r25
    3ca6:	02 c0       	rjmp	.+4      	; 0x3cac <malloc+0x124>
    3ca8:	e0 e0       	ldi	r30, 0x00	; 0
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	cf 01       	movw	r24, r30
    3cae:	df 91       	pop	r29
    3cb0:	cf 91       	pop	r28
    3cb2:	1f 91       	pop	r17
    3cb4:	0f 91       	pop	r16
    3cb6:	08 95       	ret

00003cb8 <free>:
    3cb8:	cf 93       	push	r28
    3cba:	df 93       	push	r29
    3cbc:	00 97       	sbiw	r24, 0x00	; 0
    3cbe:	09 f4       	brne	.+2      	; 0x3cc2 <free+0xa>
    3cc0:	81 c0       	rjmp	.+258    	; 0x3dc4 <free+0x10c>
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	32 97       	sbiw	r30, 0x02	; 2
    3cc6:	13 82       	std	Z+3, r1	; 0x03
    3cc8:	12 82       	std	Z+2, r1	; 0x02
    3cca:	a0 91 6f 04 	lds	r26, 0x046F	; 0x80046f <__flp>
    3cce:	b0 91 70 04 	lds	r27, 0x0470	; 0x800470 <__flp+0x1>
    3cd2:	10 97       	sbiw	r26, 0x00	; 0
    3cd4:	81 f4       	brne	.+32     	; 0x3cf6 <free+0x3e>
    3cd6:	20 81       	ld	r18, Z
    3cd8:	31 81       	ldd	r19, Z+1	; 0x01
    3cda:	82 0f       	add	r24, r18
    3cdc:	93 1f       	adc	r25, r19
    3cde:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <__brkval>
    3ce2:	30 91 6e 04 	lds	r19, 0x046E	; 0x80046e <__brkval+0x1>
    3ce6:	28 17       	cp	r18, r24
    3ce8:	39 07       	cpc	r19, r25
    3cea:	51 f5       	brne	.+84     	; 0x3d40 <free+0x88>
    3cec:	f0 93 6e 04 	sts	0x046E, r31	; 0x80046e <__brkval+0x1>
    3cf0:	e0 93 6d 04 	sts	0x046D, r30	; 0x80046d <__brkval>
    3cf4:	67 c0       	rjmp	.+206    	; 0x3dc4 <free+0x10c>
    3cf6:	ed 01       	movw	r28, r26
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	ce 17       	cp	r28, r30
    3cfe:	df 07       	cpc	r29, r31
    3d00:	40 f4       	brcc	.+16     	; 0x3d12 <free+0x5a>
    3d02:	4a 81       	ldd	r20, Y+2	; 0x02
    3d04:	5b 81       	ldd	r21, Y+3	; 0x03
    3d06:	9e 01       	movw	r18, r28
    3d08:	41 15       	cp	r20, r1
    3d0a:	51 05       	cpc	r21, r1
    3d0c:	f1 f0       	breq	.+60     	; 0x3d4a <free+0x92>
    3d0e:	ea 01       	movw	r28, r20
    3d10:	f5 cf       	rjmp	.-22     	; 0x3cfc <free+0x44>
    3d12:	d3 83       	std	Z+3, r29	; 0x03
    3d14:	c2 83       	std	Z+2, r28	; 0x02
    3d16:	40 81       	ld	r20, Z
    3d18:	51 81       	ldd	r21, Z+1	; 0x01
    3d1a:	84 0f       	add	r24, r20
    3d1c:	95 1f       	adc	r25, r21
    3d1e:	c8 17       	cp	r28, r24
    3d20:	d9 07       	cpc	r29, r25
    3d22:	59 f4       	brne	.+22     	; 0x3d3a <free+0x82>
    3d24:	88 81       	ld	r24, Y
    3d26:	99 81       	ldd	r25, Y+1	; 0x01
    3d28:	84 0f       	add	r24, r20
    3d2a:	95 1f       	adc	r25, r21
    3d2c:	02 96       	adiw	r24, 0x02	; 2
    3d2e:	91 83       	std	Z+1, r25	; 0x01
    3d30:	80 83       	st	Z, r24
    3d32:	8a 81       	ldd	r24, Y+2	; 0x02
    3d34:	9b 81       	ldd	r25, Y+3	; 0x03
    3d36:	93 83       	std	Z+3, r25	; 0x03
    3d38:	82 83       	std	Z+2, r24	; 0x02
    3d3a:	21 15       	cp	r18, r1
    3d3c:	31 05       	cpc	r19, r1
    3d3e:	29 f4       	brne	.+10     	; 0x3d4a <free+0x92>
    3d40:	f0 93 70 04 	sts	0x0470, r31	; 0x800470 <__flp+0x1>
    3d44:	e0 93 6f 04 	sts	0x046F, r30	; 0x80046f <__flp>
    3d48:	3d c0       	rjmp	.+122    	; 0x3dc4 <free+0x10c>
    3d4a:	e9 01       	movw	r28, r18
    3d4c:	fb 83       	std	Y+3, r31	; 0x03
    3d4e:	ea 83       	std	Y+2, r30	; 0x02
    3d50:	49 91       	ld	r20, Y+
    3d52:	59 91       	ld	r21, Y+
    3d54:	c4 0f       	add	r28, r20
    3d56:	d5 1f       	adc	r29, r21
    3d58:	ec 17       	cp	r30, r28
    3d5a:	fd 07       	cpc	r31, r29
    3d5c:	61 f4       	brne	.+24     	; 0x3d76 <free+0xbe>
    3d5e:	80 81       	ld	r24, Z
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	84 0f       	add	r24, r20
    3d64:	95 1f       	adc	r25, r21
    3d66:	02 96       	adiw	r24, 0x02	; 2
    3d68:	e9 01       	movw	r28, r18
    3d6a:	99 83       	std	Y+1, r25	; 0x01
    3d6c:	88 83       	st	Y, r24
    3d6e:	82 81       	ldd	r24, Z+2	; 0x02
    3d70:	93 81       	ldd	r25, Z+3	; 0x03
    3d72:	9b 83       	std	Y+3, r25	; 0x03
    3d74:	8a 83       	std	Y+2, r24	; 0x02
    3d76:	e0 e0       	ldi	r30, 0x00	; 0
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	12 96       	adiw	r26, 0x02	; 2
    3d7c:	8d 91       	ld	r24, X+
    3d7e:	9c 91       	ld	r25, X
    3d80:	13 97       	sbiw	r26, 0x03	; 3
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	19 f0       	breq	.+6      	; 0x3d8c <free+0xd4>
    3d86:	fd 01       	movw	r30, r26
    3d88:	dc 01       	movw	r26, r24
    3d8a:	f7 cf       	rjmp	.-18     	; 0x3d7a <free+0xc2>
    3d8c:	8d 91       	ld	r24, X+
    3d8e:	9c 91       	ld	r25, X
    3d90:	11 97       	sbiw	r26, 0x01	; 1
    3d92:	9d 01       	movw	r18, r26
    3d94:	2e 5f       	subi	r18, 0xFE	; 254
    3d96:	3f 4f       	sbci	r19, 0xFF	; 255
    3d98:	82 0f       	add	r24, r18
    3d9a:	93 1f       	adc	r25, r19
    3d9c:	20 91 6d 04 	lds	r18, 0x046D	; 0x80046d <__brkval>
    3da0:	30 91 6e 04 	lds	r19, 0x046E	; 0x80046e <__brkval+0x1>
    3da4:	28 17       	cp	r18, r24
    3da6:	39 07       	cpc	r19, r25
    3da8:	69 f4       	brne	.+26     	; 0x3dc4 <free+0x10c>
    3daa:	30 97       	sbiw	r30, 0x00	; 0
    3dac:	29 f4       	brne	.+10     	; 0x3db8 <free+0x100>
    3dae:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <__flp+0x1>
    3db2:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <__flp>
    3db6:	02 c0       	rjmp	.+4      	; 0x3dbc <free+0x104>
    3db8:	13 82       	std	Z+3, r1	; 0x03
    3dba:	12 82       	std	Z+2, r1	; 0x02
    3dbc:	b0 93 6e 04 	sts	0x046E, r27	; 0x80046e <__brkval+0x1>
    3dc0:	a0 93 6d 04 	sts	0x046D, r26	; 0x80046d <__brkval>
    3dc4:	df 91       	pop	r29
    3dc6:	cf 91       	pop	r28
    3dc8:	08 95       	ret

00003dca <strcpy_P>:
    3dca:	fb 01       	movw	r30, r22
    3dcc:	dc 01       	movw	r26, r24
    3dce:	05 90       	lpm	r0, Z+
    3dd0:	0d 92       	st	X+, r0
    3dd2:	00 20       	and	r0, r0
    3dd4:	e1 f7       	brne	.-8      	; 0x3dce <strcpy_P+0x4>
    3dd6:	08 95       	ret

00003dd8 <memcpy>:
    3dd8:	fb 01       	movw	r30, r22
    3dda:	dc 01       	movw	r26, r24
    3ddc:	02 c0       	rjmp	.+4      	; 0x3de2 <memcpy+0xa>
    3dde:	01 90       	ld	r0, Z+
    3de0:	0d 92       	st	X+, r0
    3de2:	41 50       	subi	r20, 0x01	; 1
    3de4:	50 40       	sbci	r21, 0x00	; 0
    3de6:	d8 f7       	brcc	.-10     	; 0x3dde <memcpy+0x6>
    3de8:	08 95       	ret

00003dea <memset>:
    3dea:	dc 01       	movw	r26, r24
    3dec:	01 c0       	rjmp	.+2      	; 0x3df0 <memset+0x6>
    3dee:	6d 93       	st	X+, r22
    3df0:	41 50       	subi	r20, 0x01	; 1
    3df2:	50 40       	sbci	r21, 0x00	; 0
    3df4:	e0 f7       	brcc	.-8      	; 0x3dee <memset+0x4>
    3df6:	08 95       	ret

00003df8 <__itoa_ncheck>:
    3df8:	bb 27       	eor	r27, r27
    3dfa:	4a 30       	cpi	r20, 0x0A	; 10
    3dfc:	31 f4       	brne	.+12     	; 0x3e0a <__itoa_ncheck+0x12>
    3dfe:	99 23       	and	r25, r25
    3e00:	22 f4       	brpl	.+8      	; 0x3e0a <__itoa_ncheck+0x12>
    3e02:	bd e2       	ldi	r27, 0x2D	; 45
    3e04:	90 95       	com	r25
    3e06:	81 95       	neg	r24
    3e08:	9f 4f       	sbci	r25, 0xFF	; 255
    3e0a:	0c 94 2a 1f 	jmp	0x3e54	; 0x3e54 <__utoa_common>

00003e0e <__ultoa_ncheck>:
    3e0e:	bb 27       	eor	r27, r27

00003e10 <__ultoa_common>:
    3e10:	fa 01       	movw	r30, r20
    3e12:	a6 2f       	mov	r26, r22
    3e14:	62 17       	cp	r22, r18
    3e16:	71 05       	cpc	r23, r1
    3e18:	81 05       	cpc	r24, r1
    3e1a:	91 05       	cpc	r25, r1
    3e1c:	33 0b       	sbc	r19, r19
    3e1e:	30 fb       	bst	r19, 0
    3e20:	66 f0       	brts	.+24     	; 0x3e3a <__ultoa_common+0x2a>
    3e22:	aa 27       	eor	r26, r26
    3e24:	66 0f       	add	r22, r22
    3e26:	77 1f       	adc	r23, r23
    3e28:	88 1f       	adc	r24, r24
    3e2a:	99 1f       	adc	r25, r25
    3e2c:	aa 1f       	adc	r26, r26
    3e2e:	a2 17       	cp	r26, r18
    3e30:	10 f0       	brcs	.+4      	; 0x3e36 <__ultoa_common+0x26>
    3e32:	a2 1b       	sub	r26, r18
    3e34:	63 95       	inc	r22
    3e36:	38 50       	subi	r19, 0x08	; 8
    3e38:	a9 f7       	brne	.-22     	; 0x3e24 <__ultoa_common+0x14>
    3e3a:	a0 5d       	subi	r26, 0xD0	; 208
    3e3c:	aa 33       	cpi	r26, 0x3A	; 58
    3e3e:	08 f0       	brcs	.+2      	; 0x3e42 <__ultoa_common+0x32>
    3e40:	a9 5d       	subi	r26, 0xD9	; 217
    3e42:	a1 93       	st	Z+, r26
    3e44:	36 f7       	brtc	.-52     	; 0x3e12 <__ultoa_common+0x2>
    3e46:	b1 11       	cpse	r27, r1
    3e48:	b1 93       	st	Z+, r27
    3e4a:	10 82       	st	Z, r1
    3e4c:	ca 01       	movw	r24, r20
    3e4e:	0c 94 8e 23 	jmp	0x471c	; 0x471c <strrev>

00003e52 <__utoa_ncheck>:
    3e52:	bb 27       	eor	r27, r27

00003e54 <__utoa_common>:
    3e54:	fb 01       	movw	r30, r22
    3e56:	55 27       	eor	r21, r21
    3e58:	aa 27       	eor	r26, r26
    3e5a:	88 0f       	add	r24, r24
    3e5c:	99 1f       	adc	r25, r25
    3e5e:	aa 1f       	adc	r26, r26
    3e60:	a4 17       	cp	r26, r20
    3e62:	10 f0       	brcs	.+4      	; 0x3e68 <__utoa_common+0x14>
    3e64:	a4 1b       	sub	r26, r20
    3e66:	83 95       	inc	r24
    3e68:	50 51       	subi	r21, 0x10	; 16
    3e6a:	b9 f7       	brne	.-18     	; 0x3e5a <__utoa_common+0x6>
    3e6c:	a0 5d       	subi	r26, 0xD0	; 208
    3e6e:	aa 33       	cpi	r26, 0x3A	; 58
    3e70:	08 f0       	brcs	.+2      	; 0x3e74 <__utoa_common+0x20>
    3e72:	a9 5d       	subi	r26, 0xD9	; 217
    3e74:	a1 93       	st	Z+, r26
    3e76:	00 97       	sbiw	r24, 0x00	; 0
    3e78:	79 f7       	brne	.-34     	; 0x3e58 <__utoa_common+0x4>
    3e7a:	b1 11       	cpse	r27, r1
    3e7c:	b1 93       	st	Z+, r27
    3e7e:	11 92       	st	Z+, r1
    3e80:	cb 01       	movw	r24, r22
    3e82:	0c 94 8e 23 	jmp	0x471c	; 0x471c <strrev>

00003e86 <sprintf>:
    3e86:	ae e0       	ldi	r26, 0x0E	; 14
    3e88:	b0 e0       	ldi	r27, 0x00	; 0
    3e8a:	e9 e4       	ldi	r30, 0x49	; 73
    3e8c:	ff e1       	ldi	r31, 0x1F	; 31
    3e8e:	0c 94 46 24 	jmp	0x488c	; 0x488c <__prologue_saves__+0x1c>
    3e92:	0d 89       	ldd	r16, Y+21	; 0x15
    3e94:	1e 89       	ldd	r17, Y+22	; 0x16
    3e96:	86 e0       	ldi	r24, 0x06	; 6
    3e98:	8c 83       	std	Y+4, r24	; 0x04
    3e9a:	1a 83       	std	Y+2, r17	; 0x02
    3e9c:	09 83       	std	Y+1, r16	; 0x01
    3e9e:	8f ef       	ldi	r24, 0xFF	; 255
    3ea0:	9f e7       	ldi	r25, 0x7F	; 127
    3ea2:	9e 83       	std	Y+6, r25	; 0x06
    3ea4:	8d 83       	std	Y+5, r24	; 0x05
    3ea6:	ae 01       	movw	r20, r28
    3ea8:	47 5e       	subi	r20, 0xE7	; 231
    3eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    3eac:	6f 89       	ldd	r22, Y+23	; 0x17
    3eae:	78 8d       	ldd	r23, Y+24	; 0x18
    3eb0:	ce 01       	movw	r24, r28
    3eb2:	01 96       	adiw	r24, 0x01	; 1
    3eb4:	0e 94 65 1f 	call	0x3eca	; 0x3eca <vfprintf>
    3eb8:	ef 81       	ldd	r30, Y+7	; 0x07
    3eba:	f8 85       	ldd	r31, Y+8	; 0x08
    3ebc:	e0 0f       	add	r30, r16
    3ebe:	f1 1f       	adc	r31, r17
    3ec0:	10 82       	st	Z, r1
    3ec2:	2e 96       	adiw	r28, 0x0e	; 14
    3ec4:	e4 e0       	ldi	r30, 0x04	; 4
    3ec6:	0c 94 62 24 	jmp	0x48c4	; 0x48c4 <__epilogue_restores__+0x1c>

00003eca <vfprintf>:
    3eca:	ab e0       	ldi	r26, 0x0B	; 11
    3ecc:	b0 e0       	ldi	r27, 0x00	; 0
    3ece:	eb e6       	ldi	r30, 0x6B	; 107
    3ed0:	ff e1       	ldi	r31, 0x1F	; 31
    3ed2:	0c 94 38 24 	jmp	0x4870	; 0x4870 <__prologue_saves__>
    3ed6:	6c 01       	movw	r12, r24
    3ed8:	7b 01       	movw	r14, r22
    3eda:	8a 01       	movw	r16, r20
    3edc:	fc 01       	movw	r30, r24
    3ede:	17 82       	std	Z+7, r1	; 0x07
    3ee0:	16 82       	std	Z+6, r1	; 0x06
    3ee2:	83 81       	ldd	r24, Z+3	; 0x03
    3ee4:	81 ff       	sbrs	r24, 1
    3ee6:	cc c1       	rjmp	.+920    	; 0x4280 <vfprintf+0x3b6>
    3ee8:	ce 01       	movw	r24, r28
    3eea:	01 96       	adiw	r24, 0x01	; 1
    3eec:	3c 01       	movw	r6, r24
    3eee:	f6 01       	movw	r30, r12
    3ef0:	93 81       	ldd	r25, Z+3	; 0x03
    3ef2:	f7 01       	movw	r30, r14
    3ef4:	93 fd       	sbrc	r25, 3
    3ef6:	85 91       	lpm	r24, Z+
    3ef8:	93 ff       	sbrs	r25, 3
    3efa:	81 91       	ld	r24, Z+
    3efc:	7f 01       	movw	r14, r30
    3efe:	88 23       	and	r24, r24
    3f00:	09 f4       	brne	.+2      	; 0x3f04 <vfprintf+0x3a>
    3f02:	ba c1       	rjmp	.+884    	; 0x4278 <vfprintf+0x3ae>
    3f04:	85 32       	cpi	r24, 0x25	; 37
    3f06:	39 f4       	brne	.+14     	; 0x3f16 <vfprintf+0x4c>
    3f08:	93 fd       	sbrc	r25, 3
    3f0a:	85 91       	lpm	r24, Z+
    3f0c:	93 ff       	sbrs	r25, 3
    3f0e:	81 91       	ld	r24, Z+
    3f10:	7f 01       	movw	r14, r30
    3f12:	85 32       	cpi	r24, 0x25	; 37
    3f14:	29 f4       	brne	.+10     	; 0x3f20 <vfprintf+0x56>
    3f16:	b6 01       	movw	r22, r12
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	0e 94 9e 23 	call	0x473c	; 0x473c <fputc>
    3f1e:	e7 cf       	rjmp	.-50     	; 0x3eee <vfprintf+0x24>
    3f20:	91 2c       	mov	r9, r1
    3f22:	21 2c       	mov	r2, r1
    3f24:	31 2c       	mov	r3, r1
    3f26:	ff e1       	ldi	r31, 0x1F	; 31
    3f28:	f3 15       	cp	r31, r3
    3f2a:	d8 f0       	brcs	.+54     	; 0x3f62 <vfprintf+0x98>
    3f2c:	8b 32       	cpi	r24, 0x2B	; 43
    3f2e:	79 f0       	breq	.+30     	; 0x3f4e <vfprintf+0x84>
    3f30:	38 f4       	brcc	.+14     	; 0x3f40 <vfprintf+0x76>
    3f32:	80 32       	cpi	r24, 0x20	; 32
    3f34:	79 f0       	breq	.+30     	; 0x3f54 <vfprintf+0x8a>
    3f36:	83 32       	cpi	r24, 0x23	; 35
    3f38:	a1 f4       	brne	.+40     	; 0x3f62 <vfprintf+0x98>
    3f3a:	23 2d       	mov	r18, r3
    3f3c:	20 61       	ori	r18, 0x10	; 16
    3f3e:	1d c0       	rjmp	.+58     	; 0x3f7a <vfprintf+0xb0>
    3f40:	8d 32       	cpi	r24, 0x2D	; 45
    3f42:	61 f0       	breq	.+24     	; 0x3f5c <vfprintf+0x92>
    3f44:	80 33       	cpi	r24, 0x30	; 48
    3f46:	69 f4       	brne	.+26     	; 0x3f62 <vfprintf+0x98>
    3f48:	23 2d       	mov	r18, r3
    3f4a:	21 60       	ori	r18, 0x01	; 1
    3f4c:	16 c0       	rjmp	.+44     	; 0x3f7a <vfprintf+0xb0>
    3f4e:	83 2d       	mov	r24, r3
    3f50:	82 60       	ori	r24, 0x02	; 2
    3f52:	38 2e       	mov	r3, r24
    3f54:	e3 2d       	mov	r30, r3
    3f56:	e4 60       	ori	r30, 0x04	; 4
    3f58:	3e 2e       	mov	r3, r30
    3f5a:	2a c0       	rjmp	.+84     	; 0x3fb0 <vfprintf+0xe6>
    3f5c:	f3 2d       	mov	r31, r3
    3f5e:	f8 60       	ori	r31, 0x08	; 8
    3f60:	1d c0       	rjmp	.+58     	; 0x3f9c <vfprintf+0xd2>
    3f62:	37 fc       	sbrc	r3, 7
    3f64:	2d c0       	rjmp	.+90     	; 0x3fc0 <vfprintf+0xf6>
    3f66:	20 ed       	ldi	r18, 0xD0	; 208
    3f68:	28 0f       	add	r18, r24
    3f6a:	2a 30       	cpi	r18, 0x0A	; 10
    3f6c:	40 f0       	brcs	.+16     	; 0x3f7e <vfprintf+0xb4>
    3f6e:	8e 32       	cpi	r24, 0x2E	; 46
    3f70:	b9 f4       	brne	.+46     	; 0x3fa0 <vfprintf+0xd6>
    3f72:	36 fc       	sbrc	r3, 6
    3f74:	81 c1       	rjmp	.+770    	; 0x4278 <vfprintf+0x3ae>
    3f76:	23 2d       	mov	r18, r3
    3f78:	20 64       	ori	r18, 0x40	; 64
    3f7a:	32 2e       	mov	r3, r18
    3f7c:	19 c0       	rjmp	.+50     	; 0x3fb0 <vfprintf+0xe6>
    3f7e:	36 fe       	sbrs	r3, 6
    3f80:	06 c0       	rjmp	.+12     	; 0x3f8e <vfprintf+0xc4>
    3f82:	8a e0       	ldi	r24, 0x0A	; 10
    3f84:	98 9e       	mul	r9, r24
    3f86:	20 0d       	add	r18, r0
    3f88:	11 24       	eor	r1, r1
    3f8a:	92 2e       	mov	r9, r18
    3f8c:	11 c0       	rjmp	.+34     	; 0x3fb0 <vfprintf+0xe6>
    3f8e:	ea e0       	ldi	r30, 0x0A	; 10
    3f90:	2e 9e       	mul	r2, r30
    3f92:	20 0d       	add	r18, r0
    3f94:	11 24       	eor	r1, r1
    3f96:	22 2e       	mov	r2, r18
    3f98:	f3 2d       	mov	r31, r3
    3f9a:	f0 62       	ori	r31, 0x20	; 32
    3f9c:	3f 2e       	mov	r3, r31
    3f9e:	08 c0       	rjmp	.+16     	; 0x3fb0 <vfprintf+0xe6>
    3fa0:	8c 36       	cpi	r24, 0x6C	; 108
    3fa2:	21 f4       	brne	.+8      	; 0x3fac <vfprintf+0xe2>
    3fa4:	83 2d       	mov	r24, r3
    3fa6:	80 68       	ori	r24, 0x80	; 128
    3fa8:	38 2e       	mov	r3, r24
    3faa:	02 c0       	rjmp	.+4      	; 0x3fb0 <vfprintf+0xe6>
    3fac:	88 36       	cpi	r24, 0x68	; 104
    3fae:	41 f4       	brne	.+16     	; 0x3fc0 <vfprintf+0xf6>
    3fb0:	f7 01       	movw	r30, r14
    3fb2:	93 fd       	sbrc	r25, 3
    3fb4:	85 91       	lpm	r24, Z+
    3fb6:	93 ff       	sbrs	r25, 3
    3fb8:	81 91       	ld	r24, Z+
    3fba:	7f 01       	movw	r14, r30
    3fbc:	81 11       	cpse	r24, r1
    3fbe:	b3 cf       	rjmp	.-154    	; 0x3f26 <vfprintf+0x5c>
    3fc0:	98 2f       	mov	r25, r24
    3fc2:	9f 7d       	andi	r25, 0xDF	; 223
    3fc4:	95 54       	subi	r25, 0x45	; 69
    3fc6:	93 30       	cpi	r25, 0x03	; 3
    3fc8:	28 f4       	brcc	.+10     	; 0x3fd4 <vfprintf+0x10a>
    3fca:	0c 5f       	subi	r16, 0xFC	; 252
    3fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    3fce:	9f e3       	ldi	r25, 0x3F	; 63
    3fd0:	99 83       	std	Y+1, r25	; 0x01
    3fd2:	0d c0       	rjmp	.+26     	; 0x3fee <vfprintf+0x124>
    3fd4:	83 36       	cpi	r24, 0x63	; 99
    3fd6:	31 f0       	breq	.+12     	; 0x3fe4 <vfprintf+0x11a>
    3fd8:	83 37       	cpi	r24, 0x73	; 115
    3fda:	71 f0       	breq	.+28     	; 0x3ff8 <vfprintf+0x12e>
    3fdc:	83 35       	cpi	r24, 0x53	; 83
    3fde:	09 f0       	breq	.+2      	; 0x3fe2 <vfprintf+0x118>
    3fe0:	59 c0       	rjmp	.+178    	; 0x4094 <vfprintf+0x1ca>
    3fe2:	21 c0       	rjmp	.+66     	; 0x4026 <vfprintf+0x15c>
    3fe4:	f8 01       	movw	r30, r16
    3fe6:	80 81       	ld	r24, Z
    3fe8:	89 83       	std	Y+1, r24	; 0x01
    3fea:	0e 5f       	subi	r16, 0xFE	; 254
    3fec:	1f 4f       	sbci	r17, 0xFF	; 255
    3fee:	88 24       	eor	r8, r8
    3ff0:	83 94       	inc	r8
    3ff2:	91 2c       	mov	r9, r1
    3ff4:	53 01       	movw	r10, r6
    3ff6:	13 c0       	rjmp	.+38     	; 0x401e <vfprintf+0x154>
    3ff8:	28 01       	movw	r4, r16
    3ffa:	f2 e0       	ldi	r31, 0x02	; 2
    3ffc:	4f 0e       	add	r4, r31
    3ffe:	51 1c       	adc	r5, r1
    4000:	f8 01       	movw	r30, r16
    4002:	a0 80       	ld	r10, Z
    4004:	b1 80       	ldd	r11, Z+1	; 0x01
    4006:	36 fe       	sbrs	r3, 6
    4008:	03 c0       	rjmp	.+6      	; 0x4010 <vfprintf+0x146>
    400a:	69 2d       	mov	r22, r9
    400c:	70 e0       	ldi	r23, 0x00	; 0
    400e:	02 c0       	rjmp	.+4      	; 0x4014 <vfprintf+0x14a>
    4010:	6f ef       	ldi	r22, 0xFF	; 255
    4012:	7f ef       	ldi	r23, 0xFF	; 255
    4014:	c5 01       	movw	r24, r10
    4016:	0e 94 83 23 	call	0x4706	; 0x4706 <strnlen>
    401a:	4c 01       	movw	r8, r24
    401c:	82 01       	movw	r16, r4
    401e:	f3 2d       	mov	r31, r3
    4020:	ff 77       	andi	r31, 0x7F	; 127
    4022:	3f 2e       	mov	r3, r31
    4024:	16 c0       	rjmp	.+44     	; 0x4052 <vfprintf+0x188>
    4026:	28 01       	movw	r4, r16
    4028:	22 e0       	ldi	r18, 0x02	; 2
    402a:	42 0e       	add	r4, r18
    402c:	51 1c       	adc	r5, r1
    402e:	f8 01       	movw	r30, r16
    4030:	a0 80       	ld	r10, Z
    4032:	b1 80       	ldd	r11, Z+1	; 0x01
    4034:	36 fe       	sbrs	r3, 6
    4036:	03 c0       	rjmp	.+6      	; 0x403e <vfprintf+0x174>
    4038:	69 2d       	mov	r22, r9
    403a:	70 e0       	ldi	r23, 0x00	; 0
    403c:	02 c0       	rjmp	.+4      	; 0x4042 <vfprintf+0x178>
    403e:	6f ef       	ldi	r22, 0xFF	; 255
    4040:	7f ef       	ldi	r23, 0xFF	; 255
    4042:	c5 01       	movw	r24, r10
    4044:	0e 94 78 23 	call	0x46f0	; 0x46f0 <strnlen_P>
    4048:	4c 01       	movw	r8, r24
    404a:	f3 2d       	mov	r31, r3
    404c:	f0 68       	ori	r31, 0x80	; 128
    404e:	3f 2e       	mov	r3, r31
    4050:	82 01       	movw	r16, r4
    4052:	33 fc       	sbrc	r3, 3
    4054:	1b c0       	rjmp	.+54     	; 0x408c <vfprintf+0x1c2>
    4056:	82 2d       	mov	r24, r2
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	88 16       	cp	r8, r24
    405c:	99 06       	cpc	r9, r25
    405e:	b0 f4       	brcc	.+44     	; 0x408c <vfprintf+0x1c2>
    4060:	b6 01       	movw	r22, r12
    4062:	80 e2       	ldi	r24, 0x20	; 32
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	0e 94 9e 23 	call	0x473c	; 0x473c <fputc>
    406a:	2a 94       	dec	r2
    406c:	f4 cf       	rjmp	.-24     	; 0x4056 <vfprintf+0x18c>
    406e:	f5 01       	movw	r30, r10
    4070:	37 fc       	sbrc	r3, 7
    4072:	85 91       	lpm	r24, Z+
    4074:	37 fe       	sbrs	r3, 7
    4076:	81 91       	ld	r24, Z+
    4078:	5f 01       	movw	r10, r30
    407a:	b6 01       	movw	r22, r12
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	0e 94 9e 23 	call	0x473c	; 0x473c <fputc>
    4082:	21 10       	cpse	r2, r1
    4084:	2a 94       	dec	r2
    4086:	21 e0       	ldi	r18, 0x01	; 1
    4088:	82 1a       	sub	r8, r18
    408a:	91 08       	sbc	r9, r1
    408c:	81 14       	cp	r8, r1
    408e:	91 04       	cpc	r9, r1
    4090:	71 f7       	brne	.-36     	; 0x406e <vfprintf+0x1a4>
    4092:	e8 c0       	rjmp	.+464    	; 0x4264 <vfprintf+0x39a>
    4094:	84 36       	cpi	r24, 0x64	; 100
    4096:	11 f0       	breq	.+4      	; 0x409c <vfprintf+0x1d2>
    4098:	89 36       	cpi	r24, 0x69	; 105
    409a:	41 f5       	brne	.+80     	; 0x40ec <vfprintf+0x222>
    409c:	f8 01       	movw	r30, r16
    409e:	37 fe       	sbrs	r3, 7
    40a0:	07 c0       	rjmp	.+14     	; 0x40b0 <vfprintf+0x1e6>
    40a2:	60 81       	ld	r22, Z
    40a4:	71 81       	ldd	r23, Z+1	; 0x01
    40a6:	82 81       	ldd	r24, Z+2	; 0x02
    40a8:	93 81       	ldd	r25, Z+3	; 0x03
    40aa:	0c 5f       	subi	r16, 0xFC	; 252
    40ac:	1f 4f       	sbci	r17, 0xFF	; 255
    40ae:	08 c0       	rjmp	.+16     	; 0x40c0 <vfprintf+0x1f6>
    40b0:	60 81       	ld	r22, Z
    40b2:	71 81       	ldd	r23, Z+1	; 0x01
    40b4:	07 2e       	mov	r0, r23
    40b6:	00 0c       	add	r0, r0
    40b8:	88 0b       	sbc	r24, r24
    40ba:	99 0b       	sbc	r25, r25
    40bc:	0e 5f       	subi	r16, 0xFE	; 254
    40be:	1f 4f       	sbci	r17, 0xFF	; 255
    40c0:	f3 2d       	mov	r31, r3
    40c2:	ff 76       	andi	r31, 0x6F	; 111
    40c4:	3f 2e       	mov	r3, r31
    40c6:	97 ff       	sbrs	r25, 7
    40c8:	09 c0       	rjmp	.+18     	; 0x40dc <vfprintf+0x212>
    40ca:	90 95       	com	r25
    40cc:	80 95       	com	r24
    40ce:	70 95       	com	r23
    40d0:	61 95       	neg	r22
    40d2:	7f 4f       	sbci	r23, 0xFF	; 255
    40d4:	8f 4f       	sbci	r24, 0xFF	; 255
    40d6:	9f 4f       	sbci	r25, 0xFF	; 255
    40d8:	f0 68       	ori	r31, 0x80	; 128
    40da:	3f 2e       	mov	r3, r31
    40dc:	2a e0       	ldi	r18, 0x0A	; 10
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	a3 01       	movw	r20, r6
    40e2:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__ultoa_invert>
    40e6:	88 2e       	mov	r8, r24
    40e8:	86 18       	sub	r8, r6
    40ea:	45 c0       	rjmp	.+138    	; 0x4176 <vfprintf+0x2ac>
    40ec:	85 37       	cpi	r24, 0x75	; 117
    40ee:	31 f4       	brne	.+12     	; 0x40fc <vfprintf+0x232>
    40f0:	23 2d       	mov	r18, r3
    40f2:	2f 7e       	andi	r18, 0xEF	; 239
    40f4:	b2 2e       	mov	r11, r18
    40f6:	2a e0       	ldi	r18, 0x0A	; 10
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	25 c0       	rjmp	.+74     	; 0x4146 <vfprintf+0x27c>
    40fc:	93 2d       	mov	r25, r3
    40fe:	99 7f       	andi	r25, 0xF9	; 249
    4100:	b9 2e       	mov	r11, r25
    4102:	8f 36       	cpi	r24, 0x6F	; 111
    4104:	c1 f0       	breq	.+48     	; 0x4136 <vfprintf+0x26c>
    4106:	18 f4       	brcc	.+6      	; 0x410e <vfprintf+0x244>
    4108:	88 35       	cpi	r24, 0x58	; 88
    410a:	79 f0       	breq	.+30     	; 0x412a <vfprintf+0x260>
    410c:	b5 c0       	rjmp	.+362    	; 0x4278 <vfprintf+0x3ae>
    410e:	80 37       	cpi	r24, 0x70	; 112
    4110:	19 f0       	breq	.+6      	; 0x4118 <vfprintf+0x24e>
    4112:	88 37       	cpi	r24, 0x78	; 120
    4114:	21 f0       	breq	.+8      	; 0x411e <vfprintf+0x254>
    4116:	b0 c0       	rjmp	.+352    	; 0x4278 <vfprintf+0x3ae>
    4118:	e9 2f       	mov	r30, r25
    411a:	e0 61       	ori	r30, 0x10	; 16
    411c:	be 2e       	mov	r11, r30
    411e:	b4 fe       	sbrs	r11, 4
    4120:	0d c0       	rjmp	.+26     	; 0x413c <vfprintf+0x272>
    4122:	fb 2d       	mov	r31, r11
    4124:	f4 60       	ori	r31, 0x04	; 4
    4126:	bf 2e       	mov	r11, r31
    4128:	09 c0       	rjmp	.+18     	; 0x413c <vfprintf+0x272>
    412a:	34 fe       	sbrs	r3, 4
    412c:	0a c0       	rjmp	.+20     	; 0x4142 <vfprintf+0x278>
    412e:	29 2f       	mov	r18, r25
    4130:	26 60       	ori	r18, 0x06	; 6
    4132:	b2 2e       	mov	r11, r18
    4134:	06 c0       	rjmp	.+12     	; 0x4142 <vfprintf+0x278>
    4136:	28 e0       	ldi	r18, 0x08	; 8
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	05 c0       	rjmp	.+10     	; 0x4146 <vfprintf+0x27c>
    413c:	20 e1       	ldi	r18, 0x10	; 16
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	02 c0       	rjmp	.+4      	; 0x4146 <vfprintf+0x27c>
    4142:	20 e1       	ldi	r18, 0x10	; 16
    4144:	32 e0       	ldi	r19, 0x02	; 2
    4146:	f8 01       	movw	r30, r16
    4148:	b7 fe       	sbrs	r11, 7
    414a:	07 c0       	rjmp	.+14     	; 0x415a <vfprintf+0x290>
    414c:	60 81       	ld	r22, Z
    414e:	71 81       	ldd	r23, Z+1	; 0x01
    4150:	82 81       	ldd	r24, Z+2	; 0x02
    4152:	93 81       	ldd	r25, Z+3	; 0x03
    4154:	0c 5f       	subi	r16, 0xFC	; 252
    4156:	1f 4f       	sbci	r17, 0xFF	; 255
    4158:	06 c0       	rjmp	.+12     	; 0x4166 <vfprintf+0x29c>
    415a:	60 81       	ld	r22, Z
    415c:	71 81       	ldd	r23, Z+1	; 0x01
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	0e 5f       	subi	r16, 0xFE	; 254
    4164:	1f 4f       	sbci	r17, 0xFF	; 255
    4166:	a3 01       	movw	r20, r6
    4168:	0e 94 da 23 	call	0x47b4	; 0x47b4 <__ultoa_invert>
    416c:	88 2e       	mov	r8, r24
    416e:	86 18       	sub	r8, r6
    4170:	fb 2d       	mov	r31, r11
    4172:	ff 77       	andi	r31, 0x7F	; 127
    4174:	3f 2e       	mov	r3, r31
    4176:	36 fe       	sbrs	r3, 6
    4178:	0d c0       	rjmp	.+26     	; 0x4194 <vfprintf+0x2ca>
    417a:	23 2d       	mov	r18, r3
    417c:	2e 7f       	andi	r18, 0xFE	; 254
    417e:	a2 2e       	mov	r10, r18
    4180:	89 14       	cp	r8, r9
    4182:	58 f4       	brcc	.+22     	; 0x419a <vfprintf+0x2d0>
    4184:	34 fe       	sbrs	r3, 4
    4186:	0b c0       	rjmp	.+22     	; 0x419e <vfprintf+0x2d4>
    4188:	32 fc       	sbrc	r3, 2
    418a:	09 c0       	rjmp	.+18     	; 0x419e <vfprintf+0x2d4>
    418c:	83 2d       	mov	r24, r3
    418e:	8e 7e       	andi	r24, 0xEE	; 238
    4190:	a8 2e       	mov	r10, r24
    4192:	05 c0       	rjmp	.+10     	; 0x419e <vfprintf+0x2d4>
    4194:	b8 2c       	mov	r11, r8
    4196:	a3 2c       	mov	r10, r3
    4198:	03 c0       	rjmp	.+6      	; 0x41a0 <vfprintf+0x2d6>
    419a:	b8 2c       	mov	r11, r8
    419c:	01 c0       	rjmp	.+2      	; 0x41a0 <vfprintf+0x2d6>
    419e:	b9 2c       	mov	r11, r9
    41a0:	a4 fe       	sbrs	r10, 4
    41a2:	0f c0       	rjmp	.+30     	; 0x41c2 <vfprintf+0x2f8>
    41a4:	fe 01       	movw	r30, r28
    41a6:	e8 0d       	add	r30, r8
    41a8:	f1 1d       	adc	r31, r1
    41aa:	80 81       	ld	r24, Z
    41ac:	80 33       	cpi	r24, 0x30	; 48
    41ae:	21 f4       	brne	.+8      	; 0x41b8 <vfprintf+0x2ee>
    41b0:	9a 2d       	mov	r25, r10
    41b2:	99 7e       	andi	r25, 0xE9	; 233
    41b4:	a9 2e       	mov	r10, r25
    41b6:	09 c0       	rjmp	.+18     	; 0x41ca <vfprintf+0x300>
    41b8:	a2 fe       	sbrs	r10, 2
    41ba:	06 c0       	rjmp	.+12     	; 0x41c8 <vfprintf+0x2fe>
    41bc:	b3 94       	inc	r11
    41be:	b3 94       	inc	r11
    41c0:	04 c0       	rjmp	.+8      	; 0x41ca <vfprintf+0x300>
    41c2:	8a 2d       	mov	r24, r10
    41c4:	86 78       	andi	r24, 0x86	; 134
    41c6:	09 f0       	breq	.+2      	; 0x41ca <vfprintf+0x300>
    41c8:	b3 94       	inc	r11
    41ca:	a3 fc       	sbrc	r10, 3
    41cc:	11 c0       	rjmp	.+34     	; 0x41f0 <vfprintf+0x326>
    41ce:	a0 fe       	sbrs	r10, 0
    41d0:	06 c0       	rjmp	.+12     	; 0x41de <vfprintf+0x314>
    41d2:	b2 14       	cp	r11, r2
    41d4:	88 f4       	brcc	.+34     	; 0x41f8 <vfprintf+0x32e>
    41d6:	28 0c       	add	r2, r8
    41d8:	92 2c       	mov	r9, r2
    41da:	9b 18       	sub	r9, r11
    41dc:	0e c0       	rjmp	.+28     	; 0x41fa <vfprintf+0x330>
    41de:	b2 14       	cp	r11, r2
    41e0:	60 f4       	brcc	.+24     	; 0x41fa <vfprintf+0x330>
    41e2:	b6 01       	movw	r22, r12
    41e4:	80 e2       	ldi	r24, 0x20	; 32
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	0e 94 9e 23 	call	0x473c	; 0x473c <fputc>
    41ec:	b3 94       	inc	r11
    41ee:	f7 cf       	rjmp	.-18     	; 0x41de <vfprintf+0x314>
    41f0:	b2 14       	cp	r11, r2
    41f2:	18 f4       	brcc	.+6      	; 0x41fa <vfprintf+0x330>
    41f4:	2b 18       	sub	r2, r11
    41f6:	02 c0       	rjmp	.+4      	; 0x41fc <vfprintf+0x332>
    41f8:	98 2c       	mov	r9, r8
    41fa:	21 2c       	mov	r2, r1
    41fc:	a4 fe       	sbrs	r10, 4
    41fe:	10 c0       	rjmp	.+32     	; 0x4220 <vfprintf+0x356>
    4200:	b6 01       	movw	r22, r12
    4202:	80 e3       	ldi	r24, 0x30	; 48
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	0e 94 9e 23 	call	0x473c	; 0x473c <fputc>
    420a:	a2 fe       	sbrs	r10, 2
    420c:	17 c0       	rjmp	.+46     	; 0x423c <vfprintf+0x372>
    420e:	a1 fc       	sbrc	r10, 1
    4210:	03 c0       	rjmp	.+6      	; 0x4218 <vfprintf+0x34e>
    4212:	88 e7       	ldi	r24, 0x78	; 120
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	02 c0       	rjmp	.+4      	; 0x421c <vfprintf+0x352>
    4218:	88 e5       	ldi	r24, 0x58	; 88
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	b6 01       	movw	r22, r12
    421e:	0c c0       	rjmp	.+24     	; 0x4238 <vfprintf+0x36e>
    4220:	8a 2d       	mov	r24, r10
    4222:	86 78       	andi	r24, 0x86	; 134
    4224:	59 f0       	breq	.+22     	; 0x423c <vfprintf+0x372>
    4226:	a1 fe       	sbrs	r10, 1
    4228:	02 c0       	rjmp	.+4      	; 0x422e <vfprintf+0x364>
    422a:	8b e2       	ldi	r24, 0x2B	; 43
    422c:	01 c0       	rjmp	.+2      	; 0x4230 <vfprintf+0x366>
    422e:	80 e2       	ldi	r24, 0x20	; 32
    4230:	a7 fc       	sbrc	r10, 7
    4232:	8d e2       	ldi	r24, 0x2D	; 45
    4234:	b6 01       	movw	r22, r12
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	0e 94 9e 23 	call	0x473c	; 0x473c <fputc>
    423c:	89 14       	cp	r8, r9
    423e:	38 f4       	brcc	.+14     	; 0x424e <vfprintf+0x384>
    4240:	b6 01       	movw	r22, r12
    4242:	80 e3       	ldi	r24, 0x30	; 48
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	0e 94 9e 23 	call	0x473c	; 0x473c <fputc>
    424a:	9a 94       	dec	r9
    424c:	f7 cf       	rjmp	.-18     	; 0x423c <vfprintf+0x372>
    424e:	8a 94       	dec	r8
    4250:	f3 01       	movw	r30, r6
    4252:	e8 0d       	add	r30, r8
    4254:	f1 1d       	adc	r31, r1
    4256:	80 81       	ld	r24, Z
    4258:	b6 01       	movw	r22, r12
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	0e 94 9e 23 	call	0x473c	; 0x473c <fputc>
    4260:	81 10       	cpse	r8, r1
    4262:	f5 cf       	rjmp	.-22     	; 0x424e <vfprintf+0x384>
    4264:	22 20       	and	r2, r2
    4266:	09 f4       	brne	.+2      	; 0x426a <vfprintf+0x3a0>
    4268:	42 ce       	rjmp	.-892    	; 0x3eee <vfprintf+0x24>
    426a:	b6 01       	movw	r22, r12
    426c:	80 e2       	ldi	r24, 0x20	; 32
    426e:	90 e0       	ldi	r25, 0x00	; 0
    4270:	0e 94 9e 23 	call	0x473c	; 0x473c <fputc>
    4274:	2a 94       	dec	r2
    4276:	f6 cf       	rjmp	.-20     	; 0x4264 <vfprintf+0x39a>
    4278:	f6 01       	movw	r30, r12
    427a:	86 81       	ldd	r24, Z+6	; 0x06
    427c:	97 81       	ldd	r25, Z+7	; 0x07
    427e:	02 c0       	rjmp	.+4      	; 0x4284 <vfprintf+0x3ba>
    4280:	8f ef       	ldi	r24, 0xFF	; 255
    4282:	9f ef       	ldi	r25, 0xFF	; 255
    4284:	2b 96       	adiw	r28, 0x0b	; 11
    4286:	e2 e1       	ldi	r30, 0x12	; 18
    4288:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__epilogue_restores__>

0000428c <dtoa_prf>:
    428c:	a9 e0       	ldi	r26, 0x09	; 9
    428e:	b0 e0       	ldi	r27, 0x00	; 0
    4290:	ec e4       	ldi	r30, 0x4C	; 76
    4292:	f1 e2       	ldi	r31, 0x21	; 33
    4294:	0c 94 3e 24 	jmp	0x487c	; 0x487c <__prologue_saves__+0xc>
    4298:	6a 01       	movw	r12, r20
    429a:	12 2f       	mov	r17, r18
    429c:	b0 2e       	mov	r11, r16
    429e:	2b e3       	ldi	r18, 0x3B	; 59
    42a0:	20 17       	cp	r18, r16
    42a2:	20 f0       	brcs	.+8      	; 0x42ac <dtoa_prf+0x20>
    42a4:	ff 24       	eor	r15, r15
    42a6:	f3 94       	inc	r15
    42a8:	f0 0e       	add	r15, r16
    42aa:	02 c0       	rjmp	.+4      	; 0x42b0 <dtoa_prf+0x24>
    42ac:	2c e3       	ldi	r18, 0x3C	; 60
    42ae:	f2 2e       	mov	r15, r18
    42b0:	0f 2d       	mov	r16, r15
    42b2:	27 e0       	ldi	r18, 0x07	; 7
    42b4:	ae 01       	movw	r20, r28
    42b6:	4f 5f       	subi	r20, 0xFF	; 255
    42b8:	5f 4f       	sbci	r21, 0xFF	; 255
    42ba:	0e 94 a0 22 	call	0x4540	; 0x4540 <__ftoa_engine>
    42be:	bc 01       	movw	r22, r24
    42c0:	49 81       	ldd	r20, Y+1	; 0x01
    42c2:	84 2f       	mov	r24, r20
    42c4:	89 70       	andi	r24, 0x09	; 9
    42c6:	81 30       	cpi	r24, 0x01	; 1
    42c8:	31 f0       	breq	.+12     	; 0x42d6 <dtoa_prf+0x4a>
    42ca:	e1 fc       	sbrc	r14, 1
    42cc:	06 c0       	rjmp	.+12     	; 0x42da <dtoa_prf+0x4e>
    42ce:	e0 fe       	sbrs	r14, 0
    42d0:	06 c0       	rjmp	.+12     	; 0x42de <dtoa_prf+0x52>
    42d2:	90 e2       	ldi	r25, 0x20	; 32
    42d4:	05 c0       	rjmp	.+10     	; 0x42e0 <dtoa_prf+0x54>
    42d6:	9d e2       	ldi	r25, 0x2D	; 45
    42d8:	03 c0       	rjmp	.+6      	; 0x42e0 <dtoa_prf+0x54>
    42da:	9b e2       	ldi	r25, 0x2B	; 43
    42dc:	01 c0       	rjmp	.+2      	; 0x42e0 <dtoa_prf+0x54>
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	5e 2d       	mov	r21, r14
    42e2:	50 71       	andi	r21, 0x10	; 16
    42e4:	43 ff       	sbrs	r20, 3
    42e6:	3c c0       	rjmp	.+120    	; 0x4360 <dtoa_prf+0xd4>
    42e8:	91 11       	cpse	r25, r1
    42ea:	02 c0       	rjmp	.+4      	; 0x42f0 <dtoa_prf+0x64>
    42ec:	83 e0       	ldi	r24, 0x03	; 3
    42ee:	01 c0       	rjmp	.+2      	; 0x42f2 <dtoa_prf+0x66>
    42f0:	84 e0       	ldi	r24, 0x04	; 4
    42f2:	81 17       	cp	r24, r17
    42f4:	18 f4       	brcc	.+6      	; 0x42fc <dtoa_prf+0x70>
    42f6:	21 2f       	mov	r18, r17
    42f8:	28 1b       	sub	r18, r24
    42fa:	01 c0       	rjmp	.+2      	; 0x42fe <dtoa_prf+0x72>
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	51 11       	cpse	r21, r1
    4300:	0b c0       	rjmp	.+22     	; 0x4318 <dtoa_prf+0x8c>
    4302:	f6 01       	movw	r30, r12
    4304:	82 2f       	mov	r24, r18
    4306:	30 e2       	ldi	r19, 0x20	; 32
    4308:	88 23       	and	r24, r24
    430a:	19 f0       	breq	.+6      	; 0x4312 <dtoa_prf+0x86>
    430c:	31 93       	st	Z+, r19
    430e:	81 50       	subi	r24, 0x01	; 1
    4310:	fb cf       	rjmp	.-10     	; 0x4308 <dtoa_prf+0x7c>
    4312:	c2 0e       	add	r12, r18
    4314:	d1 1c       	adc	r13, r1
    4316:	20 e0       	ldi	r18, 0x00	; 0
    4318:	99 23       	and	r25, r25
    431a:	29 f0       	breq	.+10     	; 0x4326 <dtoa_prf+0x9a>
    431c:	d6 01       	movw	r26, r12
    431e:	9c 93       	st	X, r25
    4320:	f6 01       	movw	r30, r12
    4322:	31 96       	adiw	r30, 0x01	; 1
    4324:	6f 01       	movw	r12, r30
    4326:	c6 01       	movw	r24, r12
    4328:	03 96       	adiw	r24, 0x03	; 3
    432a:	e2 fe       	sbrs	r14, 2
    432c:	0a c0       	rjmp	.+20     	; 0x4342 <dtoa_prf+0xb6>
    432e:	3e e4       	ldi	r19, 0x4E	; 78
    4330:	d6 01       	movw	r26, r12
    4332:	3c 93       	st	X, r19
    4334:	41 e4       	ldi	r20, 0x41	; 65
    4336:	11 96       	adiw	r26, 0x01	; 1
    4338:	4c 93       	st	X, r20
    433a:	11 97       	sbiw	r26, 0x01	; 1
    433c:	12 96       	adiw	r26, 0x02	; 2
    433e:	3c 93       	st	X, r19
    4340:	06 c0       	rjmp	.+12     	; 0x434e <dtoa_prf+0xc2>
    4342:	3e e6       	ldi	r19, 0x6E	; 110
    4344:	f6 01       	movw	r30, r12
    4346:	30 83       	st	Z, r19
    4348:	41 e6       	ldi	r20, 0x61	; 97
    434a:	41 83       	std	Z+1, r20	; 0x01
    434c:	32 83       	std	Z+2, r19	; 0x02
    434e:	fc 01       	movw	r30, r24
    4350:	32 2f       	mov	r19, r18
    4352:	40 e2       	ldi	r20, 0x20	; 32
    4354:	33 23       	and	r19, r19
    4356:	09 f4       	brne	.+2      	; 0x435a <dtoa_prf+0xce>
    4358:	42 c0       	rjmp	.+132    	; 0x43de <dtoa_prf+0x152>
    435a:	41 93       	st	Z+, r20
    435c:	31 50       	subi	r19, 0x01	; 1
    435e:	fa cf       	rjmp	.-12     	; 0x4354 <dtoa_prf+0xc8>
    4360:	42 ff       	sbrs	r20, 2
    4362:	44 c0       	rjmp	.+136    	; 0x43ec <dtoa_prf+0x160>
    4364:	91 11       	cpse	r25, r1
    4366:	02 c0       	rjmp	.+4      	; 0x436c <dtoa_prf+0xe0>
    4368:	83 e0       	ldi	r24, 0x03	; 3
    436a:	01 c0       	rjmp	.+2      	; 0x436e <dtoa_prf+0xe2>
    436c:	84 e0       	ldi	r24, 0x04	; 4
    436e:	81 17       	cp	r24, r17
    4370:	18 f4       	brcc	.+6      	; 0x4378 <dtoa_prf+0xec>
    4372:	21 2f       	mov	r18, r17
    4374:	28 1b       	sub	r18, r24
    4376:	01 c0       	rjmp	.+2      	; 0x437a <dtoa_prf+0xee>
    4378:	20 e0       	ldi	r18, 0x00	; 0
    437a:	51 11       	cpse	r21, r1
    437c:	0b c0       	rjmp	.+22     	; 0x4394 <dtoa_prf+0x108>
    437e:	f6 01       	movw	r30, r12
    4380:	82 2f       	mov	r24, r18
    4382:	30 e2       	ldi	r19, 0x20	; 32
    4384:	88 23       	and	r24, r24
    4386:	19 f0       	breq	.+6      	; 0x438e <dtoa_prf+0x102>
    4388:	31 93       	st	Z+, r19
    438a:	81 50       	subi	r24, 0x01	; 1
    438c:	fb cf       	rjmp	.-10     	; 0x4384 <dtoa_prf+0xf8>
    438e:	c2 0e       	add	r12, r18
    4390:	d1 1c       	adc	r13, r1
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	99 23       	and	r25, r25
    4396:	29 f0       	breq	.+10     	; 0x43a2 <dtoa_prf+0x116>
    4398:	d6 01       	movw	r26, r12
    439a:	9c 93       	st	X, r25
    439c:	f6 01       	movw	r30, r12
    439e:	31 96       	adiw	r30, 0x01	; 1
    43a0:	6f 01       	movw	r12, r30
    43a2:	c6 01       	movw	r24, r12
    43a4:	03 96       	adiw	r24, 0x03	; 3
    43a6:	e2 fe       	sbrs	r14, 2
    43a8:	0b c0       	rjmp	.+22     	; 0x43c0 <dtoa_prf+0x134>
    43aa:	39 e4       	ldi	r19, 0x49	; 73
    43ac:	d6 01       	movw	r26, r12
    43ae:	3c 93       	st	X, r19
    43b0:	3e e4       	ldi	r19, 0x4E	; 78
    43b2:	11 96       	adiw	r26, 0x01	; 1
    43b4:	3c 93       	st	X, r19
    43b6:	11 97       	sbiw	r26, 0x01	; 1
    43b8:	36 e4       	ldi	r19, 0x46	; 70
    43ba:	12 96       	adiw	r26, 0x02	; 2
    43bc:	3c 93       	st	X, r19
    43be:	07 c0       	rjmp	.+14     	; 0x43ce <dtoa_prf+0x142>
    43c0:	39 e6       	ldi	r19, 0x69	; 105
    43c2:	f6 01       	movw	r30, r12
    43c4:	30 83       	st	Z, r19
    43c6:	3e e6       	ldi	r19, 0x6E	; 110
    43c8:	31 83       	std	Z+1, r19	; 0x01
    43ca:	36 e6       	ldi	r19, 0x66	; 102
    43cc:	32 83       	std	Z+2, r19	; 0x02
    43ce:	fc 01       	movw	r30, r24
    43d0:	32 2f       	mov	r19, r18
    43d2:	40 e2       	ldi	r20, 0x20	; 32
    43d4:	33 23       	and	r19, r19
    43d6:	19 f0       	breq	.+6      	; 0x43de <dtoa_prf+0x152>
    43d8:	41 93       	st	Z+, r20
    43da:	31 50       	subi	r19, 0x01	; 1
    43dc:	fb cf       	rjmp	.-10     	; 0x43d4 <dtoa_prf+0x148>
    43de:	fc 01       	movw	r30, r24
    43e0:	e2 0f       	add	r30, r18
    43e2:	f1 1d       	adc	r31, r1
    43e4:	10 82       	st	Z, r1
    43e6:	8e ef       	ldi	r24, 0xFE	; 254
    43e8:	9f ef       	ldi	r25, 0xFF	; 255
    43ea:	a6 c0       	rjmp	.+332    	; 0x4538 <dtoa_prf+0x2ac>
    43ec:	21 e0       	ldi	r18, 0x01	; 1
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	91 11       	cpse	r25, r1
    43f2:	02 c0       	rjmp	.+4      	; 0x43f8 <dtoa_prf+0x16c>
    43f4:	20 e0       	ldi	r18, 0x00	; 0
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	16 16       	cp	r1, r22
    43fa:	17 06       	cpc	r1, r23
    43fc:	1c f4       	brge	.+6      	; 0x4404 <dtoa_prf+0x178>
    43fe:	fb 01       	movw	r30, r22
    4400:	31 96       	adiw	r30, 0x01	; 1
    4402:	02 c0       	rjmp	.+4      	; 0x4408 <dtoa_prf+0x17c>
    4404:	e1 e0       	ldi	r30, 0x01	; 1
    4406:	f0 e0       	ldi	r31, 0x00	; 0
    4408:	2e 0f       	add	r18, r30
    440a:	3f 1f       	adc	r19, r31
    440c:	bb 20       	and	r11, r11
    440e:	21 f0       	breq	.+8      	; 0x4418 <dtoa_prf+0x18c>
    4410:	eb 2d       	mov	r30, r11
    4412:	f0 e0       	ldi	r31, 0x00	; 0
    4414:	31 96       	adiw	r30, 0x01	; 1
    4416:	02 c0       	rjmp	.+4      	; 0x441c <dtoa_prf+0x190>
    4418:	e0 e0       	ldi	r30, 0x00	; 0
    441a:	f0 e0       	ldi	r31, 0x00	; 0
    441c:	2e 0f       	add	r18, r30
    441e:	3f 1f       	adc	r19, r31
    4420:	e1 2f       	mov	r30, r17
    4422:	f0 e0       	ldi	r31, 0x00	; 0
    4424:	2e 17       	cp	r18, r30
    4426:	3f 07       	cpc	r19, r31
    4428:	1c f4       	brge	.+6      	; 0x4430 <dtoa_prf+0x1a4>
    442a:	12 1b       	sub	r17, r18
    442c:	21 2f       	mov	r18, r17
    442e:	01 c0       	rjmp	.+2      	; 0x4432 <dtoa_prf+0x1a6>
    4430:	20 e0       	ldi	r18, 0x00	; 0
    4432:	8e 2d       	mov	r24, r14
    4434:	88 71       	andi	r24, 0x18	; 24
    4436:	59 f4       	brne	.+22     	; 0x444e <dtoa_prf+0x1c2>
    4438:	f6 01       	movw	r30, r12
    443a:	82 2f       	mov	r24, r18
    443c:	30 e2       	ldi	r19, 0x20	; 32
    443e:	88 23       	and	r24, r24
    4440:	19 f0       	breq	.+6      	; 0x4448 <dtoa_prf+0x1bc>
    4442:	31 93       	st	Z+, r19
    4444:	81 50       	subi	r24, 0x01	; 1
    4446:	fb cf       	rjmp	.-10     	; 0x443e <dtoa_prf+0x1b2>
    4448:	c2 0e       	add	r12, r18
    444a:	d1 1c       	adc	r13, r1
    444c:	20 e0       	ldi	r18, 0x00	; 0
    444e:	99 23       	and	r25, r25
    4450:	29 f0       	breq	.+10     	; 0x445c <dtoa_prf+0x1d0>
    4452:	d6 01       	movw	r26, r12
    4454:	9c 93       	st	X, r25
    4456:	f6 01       	movw	r30, r12
    4458:	31 96       	adiw	r30, 0x01	; 1
    445a:	6f 01       	movw	r12, r30
    445c:	51 11       	cpse	r21, r1
    445e:	0b c0       	rjmp	.+22     	; 0x4476 <dtoa_prf+0x1ea>
    4460:	f6 01       	movw	r30, r12
    4462:	82 2f       	mov	r24, r18
    4464:	90 e3       	ldi	r25, 0x30	; 48
    4466:	88 23       	and	r24, r24
    4468:	19 f0       	breq	.+6      	; 0x4470 <dtoa_prf+0x1e4>
    446a:	91 93       	st	Z+, r25
    446c:	81 50       	subi	r24, 0x01	; 1
    446e:	fb cf       	rjmp	.-10     	; 0x4466 <dtoa_prf+0x1da>
    4470:	c2 0e       	add	r12, r18
    4472:	d1 1c       	adc	r13, r1
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	0f 2d       	mov	r16, r15
    4478:	06 0f       	add	r16, r22
    447a:	9a 81       	ldd	r25, Y+2	; 0x02
    447c:	34 2f       	mov	r19, r20
    447e:	30 71       	andi	r19, 0x10	; 16
    4480:	44 ff       	sbrs	r20, 4
    4482:	03 c0       	rjmp	.+6      	; 0x448a <dtoa_prf+0x1fe>
    4484:	91 33       	cpi	r25, 0x31	; 49
    4486:	09 f4       	brne	.+2      	; 0x448a <dtoa_prf+0x1fe>
    4488:	01 50       	subi	r16, 0x01	; 1
    448a:	10 16       	cp	r1, r16
    448c:	24 f4       	brge	.+8      	; 0x4496 <dtoa_prf+0x20a>
    448e:	09 30       	cpi	r16, 0x09	; 9
    4490:	18 f0       	brcs	.+6      	; 0x4498 <dtoa_prf+0x20c>
    4492:	08 e0       	ldi	r16, 0x08	; 8
    4494:	01 c0       	rjmp	.+2      	; 0x4498 <dtoa_prf+0x20c>
    4496:	01 e0       	ldi	r16, 0x01	; 1
    4498:	ab 01       	movw	r20, r22
    449a:	77 ff       	sbrs	r23, 7
    449c:	02 c0       	rjmp	.+4      	; 0x44a2 <dtoa_prf+0x216>
    449e:	40 e0       	ldi	r20, 0x00	; 0
    44a0:	50 e0       	ldi	r21, 0x00	; 0
    44a2:	fb 01       	movw	r30, r22
    44a4:	e4 1b       	sub	r30, r20
    44a6:	f5 0b       	sbc	r31, r21
    44a8:	a1 e0       	ldi	r26, 0x01	; 1
    44aa:	b0 e0       	ldi	r27, 0x00	; 0
    44ac:	ac 0f       	add	r26, r28
    44ae:	bd 1f       	adc	r27, r29
    44b0:	ea 0f       	add	r30, r26
    44b2:	fb 1f       	adc	r31, r27
    44b4:	8e e2       	ldi	r24, 0x2E	; 46
    44b6:	a8 2e       	mov	r10, r24
    44b8:	4b 01       	movw	r8, r22
    44ba:	80 1a       	sub	r8, r16
    44bc:	91 08       	sbc	r9, r1
    44be:	0b 2d       	mov	r16, r11
    44c0:	10 e0       	ldi	r17, 0x00	; 0
    44c2:	11 95       	neg	r17
    44c4:	01 95       	neg	r16
    44c6:	11 09       	sbc	r17, r1
    44c8:	4f 3f       	cpi	r20, 0xFF	; 255
    44ca:	bf ef       	ldi	r27, 0xFF	; 255
    44cc:	5b 07       	cpc	r21, r27
    44ce:	21 f4       	brne	.+8      	; 0x44d8 <dtoa_prf+0x24c>
    44d0:	d6 01       	movw	r26, r12
    44d2:	ac 92       	st	X, r10
    44d4:	11 96       	adiw	r26, 0x01	; 1
    44d6:	6d 01       	movw	r12, r26
    44d8:	64 17       	cp	r22, r20
    44da:	75 07       	cpc	r23, r21
    44dc:	2c f0       	brlt	.+10     	; 0x44e8 <dtoa_prf+0x25c>
    44de:	84 16       	cp	r8, r20
    44e0:	95 06       	cpc	r9, r21
    44e2:	14 f4       	brge	.+4      	; 0x44e8 <dtoa_prf+0x25c>
    44e4:	81 81       	ldd	r24, Z+1	; 0x01
    44e6:	01 c0       	rjmp	.+2      	; 0x44ea <dtoa_prf+0x25e>
    44e8:	80 e3       	ldi	r24, 0x30	; 48
    44ea:	41 50       	subi	r20, 0x01	; 1
    44ec:	51 09       	sbc	r21, r1
    44ee:	31 96       	adiw	r30, 0x01	; 1
    44f0:	d6 01       	movw	r26, r12
    44f2:	11 96       	adiw	r26, 0x01	; 1
    44f4:	7d 01       	movw	r14, r26
    44f6:	40 17       	cp	r20, r16
    44f8:	51 07       	cpc	r21, r17
    44fa:	24 f0       	brlt	.+8      	; 0x4504 <dtoa_prf+0x278>
    44fc:	d6 01       	movw	r26, r12
    44fe:	8c 93       	st	X, r24
    4500:	67 01       	movw	r12, r14
    4502:	e2 cf       	rjmp	.-60     	; 0x44c8 <dtoa_prf+0x23c>
    4504:	64 17       	cp	r22, r20
    4506:	75 07       	cpc	r23, r21
    4508:	39 f4       	brne	.+14     	; 0x4518 <dtoa_prf+0x28c>
    450a:	96 33       	cpi	r25, 0x36	; 54
    450c:	20 f4       	brcc	.+8      	; 0x4516 <dtoa_prf+0x28a>
    450e:	95 33       	cpi	r25, 0x35	; 53
    4510:	19 f4       	brne	.+6      	; 0x4518 <dtoa_prf+0x28c>
    4512:	31 11       	cpse	r19, r1
    4514:	01 c0       	rjmp	.+2      	; 0x4518 <dtoa_prf+0x28c>
    4516:	81 e3       	ldi	r24, 0x31	; 49
    4518:	f6 01       	movw	r30, r12
    451a:	80 83       	st	Z, r24
    451c:	f7 01       	movw	r30, r14
    451e:	82 2f       	mov	r24, r18
    4520:	90 e2       	ldi	r25, 0x20	; 32
    4522:	88 23       	and	r24, r24
    4524:	19 f0       	breq	.+6      	; 0x452c <dtoa_prf+0x2a0>
    4526:	91 93       	st	Z+, r25
    4528:	81 50       	subi	r24, 0x01	; 1
    452a:	fb cf       	rjmp	.-10     	; 0x4522 <dtoa_prf+0x296>
    452c:	f7 01       	movw	r30, r14
    452e:	e2 0f       	add	r30, r18
    4530:	f1 1d       	adc	r31, r1
    4532:	10 82       	st	Z, r1
    4534:	80 e0       	ldi	r24, 0x00	; 0
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	29 96       	adiw	r28, 0x09	; 9
    453a:	ec e0       	ldi	r30, 0x0C	; 12
    453c:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__epilogue_restores__+0xc>

00004540 <__ftoa_engine>:
    4540:	28 30       	cpi	r18, 0x08	; 8
    4542:	08 f0       	brcs	.+2      	; 0x4546 <__ftoa_engine+0x6>
    4544:	27 e0       	ldi	r18, 0x07	; 7
    4546:	33 27       	eor	r19, r19
    4548:	da 01       	movw	r26, r20
    454a:	99 0f       	add	r25, r25
    454c:	31 1d       	adc	r19, r1
    454e:	87 fd       	sbrc	r24, 7
    4550:	91 60       	ori	r25, 0x01	; 1
    4552:	00 96       	adiw	r24, 0x00	; 0
    4554:	61 05       	cpc	r22, r1
    4556:	71 05       	cpc	r23, r1
    4558:	39 f4       	brne	.+14     	; 0x4568 <__ftoa_engine+0x28>
    455a:	32 60       	ori	r19, 0x02	; 2
    455c:	2e 5f       	subi	r18, 0xFE	; 254
    455e:	3d 93       	st	X+, r19
    4560:	30 e3       	ldi	r19, 0x30	; 48
    4562:	2a 95       	dec	r18
    4564:	e1 f7       	brne	.-8      	; 0x455e <__ftoa_engine+0x1e>
    4566:	08 95       	ret
    4568:	9f 3f       	cpi	r25, 0xFF	; 255
    456a:	30 f0       	brcs	.+12     	; 0x4578 <__ftoa_engine+0x38>
    456c:	80 38       	cpi	r24, 0x80	; 128
    456e:	71 05       	cpc	r23, r1
    4570:	61 05       	cpc	r22, r1
    4572:	09 f0       	breq	.+2      	; 0x4576 <__ftoa_engine+0x36>
    4574:	3c 5f       	subi	r19, 0xFC	; 252
    4576:	3c 5f       	subi	r19, 0xFC	; 252
    4578:	3d 93       	st	X+, r19
    457a:	91 30       	cpi	r25, 0x01	; 1
    457c:	08 f0       	brcs	.+2      	; 0x4580 <__ftoa_engine+0x40>
    457e:	80 68       	ori	r24, 0x80	; 128
    4580:	91 1d       	adc	r25, r1
    4582:	df 93       	push	r29
    4584:	cf 93       	push	r28
    4586:	1f 93       	push	r17
    4588:	0f 93       	push	r16
    458a:	ff 92       	push	r15
    458c:	ef 92       	push	r14
    458e:	19 2f       	mov	r17, r25
    4590:	98 7f       	andi	r25, 0xF8	; 248
    4592:	96 95       	lsr	r25
    4594:	e9 2f       	mov	r30, r25
    4596:	96 95       	lsr	r25
    4598:	96 95       	lsr	r25
    459a:	e9 0f       	add	r30, r25
    459c:	ff 27       	eor	r31, r31
    459e:	e2 5e       	subi	r30, 0xE2	; 226
    45a0:	fe 4f       	sbci	r31, 0xFE	; 254
    45a2:	99 27       	eor	r25, r25
    45a4:	33 27       	eor	r19, r19
    45a6:	ee 24       	eor	r14, r14
    45a8:	ff 24       	eor	r15, r15
    45aa:	a7 01       	movw	r20, r14
    45ac:	e7 01       	movw	r28, r14
    45ae:	05 90       	lpm	r0, Z+
    45b0:	08 94       	sec
    45b2:	07 94       	ror	r0
    45b4:	28 f4       	brcc	.+10     	; 0x45c0 <__ftoa_engine+0x80>
    45b6:	36 0f       	add	r19, r22
    45b8:	e7 1e       	adc	r14, r23
    45ba:	f8 1e       	adc	r15, r24
    45bc:	49 1f       	adc	r20, r25
    45be:	51 1d       	adc	r21, r1
    45c0:	66 0f       	add	r22, r22
    45c2:	77 1f       	adc	r23, r23
    45c4:	88 1f       	adc	r24, r24
    45c6:	99 1f       	adc	r25, r25
    45c8:	06 94       	lsr	r0
    45ca:	a1 f7       	brne	.-24     	; 0x45b4 <__ftoa_engine+0x74>
    45cc:	05 90       	lpm	r0, Z+
    45ce:	07 94       	ror	r0
    45d0:	28 f4       	brcc	.+10     	; 0x45dc <__ftoa_engine+0x9c>
    45d2:	e7 0e       	add	r14, r23
    45d4:	f8 1e       	adc	r15, r24
    45d6:	49 1f       	adc	r20, r25
    45d8:	56 1f       	adc	r21, r22
    45da:	c1 1d       	adc	r28, r1
    45dc:	77 0f       	add	r23, r23
    45de:	88 1f       	adc	r24, r24
    45e0:	99 1f       	adc	r25, r25
    45e2:	66 1f       	adc	r22, r22
    45e4:	06 94       	lsr	r0
    45e6:	a1 f7       	brne	.-24     	; 0x45d0 <__ftoa_engine+0x90>
    45e8:	05 90       	lpm	r0, Z+
    45ea:	07 94       	ror	r0
    45ec:	28 f4       	brcc	.+10     	; 0x45f8 <__ftoa_engine+0xb8>
    45ee:	f8 0e       	add	r15, r24
    45f0:	49 1f       	adc	r20, r25
    45f2:	56 1f       	adc	r21, r22
    45f4:	c7 1f       	adc	r28, r23
    45f6:	d1 1d       	adc	r29, r1
    45f8:	88 0f       	add	r24, r24
    45fa:	99 1f       	adc	r25, r25
    45fc:	66 1f       	adc	r22, r22
    45fe:	77 1f       	adc	r23, r23
    4600:	06 94       	lsr	r0
    4602:	a1 f7       	brne	.-24     	; 0x45ec <__ftoa_engine+0xac>
    4604:	05 90       	lpm	r0, Z+
    4606:	07 94       	ror	r0
    4608:	20 f4       	brcc	.+8      	; 0x4612 <__ftoa_engine+0xd2>
    460a:	49 0f       	add	r20, r25
    460c:	56 1f       	adc	r21, r22
    460e:	c7 1f       	adc	r28, r23
    4610:	d8 1f       	adc	r29, r24
    4612:	99 0f       	add	r25, r25
    4614:	66 1f       	adc	r22, r22
    4616:	77 1f       	adc	r23, r23
    4618:	88 1f       	adc	r24, r24
    461a:	06 94       	lsr	r0
    461c:	a9 f7       	brne	.-22     	; 0x4608 <__ftoa_engine+0xc8>
    461e:	84 91       	lpm	r24, Z
    4620:	10 95       	com	r17
    4622:	17 70       	andi	r17, 0x07	; 7
    4624:	41 f0       	breq	.+16     	; 0x4636 <__ftoa_engine+0xf6>
    4626:	d6 95       	lsr	r29
    4628:	c7 95       	ror	r28
    462a:	57 95       	ror	r21
    462c:	47 95       	ror	r20
    462e:	f7 94       	ror	r15
    4630:	e7 94       	ror	r14
    4632:	1a 95       	dec	r17
    4634:	c1 f7       	brne	.-16     	; 0x4626 <__ftoa_engine+0xe6>
    4636:	e4 ec       	ldi	r30, 0xC4	; 196
    4638:	f0 e0       	ldi	r31, 0x00	; 0
    463a:	68 94       	set
    463c:	15 90       	lpm	r1, Z+
    463e:	15 91       	lpm	r17, Z+
    4640:	35 91       	lpm	r19, Z+
    4642:	65 91       	lpm	r22, Z+
    4644:	95 91       	lpm	r25, Z+
    4646:	05 90       	lpm	r0, Z+
    4648:	7f e2       	ldi	r23, 0x2F	; 47
    464a:	73 95       	inc	r23
    464c:	e1 18       	sub	r14, r1
    464e:	f1 0a       	sbc	r15, r17
    4650:	43 0b       	sbc	r20, r19
    4652:	56 0b       	sbc	r21, r22
    4654:	c9 0b       	sbc	r28, r25
    4656:	d0 09       	sbc	r29, r0
    4658:	c0 f7       	brcc	.-16     	; 0x464a <__ftoa_engine+0x10a>
    465a:	e1 0c       	add	r14, r1
    465c:	f1 1e       	adc	r15, r17
    465e:	43 1f       	adc	r20, r19
    4660:	56 1f       	adc	r21, r22
    4662:	c9 1f       	adc	r28, r25
    4664:	d0 1d       	adc	r29, r0
    4666:	7e f4       	brtc	.+30     	; 0x4686 <__ftoa_engine+0x146>
    4668:	70 33       	cpi	r23, 0x30	; 48
    466a:	11 f4       	brne	.+4      	; 0x4670 <__ftoa_engine+0x130>
    466c:	8a 95       	dec	r24
    466e:	e6 cf       	rjmp	.-52     	; 0x463c <__ftoa_engine+0xfc>
    4670:	e8 94       	clt
    4672:	01 50       	subi	r16, 0x01	; 1
    4674:	30 f0       	brcs	.+12     	; 0x4682 <__ftoa_engine+0x142>
    4676:	08 0f       	add	r16, r24
    4678:	0a f4       	brpl	.+2      	; 0x467c <__ftoa_engine+0x13c>
    467a:	00 27       	eor	r16, r16
    467c:	02 17       	cp	r16, r18
    467e:	08 f4       	brcc	.+2      	; 0x4682 <__ftoa_engine+0x142>
    4680:	20 2f       	mov	r18, r16
    4682:	23 95       	inc	r18
    4684:	02 2f       	mov	r16, r18
    4686:	7a 33       	cpi	r23, 0x3A	; 58
    4688:	28 f0       	brcs	.+10     	; 0x4694 <__ftoa_engine+0x154>
    468a:	79 e3       	ldi	r23, 0x39	; 57
    468c:	7d 93       	st	X+, r23
    468e:	2a 95       	dec	r18
    4690:	e9 f7       	brne	.-6      	; 0x468c <__ftoa_engine+0x14c>
    4692:	10 c0       	rjmp	.+32     	; 0x46b4 <__ftoa_engine+0x174>
    4694:	7d 93       	st	X+, r23
    4696:	2a 95       	dec	r18
    4698:	89 f6       	brne	.-94     	; 0x463c <__ftoa_engine+0xfc>
    469a:	06 94       	lsr	r0
    469c:	97 95       	ror	r25
    469e:	67 95       	ror	r22
    46a0:	37 95       	ror	r19
    46a2:	17 95       	ror	r17
    46a4:	17 94       	ror	r1
    46a6:	e1 18       	sub	r14, r1
    46a8:	f1 0a       	sbc	r15, r17
    46aa:	43 0b       	sbc	r20, r19
    46ac:	56 0b       	sbc	r21, r22
    46ae:	c9 0b       	sbc	r28, r25
    46b0:	d0 09       	sbc	r29, r0
    46b2:	98 f0       	brcs	.+38     	; 0x46da <__ftoa_engine+0x19a>
    46b4:	23 95       	inc	r18
    46b6:	7e 91       	ld	r23, -X
    46b8:	73 95       	inc	r23
    46ba:	7a 33       	cpi	r23, 0x3A	; 58
    46bc:	08 f0       	brcs	.+2      	; 0x46c0 <__ftoa_engine+0x180>
    46be:	70 e3       	ldi	r23, 0x30	; 48
    46c0:	7c 93       	st	X, r23
    46c2:	20 13       	cpse	r18, r16
    46c4:	b8 f7       	brcc	.-18     	; 0x46b4 <__ftoa_engine+0x174>
    46c6:	7e 91       	ld	r23, -X
    46c8:	70 61       	ori	r23, 0x10	; 16
    46ca:	7d 93       	st	X+, r23
    46cc:	30 f0       	brcs	.+12     	; 0x46da <__ftoa_engine+0x19a>
    46ce:	83 95       	inc	r24
    46d0:	71 e3       	ldi	r23, 0x31	; 49
    46d2:	7d 93       	st	X+, r23
    46d4:	70 e3       	ldi	r23, 0x30	; 48
    46d6:	2a 95       	dec	r18
    46d8:	e1 f7       	brne	.-8      	; 0x46d2 <__ftoa_engine+0x192>
    46da:	11 24       	eor	r1, r1
    46dc:	ef 90       	pop	r14
    46de:	ff 90       	pop	r15
    46e0:	0f 91       	pop	r16
    46e2:	1f 91       	pop	r17
    46e4:	cf 91       	pop	r28
    46e6:	df 91       	pop	r29
    46e8:	99 27       	eor	r25, r25
    46ea:	87 fd       	sbrc	r24, 7
    46ec:	90 95       	com	r25
    46ee:	08 95       	ret

000046f0 <strnlen_P>:
    46f0:	fc 01       	movw	r30, r24
    46f2:	05 90       	lpm	r0, Z+
    46f4:	61 50       	subi	r22, 0x01	; 1
    46f6:	70 40       	sbci	r23, 0x00	; 0
    46f8:	01 10       	cpse	r0, r1
    46fa:	d8 f7       	brcc	.-10     	; 0x46f2 <strnlen_P+0x2>
    46fc:	80 95       	com	r24
    46fe:	90 95       	com	r25
    4700:	8e 0f       	add	r24, r30
    4702:	9f 1f       	adc	r25, r31
    4704:	08 95       	ret

00004706 <strnlen>:
    4706:	fc 01       	movw	r30, r24
    4708:	61 50       	subi	r22, 0x01	; 1
    470a:	70 40       	sbci	r23, 0x00	; 0
    470c:	01 90       	ld	r0, Z+
    470e:	01 10       	cpse	r0, r1
    4710:	d8 f7       	brcc	.-10     	; 0x4708 <strnlen+0x2>
    4712:	80 95       	com	r24
    4714:	90 95       	com	r25
    4716:	8e 0f       	add	r24, r30
    4718:	9f 1f       	adc	r25, r31
    471a:	08 95       	ret

0000471c <strrev>:
    471c:	dc 01       	movw	r26, r24
    471e:	fc 01       	movw	r30, r24
    4720:	67 2f       	mov	r22, r23
    4722:	71 91       	ld	r23, Z+
    4724:	77 23       	and	r23, r23
    4726:	e1 f7       	brne	.-8      	; 0x4720 <strrev+0x4>
    4728:	32 97       	sbiw	r30, 0x02	; 2
    472a:	04 c0       	rjmp	.+8      	; 0x4734 <strrev+0x18>
    472c:	7c 91       	ld	r23, X
    472e:	6d 93       	st	X+, r22
    4730:	70 83       	st	Z, r23
    4732:	62 91       	ld	r22, -Z
    4734:	ae 17       	cp	r26, r30
    4736:	bf 07       	cpc	r27, r31
    4738:	c8 f3       	brcs	.-14     	; 0x472c <strrev+0x10>
    473a:	08 95       	ret

0000473c <fputc>:
    473c:	0f 93       	push	r16
    473e:	1f 93       	push	r17
    4740:	cf 93       	push	r28
    4742:	df 93       	push	r29
    4744:	fb 01       	movw	r30, r22
    4746:	23 81       	ldd	r18, Z+3	; 0x03
    4748:	21 fd       	sbrc	r18, 1
    474a:	03 c0       	rjmp	.+6      	; 0x4752 <fputc+0x16>
    474c:	8f ef       	ldi	r24, 0xFF	; 255
    474e:	9f ef       	ldi	r25, 0xFF	; 255
    4750:	2c c0       	rjmp	.+88     	; 0x47aa <fputc+0x6e>
    4752:	22 ff       	sbrs	r18, 2
    4754:	16 c0       	rjmp	.+44     	; 0x4782 <fputc+0x46>
    4756:	46 81       	ldd	r20, Z+6	; 0x06
    4758:	57 81       	ldd	r21, Z+7	; 0x07
    475a:	24 81       	ldd	r18, Z+4	; 0x04
    475c:	35 81       	ldd	r19, Z+5	; 0x05
    475e:	42 17       	cp	r20, r18
    4760:	53 07       	cpc	r21, r19
    4762:	44 f4       	brge	.+16     	; 0x4774 <fputc+0x38>
    4764:	a0 81       	ld	r26, Z
    4766:	b1 81       	ldd	r27, Z+1	; 0x01
    4768:	9d 01       	movw	r18, r26
    476a:	2f 5f       	subi	r18, 0xFF	; 255
    476c:	3f 4f       	sbci	r19, 0xFF	; 255
    476e:	31 83       	std	Z+1, r19	; 0x01
    4770:	20 83       	st	Z, r18
    4772:	8c 93       	st	X, r24
    4774:	26 81       	ldd	r18, Z+6	; 0x06
    4776:	37 81       	ldd	r19, Z+7	; 0x07
    4778:	2f 5f       	subi	r18, 0xFF	; 255
    477a:	3f 4f       	sbci	r19, 0xFF	; 255
    477c:	37 83       	std	Z+7, r19	; 0x07
    477e:	26 83       	std	Z+6, r18	; 0x06
    4780:	14 c0       	rjmp	.+40     	; 0x47aa <fputc+0x6e>
    4782:	8b 01       	movw	r16, r22
    4784:	ec 01       	movw	r28, r24
    4786:	fb 01       	movw	r30, r22
    4788:	00 84       	ldd	r0, Z+8	; 0x08
    478a:	f1 85       	ldd	r31, Z+9	; 0x09
    478c:	e0 2d       	mov	r30, r0
    478e:	09 95       	icall
    4790:	89 2b       	or	r24, r25
    4792:	e1 f6       	brne	.-72     	; 0x474c <fputc+0x10>
    4794:	d8 01       	movw	r26, r16
    4796:	16 96       	adiw	r26, 0x06	; 6
    4798:	8d 91       	ld	r24, X+
    479a:	9c 91       	ld	r25, X
    479c:	17 97       	sbiw	r26, 0x07	; 7
    479e:	01 96       	adiw	r24, 0x01	; 1
    47a0:	17 96       	adiw	r26, 0x07	; 7
    47a2:	9c 93       	st	X, r25
    47a4:	8e 93       	st	-X, r24
    47a6:	16 97       	sbiw	r26, 0x06	; 6
    47a8:	ce 01       	movw	r24, r28
    47aa:	df 91       	pop	r29
    47ac:	cf 91       	pop	r28
    47ae:	1f 91       	pop	r17
    47b0:	0f 91       	pop	r16
    47b2:	08 95       	ret

000047b4 <__ultoa_invert>:
    47b4:	fa 01       	movw	r30, r20
    47b6:	aa 27       	eor	r26, r26
    47b8:	28 30       	cpi	r18, 0x08	; 8
    47ba:	51 f1       	breq	.+84     	; 0x4810 <__ultoa_invert+0x5c>
    47bc:	20 31       	cpi	r18, 0x10	; 16
    47be:	81 f1       	breq	.+96     	; 0x4820 <__ultoa_invert+0x6c>
    47c0:	e8 94       	clt
    47c2:	6f 93       	push	r22
    47c4:	6e 7f       	andi	r22, 0xFE	; 254
    47c6:	6e 5f       	subi	r22, 0xFE	; 254
    47c8:	7f 4f       	sbci	r23, 0xFF	; 255
    47ca:	8f 4f       	sbci	r24, 0xFF	; 255
    47cc:	9f 4f       	sbci	r25, 0xFF	; 255
    47ce:	af 4f       	sbci	r26, 0xFF	; 255
    47d0:	b1 e0       	ldi	r27, 0x01	; 1
    47d2:	3e d0       	rcall	.+124    	; 0x4850 <__ultoa_invert+0x9c>
    47d4:	b4 e0       	ldi	r27, 0x04	; 4
    47d6:	3c d0       	rcall	.+120    	; 0x4850 <__ultoa_invert+0x9c>
    47d8:	67 0f       	add	r22, r23
    47da:	78 1f       	adc	r23, r24
    47dc:	89 1f       	adc	r24, r25
    47de:	9a 1f       	adc	r25, r26
    47e0:	a1 1d       	adc	r26, r1
    47e2:	68 0f       	add	r22, r24
    47e4:	79 1f       	adc	r23, r25
    47e6:	8a 1f       	adc	r24, r26
    47e8:	91 1d       	adc	r25, r1
    47ea:	a1 1d       	adc	r26, r1
    47ec:	6a 0f       	add	r22, r26
    47ee:	71 1d       	adc	r23, r1
    47f0:	81 1d       	adc	r24, r1
    47f2:	91 1d       	adc	r25, r1
    47f4:	a1 1d       	adc	r26, r1
    47f6:	20 d0       	rcall	.+64     	; 0x4838 <__ultoa_invert+0x84>
    47f8:	09 f4       	brne	.+2      	; 0x47fc <__ultoa_invert+0x48>
    47fa:	68 94       	set
    47fc:	3f 91       	pop	r19
    47fe:	2a e0       	ldi	r18, 0x0A	; 10
    4800:	26 9f       	mul	r18, r22
    4802:	11 24       	eor	r1, r1
    4804:	30 19       	sub	r19, r0
    4806:	30 5d       	subi	r19, 0xD0	; 208
    4808:	31 93       	st	Z+, r19
    480a:	de f6       	brtc	.-74     	; 0x47c2 <__ultoa_invert+0xe>
    480c:	cf 01       	movw	r24, r30
    480e:	08 95       	ret
    4810:	46 2f       	mov	r20, r22
    4812:	47 70       	andi	r20, 0x07	; 7
    4814:	40 5d       	subi	r20, 0xD0	; 208
    4816:	41 93       	st	Z+, r20
    4818:	b3 e0       	ldi	r27, 0x03	; 3
    481a:	0f d0       	rcall	.+30     	; 0x483a <__ultoa_invert+0x86>
    481c:	c9 f7       	brne	.-14     	; 0x4810 <__ultoa_invert+0x5c>
    481e:	f6 cf       	rjmp	.-20     	; 0x480c <__ultoa_invert+0x58>
    4820:	46 2f       	mov	r20, r22
    4822:	4f 70       	andi	r20, 0x0F	; 15
    4824:	40 5d       	subi	r20, 0xD0	; 208
    4826:	4a 33       	cpi	r20, 0x3A	; 58
    4828:	18 f0       	brcs	.+6      	; 0x4830 <__ultoa_invert+0x7c>
    482a:	49 5d       	subi	r20, 0xD9	; 217
    482c:	31 fd       	sbrc	r19, 1
    482e:	40 52       	subi	r20, 0x20	; 32
    4830:	41 93       	st	Z+, r20
    4832:	02 d0       	rcall	.+4      	; 0x4838 <__ultoa_invert+0x84>
    4834:	a9 f7       	brne	.-22     	; 0x4820 <__ultoa_invert+0x6c>
    4836:	ea cf       	rjmp	.-44     	; 0x480c <__ultoa_invert+0x58>
    4838:	b4 e0       	ldi	r27, 0x04	; 4
    483a:	a6 95       	lsr	r26
    483c:	97 95       	ror	r25
    483e:	87 95       	ror	r24
    4840:	77 95       	ror	r23
    4842:	67 95       	ror	r22
    4844:	ba 95       	dec	r27
    4846:	c9 f7       	brne	.-14     	; 0x483a <__ultoa_invert+0x86>
    4848:	00 97       	sbiw	r24, 0x00	; 0
    484a:	61 05       	cpc	r22, r1
    484c:	71 05       	cpc	r23, r1
    484e:	08 95       	ret
    4850:	9b 01       	movw	r18, r22
    4852:	ac 01       	movw	r20, r24
    4854:	0a 2e       	mov	r0, r26
    4856:	06 94       	lsr	r0
    4858:	57 95       	ror	r21
    485a:	47 95       	ror	r20
    485c:	37 95       	ror	r19
    485e:	27 95       	ror	r18
    4860:	ba 95       	dec	r27
    4862:	c9 f7       	brne	.-14     	; 0x4856 <__ultoa_invert+0xa2>
    4864:	62 0f       	add	r22, r18
    4866:	73 1f       	adc	r23, r19
    4868:	84 1f       	adc	r24, r20
    486a:	95 1f       	adc	r25, r21
    486c:	a0 1d       	adc	r26, r0
    486e:	08 95       	ret

00004870 <__prologue_saves__>:
    4870:	2f 92       	push	r2
    4872:	3f 92       	push	r3
    4874:	4f 92       	push	r4
    4876:	5f 92       	push	r5
    4878:	6f 92       	push	r6
    487a:	7f 92       	push	r7
    487c:	8f 92       	push	r8
    487e:	9f 92       	push	r9
    4880:	af 92       	push	r10
    4882:	bf 92       	push	r11
    4884:	cf 92       	push	r12
    4886:	df 92       	push	r13
    4888:	ef 92       	push	r14
    488a:	ff 92       	push	r15
    488c:	0f 93       	push	r16
    488e:	1f 93       	push	r17
    4890:	cf 93       	push	r28
    4892:	df 93       	push	r29
    4894:	cd b7       	in	r28, 0x3d	; 61
    4896:	de b7       	in	r29, 0x3e	; 62
    4898:	ca 1b       	sub	r28, r26
    489a:	db 0b       	sbc	r29, r27
    489c:	0f b6       	in	r0, 0x3f	; 63
    489e:	f8 94       	cli
    48a0:	de bf       	out	0x3e, r29	; 62
    48a2:	0f be       	out	0x3f, r0	; 63
    48a4:	cd bf       	out	0x3d, r28	; 61
    48a6:	09 94       	ijmp

000048a8 <__epilogue_restores__>:
    48a8:	2a 88       	ldd	r2, Y+18	; 0x12
    48aa:	39 88       	ldd	r3, Y+17	; 0x11
    48ac:	48 88       	ldd	r4, Y+16	; 0x10
    48ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    48b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    48b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    48b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    48b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    48b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    48ba:	b9 84       	ldd	r11, Y+9	; 0x09
    48bc:	c8 84       	ldd	r12, Y+8	; 0x08
    48be:	df 80       	ldd	r13, Y+7	; 0x07
    48c0:	ee 80       	ldd	r14, Y+6	; 0x06
    48c2:	fd 80       	ldd	r15, Y+5	; 0x05
    48c4:	0c 81       	ldd	r16, Y+4	; 0x04
    48c6:	1b 81       	ldd	r17, Y+3	; 0x03
    48c8:	aa 81       	ldd	r26, Y+2	; 0x02
    48ca:	b9 81       	ldd	r27, Y+1	; 0x01
    48cc:	ce 0f       	add	r28, r30
    48ce:	d1 1d       	adc	r29, r1
    48d0:	0f b6       	in	r0, 0x3f	; 63
    48d2:	f8 94       	cli
    48d4:	de bf       	out	0x3e, r29	; 62
    48d6:	0f be       	out	0x3f, r0	; 63
    48d8:	cd bf       	out	0x3d, r28	; 61
    48da:	ed 01       	movw	r28, r26
    48dc:	08 95       	ret

000048de <__do_global_dtors>:
    48de:	11 e0       	ldi	r17, 0x01	; 1
    48e0:	c3 e4       	ldi	r28, 0x43	; 67
    48e2:	d1 e0       	ldi	r29, 0x01	; 1
    48e4:	04 c0       	rjmp	.+8      	; 0x48ee <__do_global_dtors+0x10>
    48e6:	fe 01       	movw	r30, r28
    48e8:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <__tablejump2__>
    48ec:	21 96       	adiw	r28, 0x01	; 1
    48ee:	c5 34       	cpi	r28, 0x45	; 69
    48f0:	d1 07       	cpc	r29, r17
    48f2:	c9 f7       	brne	.-14     	; 0x48e6 <__do_global_dtors+0x8>
    48f4:	f8 94       	cli

000048f6 <__stop_program>:
    48f6:	ff cf       	rjmp	.-2      	; 0x48f6 <__stop_program>
